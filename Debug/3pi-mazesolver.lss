
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000026c0  00002754  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021c  00800164  00800164  000027b8  2**0
                  ALLOC
  3 .stab         00006e88  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009640  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00012322  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00012364  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  000123a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000014b0  00000000  00000000  00012494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000777  00000000  00000000  00013944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000eec  00000000  00000000  000140bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000214  00000000  00000000  00014fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000479  00000000  00000000  000151bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000809  00000000  00000000  00015635  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b8  00000000  00000000  00015e3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__dtors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__vector_13>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <go>:
      76:	4c 31 36 20 63 64 65 67 72 65 67 34 00              L16 cdegreg4.

00000083 <welcome>:
      83:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008d <demo_name_line2>:
      8d:	73 6f 6c 76 65 72 00                                solver.

00000094 <demo_name_line1>:
      94:	4d 61 7a 65 00                                      Maze.

00000099 <welcome_line2>:
      99:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

000000a2 <welcome_line1>:
      a2:	20 50 6f 6c 6f 6c 75 00                              Pololu.

000000aa <__ctors_end>:
      aa:	46 0c       	add	r4, r6

000000ac <__dtors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d8 e0       	ldi	r29, 0x08	; 8
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 ec       	ldi	r30, 0xC0	; 192
      c0:	f6 e2       	ldi	r31, 0x26	; 38
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a4 36       	cpi	r26, 0x64	; 100
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	a4 e6       	ldi	r26, 0x64	; 100
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a0 38       	cpi	r26, 0x80	; 128
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 40 02 	call	0x480	; 0x480 <main>
      e2:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__do_global_dtors>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	88 e6       	ldi	r24, 0x68	; 104
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	89 e6       	ldi	r24, 0x69	; 105
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
      fe:	62 e0       	ldi	r22, 0x02	; 2
     100:	8a e6       	ldi	r24, 0x6A	; 106
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
     108:	63 e0       	ldi	r22, 0x03	; 3
     10a:	8b e6       	ldi	r24, 0x6B	; 107
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     112:	64 e0       	ldi	r22, 0x04	; 4
     114:	8c e6       	ldi	r24, 0x6C	; 108
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     11c:	65 e0       	ldi	r22, 0x05	; 5
     11e:	8d e6       	ldi	r24, 0x6D	; 109
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     126:	66 e0       	ldi	r22, 0x06	; 6
     128:	8e e6       	ldi	r24, 0x6E	; 110
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     130:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <clear>

00000134 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     134:	bf 92       	push	r11
     136:	cf 92       	push	r12
     138:	df 92       	push	r13
     13a:	ef 92       	push	r14
     13c:	ff 92       	push	r15
     13e:	0f 93       	push	r16
     140:	1f 93       	push	r17
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	2a 97       	sbiw	r28, 0x0a	; 10
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	8c 01       	movw	r16, r24
     158:	7c 01       	movw	r14, r24
     15a:	8a e0       	ldi	r24, 0x0A	; 10
     15c:	e8 0e       	add	r14, r24
     15e:	f1 1c       	adc	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     160:	8a e0       	ldi	r24, 0x0A	; 10
     162:	b8 2e       	mov	r11, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     164:	95 e6       	ldi	r25, 0x65	; 101
     166:	c9 2e       	mov	r12, r25
     168:	d1 2c       	mov	r13, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     16a:	e6 e1       	ldi	r30, 0x16	; 22
     16c:	f1 e0       	ldi	r31, 0x01	; 1
     16e:	de 01       	movw	r26, r28
     170:	11 96       	adiw	r26, 0x01	; 1
     172:	8b 2d       	mov	r24, r11
     174:	01 90       	ld	r0, Z+
     176:	0d 92       	st	X+, r0
     178:	8a 95       	dec	r24
     17a:	e1 f7       	brne	.-8      	; 0x174 <display_readings+0x40>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     17c:	f8 01       	movw	r30, r16
     17e:	81 91       	ld	r24, Z+
     180:	91 91       	ld	r25, Z+
     182:	8f 01       	movw	r16, r30
     184:	b6 01       	movw	r22, r12
     186:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ec 0f       	add	r30, r28
     190:	fd 1f       	adc	r31, r29
     192:	e6 0f       	add	r30, r22
     194:	f7 1f       	adc	r31, r23

		// Display the bar graph character.
		print_character(c);
     196:	80 81       	ld	r24, Z
     198:	0e 94 7e 09 	call	0x12fc	; 0x12fc <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     19c:	0e 15       	cp	r16, r14
     19e:	1f 05       	cpc	r17, r15
     1a0:	21 f7       	brne	.-56     	; 0x16a <display_readings+0x36>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     1a2:	2a 96       	adiw	r28, 0x0a	; 10
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28
     1b2:	1f 91       	pop	r17
     1b4:	0f 91       	pop	r16
     1b6:	ff 90       	pop	r15
     1b8:	ef 90       	pop	r14
     1ba:	df 90       	pop	r13
     1bc:	cf 90       	pop	r12
     1be:	bf 90       	pop	r11
     1c0:	08 95       	ret

000001c2 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1c2:	2f 92       	push	r2
     1c4:	3f 92       	push	r3
     1c6:	4f 92       	push	r4
     1c8:	5f 92       	push	r5
     1ca:	6f 92       	push	r6
     1cc:	7f 92       	push	r7
     1ce:	8f 92       	push	r8
     1d0:	9f 92       	push	r9
     1d2:	af 92       	push	r10
     1d4:	bf 92       	push	r11
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	2a 97       	sbiw	r28, 0x0a	; 10
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     1f6:	c1 2c       	mov	r12, r1
     1f8:	d1 2c       	mov	r13, r1
     1fa:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     1fc:	a1 2c       	mov	r10, r1
     1fe:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     200:	60 e1       	ldi	r22, 0x10	; 16
     202:	46 2e       	mov	r4, r22
     204:	67 e2       	ldi	r22, 0x27	; 39
     206:	56 2e       	mov	r5, r22
     208:	61 2c       	mov	r6, r1
     20a:	71 2c       	mov	r7, r1
     20c:	74 e1       	ldi	r23, 0x14	; 20
     20e:	27 2e       	mov	r2, r23
     210:	31 2c       	mov	r3, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     212:	ec e3       	ldi	r30, 0x3C	; 60
     214:	8e 2e       	mov	r8, r30
     216:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_line>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     222:	8c 01       	movw	r16, r24
     224:	00 5d       	subi	r16, 0xD0	; 208
     226:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     228:	c8 01       	movw	r24, r16
     22a:	01 2e       	mov	r0, r17
     22c:	00 0c       	add	r0, r0
     22e:	aa 0b       	sbc	r26, r26
     230:	bb 0b       	sbc	r27, r27
     232:	c8 0e       	add	r12, r24
     234:	d9 1e       	adc	r13, r25
     236:	ea 1e       	adc	r14, r26
     238:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	a3 01       	movw	r20, r6
     240:	92 01       	movw	r18, r4
     242:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     246:	f8 01       	movw	r30, r16
     248:	ea 19       	sub	r30, r10
     24a:	fb 09       	sbc	r31, r11
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     24c:	cf 01       	movw	r24, r30
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	8e 0f       	add	r24, r30
     254:	9f 1f       	adc	r25, r31
     256:	97 fd       	sbrc	r25, 7
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	95 95       	asr	r25
     25c:	87 95       	ror	r24
     25e:	28 0f       	add	r18, r24
     260:	39 1f       	adc	r19, r25
     262:	c8 01       	movw	r24, r16
     264:	b1 01       	movw	r22, r2
     266:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>
     26a:	c9 01       	movw	r24, r18
     26c:	86 0f       	add	r24, r22
     26e:	97 1f       	adc	r25, r23

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
     270:	8d 33       	cpi	r24, 0x3D	; 61
     272:	91 05       	cpc	r25, r1
     274:	6c f4       	brge	.+26     	; 0x290 <follow_segment+0xce>
			power_difference = max;
		if(power_difference < -max)
     276:	84 3c       	cpi	r24, 0xC4	; 196
     278:	2f ef       	ldi	r18, 0xFF	; 255
     27a:	92 07       	cpc	r25, r18
     27c:	1c f0       	brlt	.+6      	; 0x284 <follow_segment+0xc2>
			power_difference = -max;
		
		if(power_difference < 0)
     27e:	97 fd       	sbrc	r25, 7
     280:	03 c0       	rjmp	.+6      	; 0x288 <follow_segment+0xc6>
     282:	08 c0       	rjmp	.+16     	; 0x294 <follow_segment+0xd2>
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     284:	84 ec       	ldi	r24, 0xC4	; 196
     286:	9f ef       	ldi	r25, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     288:	6c e3       	ldi	r22, 0x3C	; 60
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	cc 96       	adiw	r24, 0x3c	; 60
     28e:	07 c0       	rjmp	.+14     	; 0x29e <follow_segment+0xdc>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     290:	8c e3       	ldi	r24, 0x3C	; 60
     292:	90 e0       	ldi	r25, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     294:	b4 01       	movw	r22, r8
     296:	68 1b       	sub	r22, r24
     298:	79 0b       	sbc	r23, r25
     29a:	8c e3       	ldi	r24, 0x3C	; 60
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] < 100 && sensors[2] < 100 && sensors[3] < 100)
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	91 05       	cpc	r25, r1
     2aa:	50 f4       	brcc	.+20     	; 0x2c0 <follow_segment+0xfe>
     2ac:	8d 81       	ldd	r24, Y+5	; 0x05
     2ae:	9e 81       	ldd	r25, Y+6	; 0x06
     2b0:	84 36       	cpi	r24, 0x64	; 100
     2b2:	91 05       	cpc	r25, r1
     2b4:	28 f4       	brcc	.+10     	; 0x2c0 <follow_segment+0xfe>
     2b6:	8f 81       	ldd	r24, Y+7	; 0x07
     2b8:	98 85       	ldd	r25, Y+8	; 0x08
     2ba:	84 36       	cpi	r24, 0x64	; 100
     2bc:	91 05       	cpc	r25, r1
     2be:	60 f0       	brcs	.+24     	; 0x2d8 <follow_segment+0x116>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] > 200 || sensors[4] > 200)
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	9a 81       	ldd	r25, Y+2	; 0x02
     2c4:	89 3c       	cpi	r24, 0xC9	; 201
     2c6:	91 05       	cpc	r25, r1
     2c8:	38 f4       	brcc	.+14     	; 0x2d8 <follow_segment+0x116>
     2ca:	89 85       	ldd	r24, Y+9	; 0x09
     2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     2ce:	89 3c       	cpi	r24, 0xC9	; 201
     2d0:	91 05       	cpc	r25, r1
     2d2:	10 f4       	brcc	.+4      	; 0x2d8 <follow_segment+0x116>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2d4:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			return;
		}

	}
     2d6:	a0 cf       	rjmp	.-192    	; 0x218 <follow_segment+0x56>
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	08 95       	ret

0000030a <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
void initialize()
{
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	2a 97       	sbiw	r28, 0x0a	; 10
     318:	0f b6       	in	r0, 0x3f	; 63
     31a:	f8 94       	cli
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	0f be       	out	0x3f, r0	; 63
     320:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5]; // an array to hold sensor values

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     322:	80 ed       	ldi	r24, 0xD0	; 208
     324:	97 e0       	ldi	r25, 0x07	; 7
     326:	0e 94 42 0c 	call	0x1884	; 0x1884 <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     32a:	0e 94 75 00 	call	0xea	; 0xea <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     32e:	82 ea       	ldi	r24, 0xA2	; 162
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 0e 0a 	call	0x141c	; 0x141c <print_from_program_space>
	lcd_goto_xy(0,1);
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 86 0a 	call	0x150c	; 0x150c <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     33e:	89 e9       	ldi	r24, 0x99	; 153
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 0e 0a 	call	0x141c	; 0x141c <print_from_program_space>
	play_from_program_space(welcome);
     346:	83 e8       	ldi	r24, 0x83	; 131
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 bb 08 	call	0x1176	; 0x1176 <play_from_program_space>
	delay_ms(1000);
     34e:	88 ee       	ldi	r24, 0xE8	; 232
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>

	clear();
     356:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
	print_from_program_space(demo_name_line1);
     35a:	84 e9       	ldi	r24, 0x94	; 148
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 0e 0a 	call	0x141c	; 0x141c <print_from_program_space>
	lcd_goto_xy(0,1);
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 86 0a 	call	0x150c	; 0x150c <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     36a:	8d e8       	ldi	r24, 0x8D	; 141
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 0e 0a 	call	0x141c	; 0x141c <print_from_program_space>
	delay_ms(1000);
     372:	88 ee       	ldi	r24, 0xE8	; 232
     374:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     376:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	// Display battery voltage and wait for button press
	while(!button_is_pressed(BUTTON_B))
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <button_is_pressed>
     380:	81 11       	cpse	r24, r1
     382:	1a c0       	rjmp	.+52     	; 0x3b8 <initialize+0xae>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     384:	0e 94 80 05 	call	0xb00	; 0xb00 <read_battery_millivolts_3pi>
     388:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     38a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
		print_long(bat);
     38e:	b8 01       	movw	r22, r16
     390:	11 0f       	add	r17, r17
     392:	88 0b       	sbc	r24, r24
     394:	99 0b       	sbc	r25, r25
     396:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <print_long>
		print("mV");
     39a:	8d e3       	ldi	r24, 0x3D	; 61
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <print>
		lcd_goto_xy(0,1);
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 86 0a 	call	0x150c	; 0x150c <lcd_goto_xy>
		print("Press B");
     3aa:	80 e4       	ldi	r24, 0x40	; 64
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 fd 09 	call	0x13fa	; 0x13fa <print>

		delay_ms(100);
     3b2:	84 e6       	ldi	r24, 0x64	; 100
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	df cf       	rjmp	.-66     	; 0x376 <initialize+0x6c>
	}

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	wait_for_button_release(BUTTON_B);
     3b8:	80 e1       	ldi	r24, 0x10	; 16
     3ba:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <wait_for_button_release>
	delay_ms(1000);
     3be:	88 ee       	ldi	r24, 0xE8	; 232
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
     3c6:	0c ee       	ldi	r16, 0xEC	; 236
     3c8:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3ca:	08 32       	cpi	r16, 0x28	; 40
     3cc:	11 05       	cpc	r17, r1
     3ce:	28 f0       	brcs	.+10     	; 0x3da <initialize+0xd0>
			set_motors(40,-40);
     3d0:	68 ed       	ldi	r22, 0xD8	; 216
     3d2:	7f ef       	ldi	r23, 0xFF	; 255
     3d4:	88 e2       	ldi	r24, 0x28	; 40
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <initialize+0xd8>
		else
			set_motors(-40,40);
     3da:	68 e2       	ldi	r22, 0x28	; 40
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	88 ed       	ldi	r24, 0xD8	; 216
     3e0:	9f ef       	ldi	r25, 0xFF	; 255
     3e2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 06 0c 	call	0x180c	; 0x180c <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     3ec:	84 e1       	ldi	r24, 0x14	; 20
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
     3f4:	0f 5f       	subi	r16, 0xFF	; 255
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     3f8:	0c 33       	cpi	r16, 0x3C	; 60
     3fa:	11 05       	cpc	r17, r1
     3fc:	31 f7       	brne	.-52     	; 0x3ca <initialize+0xc0>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B))
     40a:	80 e1       	ldi	r24, 0x10	; 16
     40c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <button_is_pressed>
     410:	81 11       	cpse	r24, r1
     412:	1a c0       	rjmp	.+52     	; 0x448 <initialize+0x13e>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_line>
     41e:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     420:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
		print_long(position);
     424:	b8 01       	movw	r22, r16
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <print_long>
		lcd_goto_xy(0,1);
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	0e 94 86 0a 	call	0x150c	; 0x150c <lcd_goto_xy>
		display_readings(sensors);
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	0e 94 9a 00 	call	0x134	; 0x134 <display_readings>

		delay_ms(100);
     43e:	84 e6       	ldi	r24, 0x64	; 100
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
     446:	e1 cf       	rjmp	.-62     	; 0x40a <initialize+0x100>
	}
	wait_for_button_release(BUTTON_B);
     448:	80 e1       	ldi	r24, 0x10	; 16
     44a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <wait_for_button_release>

	clear();
     44e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>

	print("Go!");		
     452:	88 e4       	ldi	r24, 0x48	; 72
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 fd 09 	call	0x13fa	; 0x13fa <print>

	// Play music and wait for it to finish before we start driving.
	play_from_program_space(go);
     45a:	86 e7       	ldi	r24, 0x76	; 118
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 bb 08 	call	0x1176	; 0x1176 <play_from_program_space>
	while(is_playing());
     462:	0e 94 9a 08 	call	0x1134	; 0x1134 <is_playing>
     466:	81 11       	cpse	r24, r1
     468:	fc cf       	rjmp	.-8      	; 0x462 <initialize+0x158>
}
     46a:	2a 96       	adiw	r28, 0x0a	; 10
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <main>:
// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
	// set up the 3pi
	initialize();
     480:	0e 94 85 01 	call	0x30a	; 0x30a <initialize>

	// Call our maze solving routine.
	maze_solve();
     484:	0e 94 b9 02 	call	0x572	; 0x572 <maze_solve>
	// never reach the end of its program, or unpredictable behavior
	// will result as random code starts getting executed.  If you
	// really want to stop all actions at some point, set your motors
	// to 0,0 and run the following command to loop forever:

	while(1);
     488:	ff cf       	rjmp	.-2      	; 0x488 <main+0x8>

0000048a <select_turn>:
// three directions, applying the "left hand on the wall" strategy.
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left) // L->1
     48a:	81 11       	cpse	r24, r1
     48c:	06 c0       	rjmp	.+12     	; 0x49a <select_turn+0x10>
      return 'L';
   else if(found_straight) // S->2
     48e:	61 11       	cpse	r22, r1
     490:	06 c0       	rjmp	.+12     	; 0x49e <select_turn+0x14>
      return 'S';
   else if(found_right) // R->3
     492:	41 11       	cpse	r20, r1
     494:	06 c0       	rjmp	.+12     	; 0x4a2 <select_turn+0x18>
      return 'R';
   else // back->0
      return 'B';
     496:	82 e4       	ldi	r24, 0x42	; 66
     498:	08 95       	ret
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left) // L->1
      return 'L';
     49a:	8c e4       	ldi	r24, 0x4C	; 76
     49c:	08 95       	ret
   else if(found_straight) // S->2
      return 'S';
     49e:	83 e5       	ldi	r24, 0x53	; 83
     4a0:	08 95       	ret
   else if(found_right) // R->3
      return 'R';
     4a2:	82 e5       	ldi	r24, 0x52	; 82
   else // back->0
      return 'B';
}
     4a4:	08 95       	ret

000004a6 <record_intersec>:
// code for intersection recording
int record_intersec(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left && found_right && found_straight) // LRS->4
     4a6:	88 23       	and	r24, r24
     4a8:	39 f0       	breq	.+14     	; 0x4b8 <record_intersec+0x12>
     4aa:	44 23       	and	r20, r20
     4ac:	61 f0       	breq	.+24     	; 0x4c6 <record_intersec+0x20>
     4ae:	61 11       	cpse	r22, r1
     4b0:	0f c0       	rjmp	.+30     	; 0x4d0 <record_intersec+0x2a>
      return '4';
   else if(found_left && found_right) // LR->3
      return '3';
     4b2:	83 e3       	ldi	r24, 0x33	; 51
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	08 95       	ret
   else if(found_right && found_straight) // RS->2
     4b8:	44 23       	and	r20, r20
     4ba:	69 f0       	breq	.+26     	; 0x4d6 <record_intersec+0x30>
     4bc:	66 23       	and	r22, r22
     4be:	59 f0       	breq	.+22     	; 0x4d6 <record_intersec+0x30>
      return '2';
     4c0:	82 e3       	ldi	r24, 0x32	; 50
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	08 95       	ret
   else if(found_left && found_straight) // LS->1
     4c6:	66 23       	and	r22, r22
     4c8:	31 f0       	breq	.+12     	; 0x4d6 <record_intersec+0x30>
      return '1';
     4ca:	81 e3       	ldi	r24, 0x31	; 49
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	08 95       	ret
int record_intersec(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left && found_right && found_straight) // LRS->4
      return '4';
     4d0:	84 e3       	ldi	r24, 0x34	; 52
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	08 95       	ret
   else if(found_right && found_straight) // RS->2
      return '2';
   else if(found_left && found_straight) // LS->1
      return '1';
   else // No intersection->0
      return '0';
     4d6:	80 e3       	ldi	r24, 0x30	; 48
     4d8:	90 e0       	ldi	r25, 0x00	; 0
}
     4da:	08 95       	ret

000004dc <simplify_path>:
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.

void simplify_path() {
   // only simplify the path if the second-to-last turn was a 'B'
   if(pathsol_length < 3 || pathsol[pathsol_length-2] != 'B') {
     4dc:	40 91 c7 01 	lds	r20, 0x01C7
     4e0:	43 30       	cpi	r20, 0x03	; 3
     4e2:	08 f4       	brcc	.+2      	; 0x4e6 <simplify_path+0xa>
     4e4:	45 c0       	rjmp	.+138    	; 0x570 <simplify_path+0x94>
     4e6:	24 2f       	mov	r18, r20
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	28 53       	subi	r18, 0x38	; 56
     4ec:	3e 4f       	sbci	r19, 0xFE	; 254
     4ee:	f9 01       	movw	r30, r18
     4f0:	32 97       	sbiw	r30, 0x02	; 2
     4f2:	80 81       	ld	r24, Z
     4f4:	82 34       	cpi	r24, 0x42	; 66
     4f6:	e1 f5       	brne	.+120    	; 0x570 <simplify_path+0x94>
     4f8:	f9 01       	movw	r30, r18
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
   }

   int total_angle = 0;
   int i;
   for(i=1;i<=3;i++) {
      switch(pathsol[pathsol_length-i]) {
     502:	52 91       	ld	r21, -Z
     504:	5c 34       	cpi	r21, 0x4C	; 76
     506:	51 f0       	breq	.+20     	; 0x51c <simplify_path+0x40>
     508:	52 35       	cpi	r21, 0x52	; 82
     50a:	29 f0       	breq	.+10     	; 0x516 <simplify_path+0x3a>
     50c:	52 34       	cpi	r21, 0x42	; 66
     50e:	41 f4       	brne	.+16     	; 0x520 <simplify_path+0x44>
            break;
         case 'L':
            total_angle += 270;
            break;
         case 'B':
            total_angle += 180;
     510:	8c 54       	subi	r24, 0x4C	; 76
     512:	9f 4f       	sbci	r25, 0xFF	; 255
            break;
     514:	05 c0       	rjmp	.+10     	; 0x520 <simplify_path+0x44>
   int total_angle = 0;
   int i;
   for(i=1;i<=3;i++) {
      switch(pathsol[pathsol_length-i]) {
         case 'R':
            total_angle += 90;
     516:	86 5a       	subi	r24, 0xA6	; 166
     518:	9f 4f       	sbci	r25, 0xFF	; 255
            break;
     51a:	02 c0       	rjmp	.+4      	; 0x520 <simplify_path+0x44>
         case 'L':
            total_angle += 270;
     51c:	82 5f       	subi	r24, 0xF2	; 242
     51e:	9e 4f       	sbci	r25, 0xFE	; 254
      return;
   }

   int total_angle = 0;
   int i;
   for(i=1;i<=3;i++) {
     520:	6f 5f       	subi	r22, 0xFF	; 255
     522:	7f 4f       	sbci	r23, 0xFF	; 255
     524:	64 30       	cpi	r22, 0x04	; 4
     526:	71 05       	cpc	r23, r1
     528:	61 f7       	brne	.-40     	; 0x502 <simplify_path+0x26>
            break;
      }
   }

   // Get the angle as a number between 0 and 360 degrees.
   total_angle = total_angle % 360;
     52a:	68 e6       	ldi	r22, 0x68	; 104
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodhi4>

   // Replace all of those turns with a single one.
   switch(total_angle) {
     532:	8a 35       	cpi	r24, 0x5A	; 90
     534:	91 05       	cpc	r25, r1
     536:	89 f0       	breq	.+34     	; 0x55a <simplify_path+0x7e>
     538:	34 f4       	brge	.+12     	; 0x546 <simplify_path+0x6a>
     53a:	89 2b       	or	r24, r25
     53c:	b1 f4       	brne	.+44     	; 0x56a <simplify_path+0x8e>
      case 0:
         pathsol[pathsol_length - 3] = 'S';
     53e:	f9 01       	movw	r30, r18
     540:	33 97       	sbiw	r30, 0x03	; 3
     542:	83 e5       	ldi	r24, 0x53	; 83
     544:	11 c0       	rjmp	.+34     	; 0x568 <simplify_path+0x8c>

   // Get the angle as a number between 0 and 360 degrees.
   total_angle = total_angle % 360;

   // Replace all of those turns with a single one.
   switch(total_angle) {
     546:	84 3b       	cpi	r24, 0xB4	; 180
     548:	91 05       	cpc	r25, r1
     54a:	59 f0       	breq	.+22     	; 0x562 <simplify_path+0x86>
     54c:	8e 30       	cpi	r24, 0x0E	; 14
     54e:	91 40       	sbci	r25, 0x01	; 1
     550:	61 f4       	brne	.+24     	; 0x56a <simplify_path+0x8e>
         break;
      case 180:
         pathsol[pathsol_length - 3] = 'B';
         break;
      case 270:
         pathsol[pathsol_length - 3] = 'L';
     552:	f9 01       	movw	r30, r18
     554:	33 97       	sbiw	r30, 0x03	; 3
     556:	8c e4       	ldi	r24, 0x4C	; 76
     558:	07 c0       	rjmp	.+14     	; 0x568 <simplify_path+0x8c>
   switch(total_angle) {
      case 0:
         pathsol[pathsol_length - 3] = 'S';
         break;
      case 90:
         pathsol[pathsol_length - 3] = 'R';
     55a:	f9 01       	movw	r30, r18
     55c:	33 97       	sbiw	r30, 0x03	; 3
     55e:	82 e5       	ldi	r24, 0x52	; 82
     560:	03 c0       	rjmp	.+6      	; 0x568 <simplify_path+0x8c>
         break;
      case 180:
         pathsol[pathsol_length - 3] = 'B';
     562:	f9 01       	movw	r30, r18
     564:	33 97       	sbiw	r30, 0x03	; 3
     566:	82 e4       	ldi	r24, 0x42	; 66
         break;
      case 270:
         pathsol[pathsol_length - 3] = 'L';
     568:	80 83       	st	Z, r24
         break;
   }

   // The path is now two steps shorter.
   pathsol_length -= 2;
     56a:	42 50       	subi	r20, 0x02	; 2
     56c:	40 93 c7 01 	sts	0x01C7, r20
     570:	08 95       	ret

00000572 <maze_solve>:
}

// This function is called once, from main.c.
void maze_solve() {
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
     57a:	2b 97       	sbiw	r28, 0x0b	; 11
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
   // Loop until we have record the maze.
   while(1) {
      // FIRST MAIN LOOP BODY  
      follow_segment();
     586:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

      // Drive straight a bit.  This helps us in case we entered the
      // intersection at an angle.
      // Note that we are slowing down - this prevents the robot
      // from tipping forward too much.
      set_motors(50,50);
     58a:	62 e3       	ldi	r22, 0x32	; 50
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	82 e3       	ldi	r24, 0x32	; 50
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
      delay_ms(50);
     596:	82 e3       	ldi	r24, 0x32	; 50
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
      unsigned char found_straight=0;
      unsigned char found_right=0;

      // Now read the sensors and check the intersection type.
      unsigned int sensors[5];
      read_line(sensors,IR_EMITTERS_ON);
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	ce 01       	movw	r24, r28
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_line>

      // Check for left and right exits.
      if(sensors[0] > 100){
     5a8:	01 e0       	ldi	r16, 0x01	; 1
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	85 36       	cpi	r24, 0x65	; 101
     5b0:	91 05       	cpc	r25, r1
     5b2:	08 f4       	brcc	.+2      	; 0x5b6 <maze_solve+0x44>
     5b4:	00 e0       	ldi	r16, 0x00	; 0
         found_left = 1;
      }
      if(sensors[4] > 100){
     5b6:	ff 24       	eor	r15, r15
     5b8:	f3 94       	inc	r15
     5ba:	89 85       	ldd	r24, Y+9	; 0x09
     5bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5be:	85 36       	cpi	r24, 0x65	; 101
     5c0:	91 05       	cpc	r25, r1
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <maze_solve+0x54>
     5c4:	f1 2c       	mov	r15, r1
         found_right = 1;
      }

      // Drive straight a bit more - this is enough to line up our
      // wheels with the intersection.
      set_motors(40,40);
     5c6:	68 e2       	ldi	r22, 0x28	; 40
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	88 e2       	ldi	r24, 0x28	; 40
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
      delay_ms(200);
     5d2:	88 ec       	ldi	r24, 0xC8	; 200
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>

      // Check for a straight exit.
      read_line(sensors,IR_EMITTERS_ON);
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	ce 01       	movw	r24, r28
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_line>
      if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200) {
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	89 3c       	cpi	r24, 0xC9	; 201
     5ea:	91 05       	cpc	r25, r1
     5ec:	60 f4       	brcc	.+24     	; 0x606 <maze_solve+0x94>
     5ee:	8d 81       	ldd	r24, Y+5	; 0x05
     5f0:	9e 81       	ldd	r25, Y+6	; 0x06
     5f2:	89 3c       	cpi	r24, 0xC9	; 201
     5f4:	91 05       	cpc	r25, r1
     5f6:	a0 f4       	brcc	.+40     	; 0x620 <maze_solve+0xae>
     5f8:	8f 81       	ldd	r24, Y+7	; 0x07
     5fa:	98 85       	ldd	r25, Y+8	; 0x08
     5fc:	89 3c       	cpi	r24, 0xC9	; 201
     5fe:	91 05       	cpc	r25, r1
     600:	78 f4       	brcc	.+30     	; 0x620 <maze_solve+0xae>

      // These variables record whether the robot has seen a line to the
      // left, straight ahead, and right, while examining the current
      // intersection.
      unsigned char found_left=0;
      unsigned char found_straight=0;
     602:	10 e0       	ldi	r17, 0x00	; 0
     604:	0e c0       	rjmp	.+28     	; 0x622 <maze_solve+0xb0>
      }

      // Check for the ending spot.
      // If all three middle sensors are on dark black, we have
      // solved the maze.
      if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600) {
     606:	89 35       	cpi	r24, 0x59	; 89
     608:	92 40       	sbci	r25, 0x02	; 2
     60a:	50 f0       	brcs	.+20     	; 0x620 <maze_solve+0xae>
     60c:	8d 81       	ldd	r24, Y+5	; 0x05
     60e:	9e 81       	ldd	r25, Y+6	; 0x06
     610:	89 35       	cpi	r24, 0x59	; 89
     612:	92 40       	sbci	r25, 0x02	; 2
     614:	28 f0       	brcs	.+10     	; 0x620 <maze_solve+0xae>
     616:	8f 81       	ldd	r24, Y+7	; 0x07
     618:	98 85       	ldd	r25, Y+8	; 0x08
     61a:	89 35       	cpi	r24, 0x59	; 89
     61c:	92 40       	sbci	r25, 0x02	; 2
     61e:	18 f5       	brcc	.+70     	; 0x666 <maze_solve+0xf4>
     620:	11 e0       	ldi	r17, 0x01	; 1
      }

      // Intersection identification is complete.
      // If the maze has been solved, we can follow the existing
      // path.  Otherwise, we need to learn the solution.
      unsigned char dir = select_turn(found_left, found_straight, found_right);
     622:	4f 2d       	mov	r20, r15
     624:	61 2f       	mov	r22, r17
     626:	80 2f       	mov	r24, r16
     628:	0e 94 45 02 	call	0x48a	; 0x48a <select_turn>
     62c:	e8 2e       	mov	r14, r24
        
      int recint = record_intersec(found_left, found_straight, found_right);
     62e:	4f 2d       	mov	r20, r15
     630:	61 2f       	mov	r22, r17
     632:	80 2f       	mov	r24, r16
     634:	0e 94 53 02 	call	0x4a6	; 0x4a6 <record_intersec>
     638:	8c 01       	movw	r16, r24
      // Make the turn indicated by the path.
      turn(dir);
     63a:	8e 2d       	mov	r24, r14
     63c:	0e 94 90 04 	call	0x920	; 0x920 <turn>

      // Store the intersection in the path variable.
      path[path_length] = dir;
     640:	90 91 37 02 	lds	r25, 0x0237
     644:	29 2f       	mov	r18, r25
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	f9 01       	movw	r30, r18
     64a:	e8 5c       	subi	r30, 0xC8	; 200
     64c:	fd 4f       	sbci	r31, 0xFD	; 253
     64e:	e0 82       	st	Z, r14
      intersection[path_length] = recint;
     650:	22 0f       	add	r18, r18
     652:	33 1f       	adc	r19, r19
     654:	f9 01       	movw	r30, r18
     656:	ec 54       	subi	r30, 0x4C	; 76
     658:	fd 4f       	sbci	r31, 0xFD	; 253
     65a:	11 83       	std	Z+1, r17	; 0x01
     65c:	00 83       	st	Z, r16
      path_length ++;
     65e:	9f 5f       	subi	r25, 0xFF	; 255
     660:	90 93 37 02 	sts	0x0237, r25

      // You should check to make sure that the path_length does not
      // exceed the bounds of the array.  We'll ignore that in this
      // example.  
   }
     664:	90 cf       	rjmp	.-224    	; 0x586 <maze_solve+0x14>
      // then we check how many values of m we have, if we have more than one value we add another step and so on until we have one m value. 
      int i2;
      int c2;

      for (i=0;i<100;i++) {
         if (i<(100-paths_length)) {
     666:	04 e6       	ldi	r16, 0x64	; 100
     668:	10 e0       	ldi	r17, 0x00	; 0

   // Maze Recorded!
   while(1) {
      
      // Beep to show that we finished the maze.
      paths_length=0;
     66a:	10 92 2c 02 	sts	0x022C, r1
      set_motors(0,0);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
      play(">>a32");
     67a:	8c e4       	ldi	r24, 0x4C	; 76
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 aa 08 	call	0x1154	; 0x1154 <play>

      // Wait for the user to press a button.
      while(!button_is_pressed(BUTTON_B)) {
     682:	80 e1       	ldi	r24, 0x10	; 16
     684:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <button_is_pressed>
     688:	81 11       	cpse	r24, r1
     68a:	13 c0       	rjmp	.+38     	; 0x6b2 <maze_solve+0x140>
         clear();
     68c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
         print("Recorded!");
     690:	82 e5       	ldi	r24, 0x52	; 82
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 fd 09 	call	0x13fa	; 0x13fa <print>
         lcd_goto_xy(0,1);
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 86 0a 	call	0x150c	; 0x150c <lcd_goto_xy>
         print("Press B");
     6a0:	80 e4       	ldi	r24, 0x40	; 64
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <print>
         delay_ms(30);
     6a8:	8e e1       	ldi	r24, 0x1E	; 30
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
     6b0:	e8 cf       	rjmp	.-48     	; 0x682 <maze_solve+0x110>
      }
      
      while(button_is_pressed(BUTTON_B)) {
     6b2:	80 e1       	ldi	r24, 0x10	; 16
     6b4:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <button_is_pressed>
     6b8:	88 23       	and	r24, r24
     6ba:	99 f0       	breq	.+38     	; 0x6e2 <maze_solve+0x170>
         clear();
     6bc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <clear>
         print("Here we");
     6c0:	8c e5       	ldi	r24, 0x5C	; 92
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <print>
         lcd_goto_xy(0,1);
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 86 0a 	call	0x150c	; 0x150c <lcd_goto_xy>
         print("Go!");
     6d0:	88 e4       	ldi	r24, 0x48	; 72
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <print>
         delay_ms(1000);
     6d8:	88 ee       	ldi	r24, 0xE8	; 232
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
     6e0:	e8 cf       	rjmp	.-48     	; 0x6b2 <maze_solve+0x140>
     6e2:	e1 2c       	mov	r14, r1
     6e4:	f1 2c       	mov	r15, r1
      }
         
      int i=0;   
      while (i<4) {
         follow_segment();
     6e6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>
         // Drive straight a bit.  This helps us in case we entered the
         // intersection at an angle.
         // Note that we are slowing down - this prevents the robot
         // from tipping forward too much.
         set_motors(50,50);
     6ea:	62 e3       	ldi	r22, 0x32	; 50
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	82 e3       	ldi	r24, 0x32	; 50
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
         delay_ms(50);
     6f6:	82 e3       	ldi	r24, 0x32	; 50
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
         unsigned char found_straight=0;
         unsigned char found_right=0;

         // Now read the sensors and check the intersection type.
         unsigned int sensors[5];
         read_line(sensors,IR_EMITTERS_ON);
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	ce 01       	movw	r24, r28
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_line>

         // Check for left and right exits.
         if(sensors[0] > 100) {
     708:	dd 24       	eor	r13, r13
     70a:	d3 94       	inc	r13
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	85 36       	cpi	r24, 0x65	; 101
     712:	91 05       	cpc	r25, r1
     714:	08 f4       	brcc	.+2      	; 0x718 <maze_solve+0x1a6>
     716:	d1 2c       	mov	r13, r1
            found_left = 1;
         }
         if(sensors[4] > 100) {
     718:	cc 24       	eor	r12, r12
     71a:	c3 94       	inc	r12
     71c:	89 85       	ldd	r24, Y+9	; 0x09
     71e:	9a 85       	ldd	r25, Y+10	; 0x0a
     720:	85 36       	cpi	r24, 0x65	; 101
     722:	91 05       	cpc	r25, r1
     724:	08 f4       	brcc	.+2      	; 0x728 <maze_solve+0x1b6>
     726:	c1 2c       	mov	r12, r1
            found_right = 1;
         }

         // Drive straight a bit more - this is enough to line up our
         // wheels with the intersection.
         set_motors(40,40);
     728:	68 e2       	ldi	r22, 0x28	; 40
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	88 e2       	ldi	r24, 0x28	; 40
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
         delay_ms(200);
     734:	88 ec       	ldi	r24, 0xC8	; 200
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>

         // Check for a straight exit.
         read_line(sensors,IR_EMITTERS_ON);
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_line>
         if(sensors[1] > 200 || sensors[2] > 200 || sensors[3] > 200) {
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	89 3c       	cpi	r24, 0xC9	; 201
     74c:	91 05       	cpc	r25, r1
     74e:	68 f4       	brcc	.+26     	; 0x76a <maze_solve+0x1f8>
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	9e 81       	ldd	r25, Y+6	; 0x06
     754:	89 3c       	cpi	r24, 0xC9	; 201
     756:	91 05       	cpc	r25, r1
     758:	40 f4       	brcc	.+16     	; 0x76a <maze_solve+0x1f8>
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	2f 81       	ldd	r18, Y+7	; 0x07
     75e:	38 85       	ldd	r19, Y+8	; 0x08
     760:	29 3c       	cpi	r18, 0xC9	; 201
     762:	31 05       	cpc	r19, r1
     764:	18 f4       	brcc	.+6      	; 0x76c <maze_solve+0x1fa>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	01 c0       	rjmp	.+2      	; 0x76c <maze_solve+0x1fa>
            found_straight = 1;
     76a:	91 e0       	ldi	r25, 0x01	; 1
         }

         unsigned char dir = select_turn(found_left, found_straight, found_right);
     76c:	4c 2d       	mov	r20, r12
     76e:	69 2f       	mov	r22, r25
     770:	8d 2d       	mov	r24, r13
     772:	9b 87       	std	Y+11, r25	; 0x0b
     774:	0e 94 45 02 	call	0x48a	; 0x48a <select_turn>
     778:	b8 2e       	mov	r11, r24
        
         int recint = record_intersec(found_left, found_straight, found_right);
     77a:	4c 2d       	mov	r20, r12
     77c:	9b 85       	ldd	r25, Y+11	; 0x0b
     77e:	69 2f       	mov	r22, r25
     780:	8d 2d       	mov	r24, r13
     782:	0e 94 53 02 	call	0x4a6	; 0x4a6 <record_intersec>
     786:	6c 01       	movw	r12, r24
         // Make the turn indicated by the path.
         turn(dir);
     788:	8b 2d       	mov	r24, r11
     78a:	0e 94 90 04 	call	0x920	; 0x920 <turn>

         // Store the intersection in the path variable.
         paths[paths_length] = dir;
     78e:	90 91 2c 02 	lds	r25, 0x022C
     792:	29 2f       	mov	r18, r25
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	e3 5d       	subi	r30, 0xD3	; 211
     79a:	fd 4f       	sbci	r31, 0xFD	; 253
     79c:	b0 82       	st	Z, r11
         intersections[paths_length] = recint;
     79e:	22 0f       	add	r18, r18
     7a0:	33 1f       	adc	r19, r19
     7a2:	f9 01       	movw	r30, r18
     7a4:	e0 56       	subi	r30, 0x60	; 96
     7a6:	fd 4f       	sbci	r31, 0xFD	; 253
     7a8:	d1 82       	std	Z+1, r13	; 0x01
     7aa:	c0 82       	st	Z, r12
     7ac:	9f 5f       	subi	r25, 0xFF	; 255
         if (paths[paths_length] != 'B') {
     7ae:	22 e4       	ldi	r18, 0x42	; 66
     7b0:	b2 16       	cp	r11, r18
     7b2:	19 f0       	breq	.+6      	; 0x7ba <maze_solve+0x248>
            i++;
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	e8 1a       	sub	r14, r24
     7b8:	f8 0a       	sbc	r15, r24
            paths_length ++;
         } else {
            paths_length ++;
     7ba:	90 93 2c 02 	sts	0x022C, r25
         print("Go!");
         delay_ms(1000);
      }
         
      int i=0;   
      while (i<4) {
     7be:	e4 e0       	ldi	r30, 0x04	; 4
     7c0:	ee 16       	cp	r14, r30
     7c2:	f1 04       	cpc	r15, r1
     7c4:	0c f4       	brge	.+2      	; 0x7c8 <maze_solve+0x256>
     7c6:	8f cf       	rjmp	.-226    	; 0x6e6 <maze_solve+0x174>
      // then we check how many values of m we have, if we have more than one value we add another step and so on until we have one m value. 
      int i2;
      int c2;

      for (i=0;i<100;i++) {
         if (i<(100-paths_length)) {
     7c8:	20 91 2c 02 	lds	r18, 0x022C
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	68 01       	movw	r12, r16
     7d0:	c2 1a       	sub	r12, r18
     7d2:	d3 0a       	sbc	r13, r19
     7d4:	a0 90 14 01 	lds	r10, 0x0114
     7d8:	b0 90 15 01 	lds	r11, 0x0115
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	4c 15       	cp	r20, r12
     7e2:	5d 05       	cpc	r21, r13
     7e4:	6c f5       	brge	.+90     	; 0x840 <maze_solve+0x2ce>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	7a 01       	movw	r14, r20
     7ec:	e2 0e       	add	r14, r18
     7ee:	f3 1e       	adc	r15, r19
     7f0:	24 c0       	rjmp	.+72     	; 0x83a <maze_solve+0x2c8>
            i2=0;
            while (i2<paths_length) {
               c2=0;
               if (paths[i2]==path[i+i2] && intersections[i2]==intersection[i+i2]) {
     7f2:	ba 01       	movw	r22, r20
     7f4:	68 0f       	add	r22, r24
     7f6:	79 1f       	adc	r23, r25
     7f8:	db 01       	movw	r26, r22
     7fa:	a8 5c       	subi	r26, 0xC8	; 200
     7fc:	bd 4f       	sbci	r27, 0xFD	; 253
     7fe:	fc 01       	movw	r30, r24
     800:	e3 5d       	subi	r30, 0xD3	; 211
     802:	fd 4f       	sbci	r31, 0xFD	; 253
     804:	f0 81       	ld	r31, Z
     806:	ec 91       	ld	r30, X
     808:	fe 13       	cpse	r31, r30
     80a:	26 c0       	rjmp	.+76     	; 0x858 <maze_solve+0x2e6>
     80c:	dc 01       	movw	r26, r24
     80e:	aa 0f       	add	r26, r26
     810:	bb 1f       	adc	r27, r27
     812:	a0 56       	subi	r26, 0x60	; 96
     814:	bd 4f       	sbci	r27, 0xFD	; 253
     816:	66 0f       	add	r22, r22
     818:	77 1f       	adc	r23, r23
     81a:	fb 01       	movw	r30, r22
     81c:	ec 54       	subi	r30, 0x4C	; 76
     81e:	fd 4f       	sbci	r31, 0xFD	; 253
     820:	6d 91       	ld	r22, X+
     822:	7c 91       	ld	r23, X
     824:	01 90       	ld	r0, Z+
     826:	f0 81       	ld	r31, Z
     828:	e0 2d       	mov	r30, r0
     82a:	6e 17       	cp	r22, r30
     82c:	7f 07       	cpc	r23, r31
     82e:	a1 f4       	brne	.+40     	; 0x858 <maze_solve+0x2e6>
                  c2=1;
                  i2++;
     830:	01 96       	adiw	r24, 0x01	; 1
               }
               if (c2!=1) {
                  i2=100;
               }
               if (i2 == paths_length ) {
     832:	82 17       	cp	r24, r18
     834:	93 07       	cpc	r25, r19
     836:	09 f4       	brne	.+2      	; 0x83a <maze_solve+0x2c8>
     838:	57 01       	movw	r10, r14
      int c2;

      for (i=0;i<100;i++) {
         if (i<(100-paths_length)) {
            i2=0;
            while (i2<paths_length) {
     83a:	82 17       	cp	r24, r18
     83c:	93 07       	cpc	r25, r19
     83e:	cc f2       	brlt	.-78     	; 0x7f2 <maze_solve+0x280>
      // Its Possible to modify this code, so we start by running the robot two steps, 
      // then we check how many values of m we have, if we have more than one value we add another step and so on until we have one m value. 
      int i2;
      int c2;

      for (i=0;i<100;i++) {
     840:	4f 5f       	subi	r20, 0xFF	; 255
     842:	5f 4f       	sbci	r21, 0xFF	; 255
     844:	44 36       	cpi	r20, 0x64	; 100
     846:	51 05       	cpc	r21, r1
     848:	59 f6       	brne	.-106    	; 0x7e0 <maze_solve+0x26e>
     84a:	a0 92 14 01 	sts	0x0114, r10
     84e:	b0 92 15 01 	sts	0x0115, r11
     852:	e1 2c       	mov	r14, r1
     854:	f1 2c       	mov	r15, r1
     856:	03 c0       	rjmp	.+6      	; 0x85e <maze_solve+0x2ec>
               if (paths[i2]==path[i+i2] && intersections[i2]==intersection[i+i2]) {
                  c2=1;
                  i2++;
               }
               if (c2!=1) {
                  i2=100;
     858:	84 e6       	ldi	r24, 0x64	; 100
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	ea cf       	rjmp	.-44     	; 0x832 <maze_solve+0x2c0>
            }
         }
      }

      // We found the Robot location, now find the shortest way to the end.
      for(i=0;i<(100-m);i++) {
     85e:	80 91 14 01 	lds	r24, 0x0114
     862:	90 91 15 01 	lds	r25, 0x0115
     866:	98 01       	movw	r18, r16
     868:	28 1b       	sub	r18, r24
     86a:	39 0b       	sbc	r19, r25
     86c:	e2 16       	cp	r14, r18
     86e:	f3 06       	cpc	r15, r19
     870:	bc f4       	brge	.+46     	; 0x8a0 <maze_solve+0x32e>
         pathsol[pathsol_length]=path[i+m];
     872:	20 91 c7 01 	lds	r18, 0x01C7
     876:	e2 2f       	mov	r30, r18
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	e8 53       	subi	r30, 0x38	; 56
     87c:	fe 4f       	sbci	r31, 0xFE	; 254
     87e:	a7 01       	movw	r20, r14
     880:	48 5c       	subi	r20, 0xC8	; 200
     882:	5d 4f       	sbci	r21, 0xFD	; 253
     884:	da 01       	movw	r26, r20
     886:	a8 0f       	add	r26, r24
     888:	b9 1f       	adc	r27, r25
     88a:	8c 91       	ld	r24, X
     88c:	80 83       	st	Z, r24
         pathsol_length ++;
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	20 93 c7 01 	sts	0x01C7, r18
         simplify_path();
     894:	0e 94 6e 02 	call	0x4dc	; 0x4dc <simplify_path>
            }
         }
      }

      // We found the Robot location, now find the shortest way to the end.
      for(i=0;i<(100-m);i++) {
     898:	ff ef       	ldi	r31, 0xFF	; 255
     89a:	ef 1a       	sub	r14, r31
     89c:	ff 0a       	sbc	r15, r31
     89e:	df cf       	rjmp	.-66     	; 0x85e <maze_solve+0x2ec>
     8a0:	88 ec       	ldi	r24, 0xC8	; 200
     8a2:	e8 2e       	mov	r14, r24
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	f8 2e       	mov	r15, r24
         simplify_path();
      }

      // Go to the end.
      i=0;
      while(i<pathsol_length) {
     8a8:	80 91 c7 01 	lds	r24, 0x01C7
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	97 01       	movw	r18, r14
     8b0:	28 5c       	subi	r18, 0xC8	; 200
     8b2:	31 40       	sbci	r19, 0x01	; 1
     8b4:	28 17       	cp	r18, r24
     8b6:	39 07       	cpc	r19, r25
     8b8:	0c f0       	brlt	.+2      	; 0x8bc <maze_solve+0x34a>
     8ba:	d7 ce       	rjmp	.-594    	; 0x66a <maze_solve+0xf8>
         // Re-run the maze.  It's not necessary to identify the
         // intersections, so this loop is really simple.
            follow_segment();
     8bc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <follow_segment>

            // Drive straight while slowing down, as before.
            set_motors(50,50);
     8c0:	62 e3       	ldi	r22, 0x32	; 50
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	82 e3       	ldi	r24, 0x32	; 50
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
            delay_ms(50);
     8cc:	82 e3       	ldi	r24, 0x32	; 50
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
            set_motors(40,40);
     8d4:	68 e2       	ldi	r22, 0x28	; 40
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	88 e2       	ldi	r24, 0x28	; 40
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
            delay_ms(200);
     8e0:	88 ec       	ldi	r24, 0xC8	; 200
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>

            // Make a turn according to the instruction stored in
            // pathsol[i].
            turn(pathsol[i]);
     8e8:	f7 01       	movw	r30, r14
     8ea:	81 91       	ld	r24, Z+
     8ec:	7f 01       	movw	r14, r30
     8ee:	0e 94 90 04 	call	0x920	; 0x920 <turn>
            i+=1;
            unsigned int sensors[5];
            read_line(sensors,IR_EMITTERS_ON);
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <read_line>
            // The end is reached.
            if(sensors[1] > 600 && sensors[2] > 600 && sensors[3] > 600) {
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	9c 81       	ldd	r25, Y+4	; 0x04
     900:	89 35       	cpi	r24, 0x59	; 89
     902:	92 40       	sbci	r25, 0x02	; 2
     904:	88 f2       	brcs	.-94     	; 0x8a8 <maze_solve+0x336>
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	9e 81       	ldd	r25, Y+6	; 0x06
     90a:	89 35       	cpi	r24, 0x59	; 89
     90c:	92 40       	sbci	r25, 0x02	; 2
     90e:	60 f2       	brcs	.-104    	; 0x8a8 <maze_solve+0x336>
     910:	8f 81       	ldd	r24, Y+7	; 0x07
     912:	98 85       	ldd	r25, Y+8	; 0x08
     914:	89 35       	cpi	r24, 0x59	; 89
     916:	92 40       	sbci	r25, 0x02	; 2
     918:	38 f2       	brcs	.-114    	; 0x8a8 <maze_solve+0x336>
               pathsol_length=0;
     91a:	10 92 c7 01 	sts	0x01C7, r1
     91e:	c4 cf       	rjmp	.-120    	; 0x8a8 <maze_solve+0x336>

00000920 <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     920:	8c 34       	cpi	r24, 0x4C	; 76
     922:	69 f0       	breq	.+26     	; 0x93e <turn+0x1e>
     924:	82 35       	cpi	r24, 0x52	; 82
     926:	81 f0       	breq	.+32     	; 0x948 <turn+0x28>
     928:	82 34       	cpi	r24, 0x42	; 66
     92a:	c1 f4       	brne	.+48     	; 0x95c <turn+0x3c>
		set_motors(80,-80);
		delay_ms(200);
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
     92c:	60 eb       	ldi	r22, 0xB0	; 176
     92e:	7f ef       	ldi	r23, 0xFF	; 255
     930:	80 e5       	ldi	r24, 0x50	; 80
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
		delay_ms(400);
     938:	80 e9       	ldi	r24, 0x90	; 144
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0d c0       	rjmp	.+26     	; 0x958 <turn+0x38>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-80,80);
     93e:	60 e5       	ldi	r22, 0x50	; 80
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 eb       	ldi	r24, 0xB0	; 176
     944:	9f ef       	ldi	r25, 0xFF	; 255
     946:	04 c0       	rjmp	.+8      	; 0x950 <turn+0x30>
		delay_ms(200);
		break;
	case 'R':
		// Turn right.
		set_motors(80,-80);
     948:	60 eb       	ldi	r22, 0xB0	; 176
     94a:	7f ef       	ldi	r23, 0xFF	; 255
     94c:	80 e5       	ldi	r24, 0x50	; 80
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 3c 0b 	call	0x1678	; 0x1678 <set_motors>
		delay_ms(200);
     954:	88 ec       	ldi	r24, 0xC8	; 200
     956:	90 e0       	ldi	r25, 0x00	; 0
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
		delay_ms(400);
     958:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <delay_ms>
     95c:	08 95       	ret

0000095e <_ZN15OrangutanAnalog7setModeEh.part.0>:
     95e:	ec e7       	ldi	r30, 0x7C	; 124
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	8f 7d       	andi	r24, 0xDF	; 223
     966:	80 83       	st	Z, r24
     968:	08 95       	ret

0000096a <_ZN15OrangutanAnalog7setModeEh>:
     96a:	81 11       	cpse	r24, r1
     96c:	03 c0       	rjmp	.+6      	; 0x974 <_ZN15OrangutanAnalog7setModeEh+0xa>
     96e:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN15OrangutanAnalog7setModeEh.part.0>
     972:	08 95       	ret
     974:	80 91 7c 00 	lds	r24, 0x007C
     978:	80 62       	ori	r24, 0x20	; 32
     97a:	80 93 7c 00 	sts	0x007C, r24
     97e:	08 95       	ret

00000980 <_ZN15OrangutanAnalog7getModeEv>:
     980:	80 91 7c 00 	lds	r24, 0x007C
     984:	85 fb       	bst	r24, 5
     986:	88 27       	eor	r24, r24
     988:	80 f9       	bld	r24, 0
     98a:	08 95       	ret

0000098c <_ZN15OrangutanAnalog16conversionResultEv>:
     98c:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN15OrangutanAnalog7getModeEv>
     990:	88 23       	and	r24, r24
     992:	21 f0       	breq	.+8      	; 0x99c <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     994:	80 91 79 00 	lds	r24, 0x0079
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 95       	ret
     99c:	80 91 78 00 	lds	r24, 0x0078
     9a0:	90 91 79 00 	lds	r25, 0x0079
     9a4:	08 95       	ret

000009a6 <_ZN15OrangutanAnalog15startConversionEhh>:
     9a6:	80 32       	cpi	r24, 0x20	; 32
     9a8:	a0 f4       	brcc	.+40     	; 0x9d2 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     9aa:	97 e8       	ldi	r25, 0x87	; 135
     9ac:	90 93 7a 00 	sts	0x007A, r25
     9b0:	90 91 7c 00 	lds	r25, 0x007C
     9b4:	66 23       	and	r22, r22
     9b6:	11 f0       	breq	.+4      	; 0x9bc <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     9b8:	90 6c       	ori	r25, 0xC0	; 192
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     9bc:	9f 77       	andi	r25, 0x7F	; 127
     9be:	90 64       	ori	r25, 0x40	; 64
     9c0:	90 7e       	andi	r25, 0xE0	; 224
     9c2:	98 2b       	or	r25, r24
     9c4:	90 93 7c 00 	sts	0x007C, r25
     9c8:	80 91 7a 00 	lds	r24, 0x007A
     9cc:	80 64       	ori	r24, 0x40	; 64
     9ce:	80 93 7a 00 	sts	0x007A, r24
     9d2:	08 95       	ret

000009d4 <_ZN15OrangutanAnalog11readAverageEhj>:
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e0 ef       	ldi	r30, 0xF0	; 240
     9da:	f4 e0       	ldi	r31, 0x04	; 4
     9dc:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x14>
     9e0:	eb 01       	movw	r28, r22
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZN15OrangutanAnalog15startConversionEhh>
     9e8:	80 91 7a 00 	lds	r24, 0x007A
     9ec:	86 fd       	sbrc	r24, 6
     9ee:	fc cf       	rjmp	.-8      	; 0x9e8 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     9f0:	8e 01       	movw	r16, r28
     9f2:	c1 2c       	mov	r12, r1
     9f4:	d1 2c       	mov	r13, r1
     9f6:	76 01       	movw	r14, r12
     9f8:	80 91 7a 00 	lds	r24, 0x007A
     9fc:	80 64       	ori	r24, 0x40	; 64
     9fe:	80 93 7a 00 	sts	0x007A, r24
     a02:	80 91 7a 00 	lds	r24, 0x007A
     a06:	86 fd       	sbrc	r24, 6
     a08:	fc cf       	rjmp	.-8      	; 0xa02 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     a0a:	0e 94 c6 04 	call	0x98c	; 0x98c <_ZN15OrangutanAnalog16conversionResultEv>
     a0e:	c8 0e       	add	r12, r24
     a10:	d9 1e       	adc	r13, r25
     a12:	e1 1c       	adc	r14, r1
     a14:	f1 1c       	adc	r15, r1
     a16:	01 50       	subi	r16, 0x01	; 1
     a18:	11 09       	sbc	r17, r1
     a1a:	01 15       	cp	r16, r1
     a1c:	11 05       	cpc	r17, r1
     a1e:	61 f7       	brne	.-40     	; 0x9f8 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     a20:	ce 01       	movw	r24, r28
     a22:	96 95       	lsr	r25
     a24:	87 95       	ror	r24
     a26:	c0 34       	cpi	r28, 0x40	; 64
     a28:	d1 05       	cpc	r29, r1
     a2a:	38 f4       	brcc	.+14     	; 0xa3a <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     a2c:	8c 0d       	add	r24, r12
     a2e:	9d 1d       	adc	r25, r13
     a30:	be 01       	movw	r22, r28
     a32:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
     a36:	cb 01       	movw	r24, r22
     a38:	0e c0       	rjmp	.+28     	; 0xa56 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     a3a:	a7 01       	movw	r20, r14
     a3c:	96 01       	movw	r18, r12
     a3e:	28 0f       	add	r18, r24
     a40:	39 1f       	adc	r19, r25
     a42:	41 1d       	adc	r20, r1
     a44:	51 1d       	adc	r21, r1
     a46:	ca 01       	movw	r24, r20
     a48:	b9 01       	movw	r22, r18
     a4a:	9e 01       	movw	r18, r28
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodsi4>
     a54:	c9 01       	movw	r24, r18
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	e8 e0       	ldi	r30, 0x08	; 8
     a5c:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x14>

00000a60 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	a0 91 00 01 	lds	r26, 0x0100
     a6c:	b0 91 01 01 	lds	r27, 0x0101
     a70:	9c 01       	movw	r18, r24
     a72:	0e 94 c7 11 	call	0x238e	; 0x238e <__umulhisi3>
     a76:	6b 01       	movw	r12, r22
     a78:	7c 01       	movw	r14, r24
     a7a:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN15OrangutanAnalog7getModeEv>
     a7e:	88 23       	and	r24, r24
     a80:	59 f0       	breq	.+22     	; 0xa98 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     a82:	c7 01       	movw	r24, r14
     a84:	b6 01       	movw	r22, r12
     a86:	61 58       	subi	r22, 0x81	; 129
     a88:	7f 4f       	sbci	r23, 0xFF	; 255
     a8a:	8f 4f       	sbci	r24, 0xFF	; 255
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	2f ef       	ldi	r18, 0xFF	; 255
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	0a c0       	rjmp	.+20     	; 0xaac <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     a98:	c7 01       	movw	r24, r14
     a9a:	b6 01       	movw	r22, r12
     a9c:	61 50       	subi	r22, 0x01	; 1
     a9e:	7e 4f       	sbci	r23, 0xFE	; 254
     aa0:	8f 4f       	sbci	r24, 0xFF	; 255
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
     aa4:	2f ef       	ldi	r18, 0xFF	; 255
     aa6:	33 e0       	ldi	r19, 0x03	; 3
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodsi4>
     ab0:	c9 01       	movw	r24, r18
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	08 95       	ret

00000abc <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     abc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <_ZN15OrangutanAnalog11readAverageEhj>
     ac0:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN15OrangutanAnalog12toMillivoltsEj>
     ac4:	08 95       	ret

00000ac6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	0e 94 c0 04 	call	0x980	; 0x980 <_ZN15OrangutanAnalog7getModeEv>
     ad0:	18 2f       	mov	r17, r24
     ad2:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN15OrangutanAnalog7setModeEh.part.0>
     ad6:	6a e0       	ldi	r22, 0x0A	; 10
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     ae0:	ec 01       	movw	r28, r24
     ae2:	81 2f       	mov	r24, r17
     ae4:	0e 94 b5 04 	call	0x96a	; 0x96a <_ZN15OrangutanAnalog7setModeEh>
     ae8:	ce 01       	movw	r24, r28
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	8c 0f       	add	r24, r28
     af0:	9d 1f       	adc	r25, r29
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	96 95       	lsr	r25
     af6:	87 95       	ror	r24
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	08 95       	ret

00000b00 <read_battery_millivolts_3pi>:
     b00:	0e 94 63 05 	call	0xac6	; 0xac6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     b04:	08 95       	ret

00000b06 <_ZL16currentCharacterv>:
     b06:	90 91 69 01 	lds	r25, 0x0169
     b0a:	e0 91 64 01 	lds	r30, 0x0164
     b0e:	f0 91 65 01 	lds	r31, 0x0165
     b12:	99 23       	and	r25, r25
     b14:	11 f0       	breq	.+4      	; 0xb1a <_ZL16currentCharacterv+0x14>
     b16:	84 91       	lpm	r24, Z
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <_ZL16currentCharacterv+0x16>
     b1a:	80 81       	ld	r24, Z
     b1c:	2f eb       	ldi	r18, 0xBF	; 191
     b1e:	28 0f       	add	r18, r24
     b20:	2a 31       	cpi	r18, 0x1A	; 26
     b22:	10 f4       	brcc	.+4      	; 0xb28 <_ZL16currentCharacterv+0x22>
     b24:	80 5e       	subi	r24, 0xE0	; 224
     b26:	08 95       	ret
     b28:	80 32       	cpi	r24, 0x20	; 32
     b2a:	49 f4       	brne	.+18     	; 0xb3e <_ZL16currentCharacterv+0x38>
     b2c:	9f 01       	movw	r18, r30
     b2e:	2f 5f       	subi	r18, 0xFF	; 255
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	30 93 65 01 	sts	0x0165, r19
     b36:	20 93 64 01 	sts	0x0164, r18
     b3a:	ef 2b       	or	r30, r31
     b3c:	31 f7       	brne	.-52     	; 0xb0a <_ZL16currentCharacterv+0x4>
     b3e:	08 95       	ret

00000b40 <_ZL9getNumberv>:
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZL16currentCharacterv>
     b4a:	c0 e0       	ldi	r28, 0x00	; 0
     b4c:	d0 e0       	ldi	r29, 0x00	; 0
     b4e:	1a e0       	ldi	r17, 0x0A	; 10
     b50:	90 ed       	ldi	r25, 0xD0	; 208
     b52:	98 0f       	add	r25, r24
     b54:	9a 30       	cpi	r25, 0x0A	; 10
     b56:	b8 f4       	brcc	.+46     	; 0xb86 <_ZL9getNumberv+0x46>
     b58:	9e 01       	movw	r18, r28
     b5a:	12 9f       	mul	r17, r18
     b5c:	e0 01       	movw	r28, r0
     b5e:	13 9f       	mul	r17, r19
     b60:	d0 0d       	add	r29, r0
     b62:	11 24       	eor	r1, r1
     b64:	c8 0f       	add	r28, r24
     b66:	d1 1d       	adc	r29, r1
     b68:	87 fd       	sbrc	r24, 7
     b6a:	da 95       	dec	r29
     b6c:	e0 97       	sbiw	r28, 0x30	; 48
     b6e:	80 91 64 01 	lds	r24, 0x0164
     b72:	90 91 65 01 	lds	r25, 0x0165
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	90 93 65 01 	sts	0x0165, r25
     b7c:	80 93 64 01 	sts	0x0164, r24
     b80:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZL16currentCharacterv>
     b84:	e5 cf       	rjmp	.-54     	; 0xb50 <_ZL9getNumberv+0x10>
     b86:	ce 01       	movw	r24, r28
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	08 95       	ret

00000b90 <_ZN15OrangutanBuzzer5init2Ev>:
     b90:	10 92 6f 00 	sts	0x006F, r1
     b94:	83 e2       	ldi	r24, 0x23	; 35
     b96:	80 93 80 00 	sts	0x0080, r24
     b9a:	81 e1       	ldi	r24, 0x11	; 17
     b9c:	80 93 81 00 	sts	0x0081, r24
     ba0:	10 92 82 00 	sts	0x0082, r1
     ba4:	80 e1       	ldi	r24, 0x10	; 16
     ba6:	97 e2       	ldi	r25, 0x27	; 39
     ba8:	90 93 89 00 	sts	0x0089, r25
     bac:	80 93 88 00 	sts	0x0088, r24
     bb0:	10 92 8b 00 	sts	0x008B, r1
     bb4:	10 92 8a 00 	sts	0x008A, r1
     bb8:	22 9a       	sbi	0x04, 2	; 4
     bba:	78 94       	sei
     bbc:	08 95       	ret

00000bbe <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     bbe:	8f 92       	push	r8
     bc0:	9f 92       	push	r9
     bc2:	af 92       	push	r10
     bc4:	bf 92       	push	r11
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	5c 01       	movw	r10, r24
     bd6:	8b 01       	movw	r16, r22
     bd8:	d4 2e       	mov	r13, r20
     bda:	80 91 66 01 	lds	r24, 0x0166
     bde:	81 11       	cpse	r24, r1
     be0:	05 c0       	rjmp	.+10     	; 0xbec <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 66 01 	sts	0x0166, r24
     be8:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN15OrangutanBuzzer5init2Ev>
     bec:	10 92 0b 01 	sts	0x010B, r1
     bf0:	b7 fe       	sbrs	r11, 7
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     bf4:	e8 94       	clt
     bf6:	b7 f8       	bld	r11, 7
     bf8:	2a e0       	ldi	r18, 0x0A	; 10
     bfa:	f2 2e       	mov	r15, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     bfe:	ff 24       	eor	r15, r15
     c00:	f3 94       	inc	r15
     c02:	e0 90 81 00 	lds	r14, 0x0081
     c06:	2e 2d       	mov	r18, r14
     c08:	28 7f       	andi	r18, 0xF8	; 248
     c0a:	e2 2e       	mov	r14, r18
     c0c:	48 ec       	ldi	r20, 0xC8	; 200
     c0e:	f4 9e       	mul	r15, r20
     c10:	c0 01       	movw	r24, r0
     c12:	11 24       	eor	r1, r1
     c14:	8a 15       	cp	r24, r10
     c16:	9b 05       	cpc	r25, r11
     c18:	e0 f4       	brcc	.+56     	; 0xc52 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     c1a:	e5 01       	movw	r28, r10
     c1c:	51 e1       	ldi	r21, 0x11	; 17
     c1e:	a5 16       	cp	r10, r21
     c20:	57 e2       	ldi	r21, 0x27	; 39
     c22:	b5 06       	cpc	r11, r21
     c24:	10 f0       	brcs	.+4      	; 0xc2a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     c26:	c0 e1       	ldi	r28, 0x10	; 16
     c28:	d7 e2       	ldi	r29, 0x27	; 39
     c2a:	be 01       	movw	r22, r28
     c2c:	76 95       	lsr	r23
     c2e:	67 95       	ror	r22
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	60 58       	subi	r22, 0x80	; 128
     c36:	79 46       	sbci	r23, 0x69	; 105
     c38:	87 46       	sbci	r24, 0x67	; 103
     c3a:	9f 4f       	sbci	r25, 0xFF	; 255
     c3c:	4e 01       	movw	r8, r28
     c3e:	a1 2c       	mov	r10, r1
     c40:	b1 2c       	mov	r11, r1
     c42:	a5 01       	movw	r20, r10
     c44:	94 01       	movw	r18, r8
     c46:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodsi4>
     c4a:	59 01       	movw	r10, r18
     c4c:	8e 2d       	mov	r24, r14
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	24 c0       	rjmp	.+72     	; 0xc9a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     c52:	c8 e2       	ldi	r28, 0x28	; 40
     c54:	fc 9e       	mul	r15, r28
     c56:	c0 2d       	mov	r28, r0
     c58:	11 24       	eor	r1, r1
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
     c5c:	ca 15       	cp	r28, r10
     c5e:	db 05       	cpc	r29, r11
     c60:	08 f4       	brcc	.+2      	; 0xc64 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     c62:	e5 01       	movw	r28, r10
     c64:	be 01       	movw	r22, r28
     c66:	76 95       	lsr	r23
     c68:	67 95       	ror	r22
     c6a:	9e 01       	movw	r18, r28
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	f8 12       	cpse	r15, r24
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	60 5e       	subi	r22, 0xE0	; 224
     c7c:	73 44       	sbci	r23, 0x43	; 67
     c7e:	81 44       	sbci	r24, 0x41	; 65
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	60 53       	subi	r22, 0x30	; 48
     c8a:	7d 4e       	sbci	r23, 0xED	; 237
     c8c:	8c 4e       	sbci	r24, 0xEC	; 236
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodsi4>
     c94:	59 01       	movw	r10, r18
     c96:	8e 2d       	mov	r24, r14
     c98:	82 60       	ori	r24, 0x02	; 2
     c9a:	88 2e       	mov	r8, r24
     c9c:	2a e0       	ldi	r18, 0x0A	; 10
     c9e:	f2 12       	cpse	r15, r18
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     ca2:	ce 01       	movw	r24, r28
     ca4:	05 96       	adiw	r24, 0x05	; 5
     ca6:	6a e0       	ldi	r22, 0x0A	; 10
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
     cae:	eb 01       	movw	r28, r22
     cb0:	c8 3e       	cpi	r28, 0xE8	; 232
     cb2:	43 e0       	ldi	r20, 0x03	; 3
     cb4:	d4 07       	cpc	r29, r20
     cb6:	59 f0       	breq	.+22     	; 0xcce <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     cb8:	98 01       	movw	r18, r16
     cba:	de 01       	movw	r26, r28
     cbc:	0e 94 c7 11 	call	0x238e	; 0x238e <__umulhisi3>
     cc0:	28 ee       	ldi	r18, 0xE8	; 232
     cc2:	33 e0       	ldi	r19, 0x03	; 3
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodsi4>
     ccc:	89 01       	movw	r16, r18
     cce:	10 92 6f 00 	sts	0x006F, r1
     cd2:	80 92 81 00 	sts	0x0081, r8
     cd6:	b0 92 89 00 	sts	0x0089, r11
     cda:	a0 92 88 00 	sts	0x0088, r10
     cde:	20 91 88 00 	lds	r18, 0x0088
     ce2:	30 91 89 00 	lds	r19, 0x0089
     ce6:	4d 2d       	mov	r20, r13
     ce8:	40 31       	cpi	r20, 0x10	; 16
     cea:	08 f0       	brcs	.+2      	; 0xcee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     cec:	4f e0       	ldi	r20, 0x0F	; 15
     cee:	80 e1       	ldi	r24, 0x10	; 16
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	84 1b       	sub	r24, r20
     cf4:	91 09       	sbc	r25, r1
     cf6:	a9 01       	movw	r20, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     cfa:	56 95       	lsr	r21
     cfc:	47 95       	ror	r20
     cfe:	8a 95       	dec	r24
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     d02:	50 93 8b 00 	sts	0x008B, r21
     d06:	40 93 8a 00 	sts	0x008A, r20
     d0a:	10 93 6c 01 	sts	0x016C, r17
     d0e:	00 93 6b 01 	sts	0x016B, r16
     d12:	86 b3       	in	r24, 0x16	; 22
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	86 bb       	out	0x16, r24	; 22
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	80 93 6f 00 	sts	0x006F, r24
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	9f 90       	pop	r9
     d32:	8f 90       	pop	r8
     d34:	08 95       	ret

00000d36 <_ZN15OrangutanBuzzer8playNoteEhjh>:
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	eb 01       	movw	r28, r22
     d3c:	8f 3f       	cpi	r24, 0xFF	; 255
     d3e:	11 f0       	breq	.+4      	; 0xd44 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     d40:	41 11       	cpse	r20, r1
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	be 01       	movw	r22, r28
     d48:	88 ee       	ldi	r24, 0xE8	; 232
     d4a:	93 e0       	ldi	r25, 0x03	; 3
     d4c:	43 c0       	rjmp	.+134    	; 0xdd4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     d4e:	81 31       	cpi	r24, 0x11	; 17
     d50:	30 f0       	brcs	.+12     	; 0xd5e <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     d52:	50 ef       	ldi	r21, 0xF0	; 240
     d54:	58 0f       	add	r21, r24
     d56:	50 36       	cpi	r21, 0x60	; 96
     d58:	18 f0       	brcs	.+6      	; 0xd60 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     d5a:	5f e5       	ldi	r21, 0x5F	; 95
     d5c:	01 c0       	rjmp	.+2      	; 0xd60 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	85 2f       	mov	r24, r21
     d62:	6c e0       	ldi	r22, 0x0C	; 12
     d64:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodqi4>
     d68:	68 2f       	mov	r22, r24
     d6a:	74 ef       	ldi	r23, 0xF4	; 244
     d6c:	76 03       	mulsu	r23, r22
     d6e:	90 01       	movw	r18, r0
     d70:	11 24       	eor	r1, r1
     d72:	25 0f       	add	r18, r21
     d74:	31 1d       	adc	r19, r1
     d76:	2c 30       	cpi	r18, 0x0C	; 12
     d78:	31 05       	cpc	r19, r1
     d7a:	40 f4       	brcc	.+16     	; 0xd8c <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     d7c:	f9 01       	movw	r30, r18
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	e0 5e       	subi	r30, 0xE0	; 224
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	20 81       	ld	r18, Z
     d88:	31 81       	ldd	r19, Z+1	; 0x01
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	87 30       	cpi	r24, 0x07	; 7
     d92:	81 f0       	breq	.+32     	; 0xdb4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     d94:	08 2e       	mov	r0, r24
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     d98:	22 0f       	add	r18, r18
     d9a:	33 1f       	adc	r19, r19
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     da0:	82 30       	cpi	r24, 0x02	; 2
     da2:	28 f0       	brcs	.+10     	; 0xdae <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
     da4:	c9 01       	movw	r24, r18
     da6:	05 96       	adiw	r24, 0x05	; 5
     da8:	6a e0       	ldi	r22, 0x0A	; 10
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
     dae:	c9 01       	movw	r24, r18
     db0:	90 58       	subi	r25, 0x80	; 128
     db2:	0c c0       	rjmp	.+24     	; 0xdcc <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
     db4:	c9 01       	movw	r24, r18
     db6:	36 e0       	ldi	r19, 0x06	; 6
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	3a 95       	dec	r19
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
     dc0:	02 96       	adiw	r24, 0x02	; 2
     dc2:	65 e0       	ldi	r22, 0x05	; 5
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
     dca:	cb 01       	movw	r24, r22
     dcc:	40 31       	cpi	r20, 0x10	; 16
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     dd0:	4f e0       	ldi	r20, 0x0F	; 15
     dd2:	be 01       	movw	r22, r28
     dd4:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <_ZL8nextNotev>:
     dde:	a2 e0       	ldi	r26, 0x02	; 2
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 ef       	ldi	r30, 0xF5	; 245
     de4:	f6 e0       	ldi	r31, 0x06	; 6
     de6:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__prologue_saves__+0x4>
     dea:	90 90 0a 01 	lds	r9, 0x010A
     dee:	80 91 68 01 	lds	r24, 0x0168
     df2:	88 23       	and	r24, r24
     df4:	21 f0       	breq	.+8      	; 0xdfe <_ZL8nextNotev+0x20>
     df6:	60 91 67 01 	lds	r22, 0x0167
     dfa:	61 11       	cpse	r22, r1
     dfc:	17 c0       	rjmp	.+46     	; 0xe2c <_ZL8nextNotev+0x4e>
     dfe:	77 24       	eor	r7, r7
     e00:	73 94       	inc	r7
     e02:	b0 ec       	ldi	r27, 0xC0	; 192
     e04:	ab 2e       	mov	r10, r27
     e06:	bd e5       	ldi	r27, 0x5D	; 93
     e08:	bb 2e       	mov	r11, r27
     e0a:	1a e0       	ldi	r17, 0x0A	; 10
     e0c:	61 2e       	mov	r6, r17
     e0e:	04 e0       	ldi	r16, 0x04	; 4
     e10:	80 2e       	mov	r8, r16
     e12:	80 ed       	ldi	r24, 0xD0	; 208
     e14:	c8 2e       	mov	r12, r24
     e16:	87 e0       	ldi	r24, 0x07	; 7
     e18:	d8 2e       	mov	r13, r24
     e1a:	94 e0       	ldi	r25, 0x04	; 4
     e1c:	e9 2e       	mov	r14, r25
     e1e:	f1 2c       	mov	r15, r1
     e20:	04 ef       	ldi	r16, 0xF4	; 244
     e22:	11 e0       	ldi	r17, 0x01	; 1
     e24:	2f e0       	ldi	r18, 0x0F	; 15
     e26:	42 2e       	mov	r4, r18
     e28:	51 2c       	mov	r5, r1
     e2a:	15 c0       	rjmp	.+42     	; 0xe56 <_ZL8nextNotev+0x78>
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	88 ee       	ldi	r24, 0xE8	; 232
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     e38:	10 92 67 01 	sts	0x0167, r1
     e3c:	17 c1       	rjmp	.+558    	; 0x106c <_ZL8nextNotev+0x28e>
     e3e:	86 36       	cpi	r24, 0x66	; 102
     e40:	d4 f5       	brge	.+116    	; 0xeb6 <_ZL8nextNotev+0xd8>
     e42:	81 36       	cpi	r24, 0x61	; 97
     e44:	09 f4       	brne	.+2      	; 0xe48 <_ZL8nextNotev+0x6a>
     e46:	a9 c0       	rjmp	.+338    	; 0xf9a <_ZL8nextNotev+0x1bc>
     e48:	7c f5       	brge	.+94     	; 0xea8 <_ZL8nextNotev+0xca>
     e4a:	8c 33       	cpi	r24, 0x3C	; 60
     e4c:	09 f4       	brne	.+2      	; 0xe50 <_ZL8nextNotev+0x72>
     e4e:	60 c0       	rjmp	.+192    	; 0xf10 <_ZL8nextNotev+0x132>
     e50:	8e 33       	cpi	r24, 0x3E	; 62
     e52:	81 f4       	brne	.+32     	; 0xe74 <_ZL8nextNotev+0x96>
     e54:	93 94       	inc	r9
     e56:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZL16currentCharacterv>
     e5a:	20 91 64 01 	lds	r18, 0x0164
     e5e:	30 91 65 01 	lds	r19, 0x0165
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	30 93 65 01 	sts	0x0165, r19
     e6a:	20 93 64 01 	sts	0x0164, r18
     e6e:	85 36       	cpi	r24, 0x65	; 101
     e70:	31 f7       	brne	.-52     	; 0xe3e <_ZL8nextNotev+0x60>
     e72:	52 c0       	rjmp	.+164    	; 0xf18 <_ZL8nextNotev+0x13a>
     e74:	81 32       	cpi	r24, 0x21	; 33
     e76:	09 f0       	breq	.+2      	; 0xe7a <_ZL8nextNotev+0x9c>
     e78:	8b c0       	rjmp	.+278    	; 0xf90 <_ZL8nextNotev+0x1b2>
     e7a:	80 92 0a 01 	sts	0x010A, r8
     e7e:	d0 92 09 01 	sts	0x0109, r13
     e82:	c0 92 08 01 	sts	0x0108, r12
     e86:	f0 92 07 01 	sts	0x0107, r15
     e8a:	e0 92 06 01 	sts	0x0106, r14
     e8e:	10 93 05 01 	sts	0x0105, r17
     e92:	00 93 04 01 	sts	0x0104, r16
     e96:	50 92 03 01 	sts	0x0103, r5
     e9a:	40 92 02 01 	sts	0x0102, r4
     e9e:	10 92 68 01 	sts	0x0168, r1
     ea2:	a4 e0       	ldi	r26, 0x04	; 4
     ea4:	9a 2e       	mov	r9, r26
     ea6:	d7 cf       	rjmp	.-82     	; 0xe56 <_ZL8nextNotev+0x78>
     ea8:	83 36       	cpi	r24, 0x63	; 99
     eaa:	a1 f1       	breq	.+104    	; 0xf14 <_ZL8nextNotev+0x136>
     eac:	0c f4       	brge	.+2      	; 0xeb0 <_ZL8nextNotev+0xd2>
     eae:	78 c0       	rjmp	.+240    	; 0xfa0 <_ZL8nextNotev+0x1c2>
     eb0:	10 e0       	ldi	r17, 0x00	; 0
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	77 c0       	rjmp	.+238    	; 0xfa4 <_ZL8nextNotev+0x1c6>
     eb6:	8d 36       	cpi	r24, 0x6D	; 109
     eb8:	c1 f1       	breq	.+112    	; 0xf2a <_ZL8nextNotev+0x14c>
     eba:	94 f4       	brge	.+36     	; 0xee0 <_ZL8nextNotev+0x102>
     ebc:	87 36       	cpi	r24, 0x67	; 103
     ebe:	91 f1       	breq	.+100    	; 0xf24 <_ZL8nextNotev+0x146>
     ec0:	74 f1       	brlt	.+92     	; 0xf1e <_ZL8nextNotev+0x140>
     ec2:	8c 36       	cpi	r24, 0x6C	; 108
     ec4:	09 f0       	breq	.+2      	; 0xec8 <_ZL8nextNotev+0xea>
     ec6:	64 c0       	rjmp	.+200    	; 0xf90 <_ZL8nextNotev+0x1b2>
     ec8:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZL9getNumberv>
     ecc:	bc 01       	movw	r22, r24
     ece:	90 93 07 01 	sts	0x0107, r25
     ed2:	80 93 06 01 	sts	0x0106, r24
     ed6:	80 91 08 01 	lds	r24, 0x0108
     eda:	90 91 09 01 	lds	r25, 0x0109
     ede:	51 c0       	rjmp	.+162    	; 0xf82 <_ZL8nextNotev+0x1a4>
     ee0:	82 37       	cpi	r24, 0x72	; 114
     ee2:	c9 f1       	breq	.+114    	; 0xf56 <_ZL8nextNotev+0x178>
     ee4:	4c f4       	brge	.+18     	; 0xef8 <_ZL8nextNotev+0x11a>
     ee6:	8f 36       	cpi	r24, 0x6F	; 111
     ee8:	09 f0       	breq	.+2      	; 0xeec <_ZL8nextNotev+0x10e>
     eea:	52 c0       	rjmp	.+164    	; 0xf90 <_ZL8nextNotev+0x1b2>
     eec:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZL9getNumberv>
     ef0:	98 2e       	mov	r9, r24
     ef2:	80 93 0a 01 	sts	0x010A, r24
     ef6:	af cf       	rjmp	.-162    	; 0xe56 <_ZL8nextNotev+0x78>
     ef8:	84 37       	cpi	r24, 0x74	; 116
     efa:	81 f1       	breq	.+96     	; 0xf5c <_ZL8nextNotev+0x17e>
     efc:	86 37       	cpi	r24, 0x76	; 118
     efe:	09 f0       	breq	.+2      	; 0xf02 <_ZL8nextNotev+0x124>
     f00:	47 c0       	rjmp	.+142    	; 0xf90 <_ZL8nextNotev+0x1b2>
     f02:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZL9getNumberv>
     f06:	90 93 03 01 	sts	0x0103, r25
     f0a:	80 93 02 01 	sts	0x0102, r24
     f0e:	a3 cf       	rjmp	.-186    	; 0xe56 <_ZL8nextNotev+0x78>
     f10:	9a 94       	dec	r9
     f12:	a1 cf       	rjmp	.-190    	; 0xe56 <_ZL8nextNotev+0x78>
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	20 c0       	rjmp	.+64     	; 0xf58 <_ZL8nextNotev+0x17a>
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	43 c0       	rjmp	.+134    	; 0xfa4 <_ZL8nextNotev+0x1c6>
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	85 e0       	ldi	r24, 0x05	; 5
     f22:	40 c0       	rjmp	.+128    	; 0xfa4 <_ZL8nextNotev+0x1c6>
     f24:	10 e0       	ldi	r17, 0x00	; 0
     f26:	87 e0       	ldi	r24, 0x07	; 7
     f28:	3d c0       	rjmp	.+122    	; 0xfa4 <_ZL8nextNotev+0x1c6>
     f2a:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZL16currentCharacterv>
     f2e:	8c 36       	cpi	r24, 0x6C	; 108
     f30:	19 f4       	brne	.+6      	; 0xf38 <_ZL8nextNotev+0x15a>
     f32:	10 92 68 01 	sts	0x0168, r1
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <_ZL8nextNotev+0x162>
     f38:	70 92 68 01 	sts	0x0168, r7
     f3c:	10 92 67 01 	sts	0x0167, r1
     f40:	20 91 64 01 	lds	r18, 0x0164
     f44:	30 91 65 01 	lds	r19, 0x0165
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	30 93 65 01 	sts	0x0165, r19
     f50:	20 93 64 01 	sts	0x0164, r18
     f54:	80 cf       	rjmp	.-256    	; 0xe56 <_ZL8nextNotev+0x78>
     f56:	11 e0       	ldi	r17, 0x01	; 1
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	24 c0       	rjmp	.+72     	; 0xfa4 <_ZL8nextNotev+0x1c6>
     f5c:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZL9getNumberv>
     f60:	bc 01       	movw	r22, r24
     f62:	c5 01       	movw	r24, r10
     f64:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
     f68:	66 9e       	mul	r6, r22
     f6a:	c0 01       	movw	r24, r0
     f6c:	67 9e       	mul	r6, r23
     f6e:	90 0d       	add	r25, r0
     f70:	11 24       	eor	r1, r1
     f72:	90 93 09 01 	sts	0x0109, r25
     f76:	80 93 08 01 	sts	0x0108, r24
     f7a:	60 91 06 01 	lds	r22, 0x0106
     f7e:	70 91 07 01 	lds	r23, 0x0107
     f82:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
     f86:	70 93 05 01 	sts	0x0105, r23
     f8a:	60 93 04 01 	sts	0x0104, r22
     f8e:	63 cf       	rjmp	.-314    	; 0xe56 <_ZL8nextNotev+0x78>
     f90:	10 92 65 01 	sts	0x0165, r1
     f94:	10 92 64 01 	sts	0x0164, r1
     f98:	69 c0       	rjmp	.+210    	; 0x106c <_ZL8nextNotev+0x28e>
     f9a:	10 e0       	ldi	r17, 0x00	; 0
     f9c:	89 e0       	ldi	r24, 0x09	; 9
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <_ZL8nextNotev+0x1c6>
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	8b e0       	ldi	r24, 0x0B	; 11
     fa4:	08 2f       	mov	r16, r24
     fa6:	9c e0       	ldi	r25, 0x0C	; 12
     fa8:	99 9e       	mul	r9, r25
     faa:	00 0d       	add	r16, r0
     fac:	11 24       	eor	r1, r1
     fae:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZL16currentCharacterv>
     fb2:	98 2f       	mov	r25, r24
     fb4:	97 7f       	andi	r25, 0xF7	; 247
     fb6:	93 32       	cpi	r25, 0x23	; 35
     fb8:	61 f4       	brne	.+24     	; 0xfd2 <_ZL8nextNotev+0x1f4>
     fba:	20 91 64 01 	lds	r18, 0x0164
     fbe:	30 91 65 01 	lds	r19, 0x0165
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	30 93 65 01 	sts	0x0165, r19
     fca:	20 93 64 01 	sts	0x0164, r18
     fce:	0f 5f       	subi	r16, 0xFF	; 255
     fd0:	ee cf       	rjmp	.-36     	; 0xfae <_ZL8nextNotev+0x1d0>
     fd2:	8d 32       	cpi	r24, 0x2D	; 45
     fd4:	71 f4       	brne	.+28     	; 0xff2 <_ZL8nextNotev+0x214>
     fd6:	20 91 64 01 	lds	r18, 0x0164
     fda:	30 91 65 01 	lds	r19, 0x0165
     fde:	2f 5f       	subi	r18, 0xFF	; 255
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	30 93 65 01 	sts	0x0165, r19
     fe6:	20 93 64 01 	sts	0x0164, r18
     fea:	01 50       	subi	r16, 0x01	; 1
     fec:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZL16currentCharacterv>
     ff0:	f0 cf       	rjmp	.-32     	; 0xfd2 <_ZL8nextNotev+0x1f4>
     ff2:	60 91 04 01 	lds	r22, 0x0104
     ff6:	70 91 05 01 	lds	r23, 0x0105
     ffa:	81 53       	subi	r24, 0x31	; 49
     ffc:	88 30       	cpi	r24, 0x08	; 8
     ffe:	50 f4       	brcc	.+20     	; 0x1014 <_ZL8nextNotev+0x236>
    1000:	e0 90 08 01 	lds	r14, 0x0108
    1004:	f0 90 09 01 	lds	r15, 0x0109
    1008:	0e 94 a0 05 	call	0xb40	; 0xb40 <_ZL9getNumberv>
    100c:	bc 01       	movw	r22, r24
    100e:	c7 01       	movw	r24, r14
    1010:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
    1014:	7b 01       	movw	r14, r22
    1016:	f6 94       	lsr	r15
    1018:	e7 94       	ror	r14
    101a:	69 83       	std	Y+1, r22	; 0x01
    101c:	7a 83       	std	Y+2, r23	; 0x02
    101e:	0e 94 83 05 	call	0xb06	; 0xb06 <_ZL16currentCharacterv>
    1022:	69 81       	ldd	r22, Y+1	; 0x01
    1024:	7a 81       	ldd	r23, Y+2	; 0x02
    1026:	8e 32       	cpi	r24, 0x2E	; 46
    1028:	69 f4       	brne	.+26     	; 0x1044 <_ZL8nextNotev+0x266>
    102a:	20 91 64 01 	lds	r18, 0x0164
    102e:	30 91 65 01 	lds	r19, 0x0165
    1032:	2f 5f       	subi	r18, 0xFF	; 255
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
    1036:	30 93 65 01 	sts	0x0165, r19
    103a:	20 93 64 01 	sts	0x0164, r18
    103e:	6e 0d       	add	r22, r14
    1040:	7f 1d       	adc	r23, r15
    1042:	e9 cf       	rjmp	.-46     	; 0x1016 <_ZL8nextNotev+0x238>
    1044:	80 91 68 01 	lds	r24, 0x0168
    1048:	88 23       	and	r24, r24
    104a:	39 f0       	breq	.+14     	; 0x105a <_ZL8nextNotev+0x27c>
    104c:	9b 01       	movw	r18, r22
    104e:	36 95       	lsr	r19
    1050:	27 95       	ror	r18
    1052:	20 93 67 01 	sts	0x0167, r18
    1056:	62 1b       	sub	r22, r18
    1058:	71 09       	sbc	r23, r1
    105a:	40 91 02 01 	lds	r20, 0x0102
    105e:	11 23       	and	r17, r17
    1060:	11 f0       	breq	.+4      	; 0x1066 <_ZL8nextNotev+0x288>
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <_ZL8nextNotev+0x28a>
    1066:	80 2f       	mov	r24, r16
    1068:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN15OrangutanBuzzer8playNoteEhjh>
    106c:	22 96       	adiw	r28, 0x02	; 2
    106e:	e0 e1       	ldi	r30, 0x10	; 16
    1070:	0c 94 07 12 	jmp	0x240e	; 0x240e <__epilogue_restores__+0x4>

00001074 <__vector_13>:
    1074:	1f 92       	push	r1
    1076:	0f 92       	push	r0
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	0f 92       	push	r0
    107c:	11 24       	eor	r1, r1
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
    1096:	80 91 6b 01 	lds	r24, 0x016B
    109a:	90 91 6c 01 	lds	r25, 0x016C
    109e:	9c 01       	movw	r18, r24
    10a0:	21 50       	subi	r18, 0x01	; 1
    10a2:	31 09       	sbc	r19, r1
    10a4:	30 93 6c 01 	sts	0x016C, r19
    10a8:	20 93 6b 01 	sts	0x016B, r18
    10ac:	89 2b       	or	r24, r25
    10ae:	11 f5       	brne	.+68     	; 0x10f4 <__vector_13+0x80>
    10b0:	10 92 6f 00 	sts	0x006F, r1
    10b4:	78 94       	sei
    10b6:	80 91 81 00 	lds	r24, 0x0081
    10ba:	88 7f       	andi	r24, 0xF8	; 248
    10bc:	81 60       	ori	r24, 0x01	; 1
    10be:	80 93 81 00 	sts	0x0081, r24
    10c2:	80 e1       	ldi	r24, 0x10	; 16
    10c4:	97 e2       	ldi	r25, 0x27	; 39
    10c6:	90 93 89 00 	sts	0x0089, r25
    10ca:	80 93 88 00 	sts	0x0088, r24
    10ce:	10 92 8b 00 	sts	0x008B, r1
    10d2:	10 92 8a 00 	sts	0x008A, r1
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 93 0b 01 	sts	0x010B, r24
    10dc:	80 91 64 01 	lds	r24, 0x0164
    10e0:	90 91 65 01 	lds	r25, 0x0165
    10e4:	89 2b       	or	r24, r25
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <__vector_13+0x80>
    10e8:	80 91 6a 01 	lds	r24, 0x016A
    10ec:	81 11       	cpse	r24, r1
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <__vector_13+0x80>
    10f0:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL8nextNotev>
    10f4:	ff 91       	pop	r31
    10f6:	ef 91       	pop	r30
    10f8:	bf 91       	pop	r27
    10fa:	af 91       	pop	r26
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	7f 91       	pop	r23
    1102:	6f 91       	pop	r22
    1104:	5f 91       	pop	r21
    1106:	4f 91       	pop	r20
    1108:	3f 91       	pop	r19
    110a:	2f 91       	pop	r18
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <_ZN15OrangutanBuzzer9isPlayingEv>:
    1116:	80 91 0b 01 	lds	r24, 0x010B
    111a:	88 23       	and	r24, r24
    111c:	49 f0       	breq	.+18     	; 0x1130 <_ZN15OrangutanBuzzer9isPlayingEv+0x1a>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	20 91 64 01 	lds	r18, 0x0164
    1124:	30 91 65 01 	lds	r19, 0x0165
    1128:	23 2b       	or	r18, r19
    112a:	19 f4       	brne	.+6      	; 0x1132 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	08 95       	ret

00001134 <is_playing>:
    1134:	0e 94 8b 08 	call	0x1116	; 0x1116 <_ZN15OrangutanBuzzer9isPlayingEv>
    1138:	08 95       	ret

0000113a <_ZN15OrangutanBuzzer4playEPKc>:
    113a:	10 92 6f 00 	sts	0x006F, r1
    113e:	90 93 65 01 	sts	0x0165, r25
    1142:	80 93 64 01 	sts	0x0164, r24
    1146:	10 92 69 01 	sts	0x0169, r1
    114a:	10 92 67 01 	sts	0x0167, r1
    114e:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL8nextNotev>
    1152:	08 95       	ret

00001154 <play>:
    1154:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN15OrangutanBuzzer4playEPKc>
    1158:	08 95       	ret

0000115a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    115a:	10 92 6f 00 	sts	0x006F, r1
    115e:	90 93 65 01 	sts	0x0165, r25
    1162:	80 93 64 01 	sts	0x0164, r24
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	80 93 69 01 	sts	0x0169, r24
    116c:	10 92 67 01 	sts	0x0167, r1
    1170:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZL8nextNotev>
    1174:	08 95       	ret

00001176 <play_from_program_space>:
    1176:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    117a:	08 95       	ret

0000117c <delay_us.constprop.0>:
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	6f 93       	push	r22
    1182:	64 e0       	ldi	r22, 0x04	; 4
    1184:	6a 95       	dec	r22
    1186:	f1 f7       	brne	.-4      	; 0x1184 <delay_us.constprop.0+0x8>
    1188:	6f 91       	pop	r22
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	c9 f7       	brne	.-14     	; 0x1180 <delay_us.constprop.0+0x4>
    118e:	08 95       	ret

00001190 <_ZN12OrangutanLCD8busyWaitEv>:
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	1a b1       	in	r17, 0x0a	; 10
    119a:	57 98       	cbi	0x0a, 7	; 10
    119c:	5a 98       	cbi	0x0b, 2	; 11
    119e:	28 9a       	sbi	0x05, 0	; 5
    11a0:	c0 e0       	ldi	r28, 0x00	; 0
    11a2:	d0 e0       	ldi	r29, 0x00	; 0
    11a4:	0e 94 be 08 	call	0x117c	; 0x117c <delay_us.constprop.0>
    11a8:	5c 9a       	sbi	0x0b, 4	; 11
    11aa:	0e 94 be 08 	call	0x117c	; 0x117c <delay_us.constprop.0>
    11ae:	09 b1       	in	r16, 0x09	; 9
    11b0:	5c 98       	cbi	0x0b, 4	; 11
    11b2:	0e 94 be 08 	call	0x117c	; 0x117c <delay_us.constprop.0>
    11b6:	5c 9a       	sbi	0x0b, 4	; 11
    11b8:	0e 94 be 08 	call	0x117c	; 0x117c <delay_us.constprop.0>
    11bc:	5c 98       	cbi	0x0b, 4	; 11
    11be:	24 96       	adiw	r28, 0x04	; 4
    11c0:	07 ff       	sbrs	r16, 7
    11c2:	10 c0       	rjmp	.+32     	; 0x11e4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    11c4:	ae 01       	movw	r20, r28
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	80 91 6d 01 	lds	r24, 0x016D
    11ce:	90 91 6e 01 	lds	r25, 0x016E
    11d2:	a0 91 6f 01 	lds	r26, 0x016F
    11d6:	b0 91 70 01 	lds	r27, 0x0170
    11da:	48 17       	cp	r20, r24
    11dc:	59 07       	cpc	r21, r25
    11de:	6a 07       	cpc	r22, r26
    11e0:	7b 07       	cpc	r23, r27
    11e2:	00 f3       	brcs	.-64     	; 0x11a4 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    11e4:	1a b9       	out	0x0a, r17	; 10
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <_ZN12OrangutanLCD8sendDataEh>:
    11f0:	95 b1       	in	r25, 0x05	; 5
    11f2:	28 2f       	mov	r18, r24
    11f4:	21 70       	andi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	48 2f       	mov	r20, r24
    11fe:	46 70       	andi	r20, 0x06	; 6
    1200:	68 e0       	ldi	r22, 0x08	; 8
    1202:	46 9f       	mul	r20, r22
    1204:	a0 01       	movw	r20, r0
    1206:	11 24       	eor	r1, r1
    1208:	24 2b       	or	r18, r20
    120a:	9d 7c       	andi	r25, 0xCD	; 205
    120c:	29 2b       	or	r18, r25
    120e:	25 b9       	out	0x05, r18	; 5
    1210:	9b b1       	in	r25, 0x0b	; 11
    1212:	88 70       	andi	r24, 0x08	; 8
    1214:	82 95       	swap	r24
    1216:	80 7f       	andi	r24, 0xF0	; 240
    1218:	9f 77       	andi	r25, 0x7F	; 127
    121a:	89 2b       	or	r24, r25
    121c:	8b b9       	out	0x0b, r24	; 11
    121e:	5c 9a       	sbi	0x0b, 4	; 11
    1220:	0e 94 be 08 	call	0x117c	; 0x117c <delay_us.constprop.0>
    1224:	5c 98       	cbi	0x0b, 4	; 11
    1226:	0e 94 be 08 	call	0x117c	; 0x117c <delay_us.constprop.0>
    122a:	08 95       	ret

0000122c <_ZN12OrangutanLCD4sendEhhh>:
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ec e1       	ldi	r30, 0x1C	; 28
    1232:	f9 e0       	ldi	r31, 0x09	; 9
    1234:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x16>
    1238:	c8 2f       	mov	r28, r24
    123a:	d6 2e       	mov	r13, r22
    123c:	e4 2e       	mov	r14, r20
    123e:	80 91 9c 02 	lds	r24, 0x029C
    1242:	81 11       	cpse	r24, r1
    1244:	05 c0       	rjmp	.+10     	; 0x1250 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 9c 02 	sts	0x029C, r24
    124c:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN12OrangutanLCD5init2Ev>
    1250:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN12OrangutanLCD8busyWaitEv>
    1254:	14 b1       	in	r17, 0x04	; 4
    1256:	d5 b1       	in	r29, 0x05	; 5
    1258:	fa b0       	in	r15, 0x0a	; 10
    125a:	0b b1       	in	r16, 0x0b	; 11
    125c:	28 98       	cbi	0x05, 0	; 5
    125e:	dd 20       	and	r13, r13
    1260:	11 f0       	breq	.+4      	; 0x1266 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1262:	5a 9a       	sbi	0x0b, 2	; 11
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1266:	5a 98       	cbi	0x0b, 2	; 11
    1268:	94 b1       	in	r25, 0x04	; 4
    126a:	92 63       	ori	r25, 0x32	; 50
    126c:	94 b9       	out	0x04, r25	; 4
    126e:	57 9a       	sbi	0x0a, 7	; 10
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	e8 16       	cp	r14, r24
    1274:	29 f0       	breq	.+10     	; 0x1280 <_ZN12OrangutanLCD4sendEhhh+0x54>
    1276:	8c 2f       	mov	r24, r28
    1278:	82 95       	swap	r24
    127a:	8f 70       	andi	r24, 0x0F	; 15
    127c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN12OrangutanLCD8sendDataEh>
    1280:	8c 2f       	mov	r24, r28
    1282:	8f 70       	andi	r24, 0x0F	; 15
    1284:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN12OrangutanLCD8sendDataEh>
    1288:	fa b8       	out	0x0a, r15	; 10
    128a:	0b b9       	out	0x0b, r16	; 11
    128c:	14 b9       	out	0x04, r17	; 4
    128e:	d5 b9       	out	0x05, r29	; 5
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	e7 e0       	ldi	r30, 0x07	; 7
    1296:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x16>

0000129a <_ZN12OrangutanLCD8send_cmdEh>:
    129a:	42 e0       	ldi	r20, 0x02	; 2
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	0e 94 16 09 	call	0x122c	; 0x122c <_ZN12OrangutanLCD4sendEhhh>
    12a2:	08 95       	ret

000012a4 <_ZN12OrangutanLCD9send_dataEh>:
    12a4:	42 e0       	ldi	r20, 0x02	; 2
    12a6:	61 e0       	ldi	r22, 0x01	; 1
    12a8:	0e 94 16 09 	call	0x122c	; 0x122c <_ZN12OrangutanLCD4sendEhhh>
    12ac:	08 95       	ret

000012ae <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    12ae:	a1 e0       	ldi	r26, 0x01	; 1
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ed e5       	ldi	r30, 0x5D	; 93
    12b4:	f9 e0       	ldi	r31, 0x09	; 9
    12b6:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x18>
    12ba:	8c 01       	movw	r16, r24
    12bc:	66 0f       	add	r22, r22
    12be:	66 0f       	add	r22, r22
    12c0:	66 0f       	add	r22, r22
    12c2:	e1 2c       	mov	r14, r1
    12c4:	f1 2c       	mov	r15, r1
    12c6:	8e 2d       	mov	r24, r14
    12c8:	86 0f       	add	r24, r22
    12ca:	80 64       	ori	r24, 0x40	; 64
    12cc:	69 83       	std	Y+1, r22	; 0x01
    12ce:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    12d2:	f8 01       	movw	r30, r16
    12d4:	ee 0d       	add	r30, r14
    12d6:	ff 1d       	adc	r31, r15
    12d8:	84 91       	lpm	r24, Z
    12da:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN12OrangutanLCD9send_dataEh>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	e8 1a       	sub	r14, r24
    12e2:	f8 0a       	sbc	r15, r24
    12e4:	69 81       	ldd	r22, Y+1	; 0x01
    12e6:	e8 e0       	ldi	r30, 0x08	; 8
    12e8:	ee 16       	cp	r14, r30
    12ea:	f1 04       	cpc	r15, r1
    12ec:	61 f7       	brne	.-40     	; 0x12c6 <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x18>
    12ee:	21 96       	adiw	r28, 0x01	; 1
    12f0:	e6 e0       	ldi	r30, 0x06	; 6
    12f2:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x18>

000012f6 <lcd_load_custom_character>:
    12f6:	0e 94 57 09 	call	0x12ae	; 0x12ae <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    12fa:	08 95       	ret

000012fc <print_character>:
    12fc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN12OrangutanLCD9send_dataEh>
    1300:	08 95       	ret

00001302 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	0e 94 16 09 	call	0x122c	; 0x122c <_ZN12OrangutanLCD4sendEhhh>
    130a:	08 95       	ret

0000130c <_ZN12OrangutanLCD5init2Ev>:
    130c:	80 e1       	ldi	r24, 0x10	; 16
    130e:	97 e2       	ldi	r25, 0x27	; 39
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	80 93 6d 01 	sts	0x016D, r24
    1318:	90 93 6e 01 	sts	0x016E, r25
    131c:	a0 93 6f 01 	sts	0x016F, r26
    1320:	b0 93 70 01 	sts	0x0170, r27
    1324:	52 9a       	sbi	0x0a, 2	; 10
    1326:	20 9a       	sbi	0x04, 0	; 4
    1328:	54 9a       	sbi	0x0a, 4	; 10
    132a:	8e e1       	ldi	r24, 0x1E	; 30
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1338:	86 e0       	ldi	r24, 0x06	; 6
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1346:	82 e0       	ldi	r24, 0x02	; 2
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
    134e:	83 e0       	ldi	r24, 0x03	; 3
    1350:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
    136a:	88 e2       	ldi	r24, 0x28	; 40
    136c:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    1370:	88 e0       	ldi	r24, 0x08	; 8
    1372:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    137c:	86 e0       	ldi	r24, 0x06	; 6
    137e:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    1382:	8c e0       	ldi	r24, 0x0C	; 12
    1384:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    1388:	08 95       	ret

0000138a <_ZN12OrangutanLCD5clearEv>:
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    1390:	80 91 73 01 	lds	r24, 0x0173
    1394:	90 91 74 01 	lds	r25, 0x0174
    1398:	89 2b       	or	r24, r25
    139a:	f9 f0       	breq	.+62     	; 0x13da <_ZN12OrangutanLCD5clearEv+0x50>
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	a0 e2       	ldi	r26, 0x20	; 32
    13a0:	26 2f       	mov	r18, r22
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	70 91 0c 01 	lds	r23, 0x010C
    13a8:	80 91 0d 01 	lds	r24, 0x010D
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	78 9f       	mul	r23, r24
    13b2:	a0 01       	movw	r20, r0
    13b4:	79 9f       	mul	r23, r25
    13b6:	50 0d       	add	r21, r0
    13b8:	11 24       	eor	r1, r1
    13ba:	24 17       	cp	r18, r20
    13bc:	35 07       	cpc	r19, r21
    13be:	4c f4       	brge	.+18     	; 0x13d2 <_ZN12OrangutanLCD5clearEv+0x48>
    13c0:	e0 91 73 01 	lds	r30, 0x0173
    13c4:	f0 91 74 01 	lds	r31, 0x0174
    13c8:	e2 0f       	add	r30, r18
    13ca:	f3 1f       	adc	r31, r19
    13cc:	a0 83       	st	Z, r26
    13ce:	6f 5f       	subi	r22, 0xFF	; 255
    13d0:	e7 cf       	rjmp	.-50     	; 0x13a0 <_ZN12OrangutanLCD5clearEv+0x16>
    13d2:	10 92 71 01 	sts	0x0171, r1
    13d6:	10 92 72 01 	sts	0x0172, r1
    13da:	08 95       	ret

000013dc <clear>:
    13dc:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN12OrangutanLCD5clearEv>
    13e0:	08 95       	ret

000013e2 <_ZN12OrangutanLCD5printEPKc>:
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	ec 01       	movw	r28, r24
    13e8:	89 91       	ld	r24, Y+
    13ea:	88 23       	and	r24, r24
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <_ZN12OrangutanLCD5printEPKc+0x12>
    13ee:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN12OrangutanLCD9send_dataEh>
    13f2:	fa cf       	rjmp	.-12     	; 0x13e8 <_ZN12OrangutanLCD5printEPKc+0x6>
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

000013fa <print>:
    13fa:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <_ZN12OrangutanLCD5printEPKc>
    13fe:	08 95       	ret

00001400 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	ec 01       	movw	r28, r24
    1406:	fe 01       	movw	r30, r28
    1408:	84 91       	lpm	r24, Z
    140a:	88 23       	and	r24, r24
    140c:	21 f0       	breq	.+8      	; 0x1416 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x16>
    140e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN12OrangutanLCD9send_dataEh>
    1412:	21 96       	adiw	r28, 0x01	; 1
    1414:	f8 cf       	rjmp	.-16     	; 0x1406 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x6>
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <print_from_program_space>:
    141c:	0e 94 00 0a 	call	0x1400	; 0x1400 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1420:	08 95       	ret

00001422 <_ZN12OrangutanLCD5printEm>:
    1422:	aa e0       	ldi	r26, 0x0A	; 10
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e7 e1       	ldi	r30, 0x17	; 23
    1428:	fa e0       	ldi	r31, 0x0A	; 10
    142a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x14>
    142e:	1a e0       	ldi	r17, 0x0A	; 10
    1430:	5a e0       	ldi	r21, 0x0A	; 10
    1432:	c5 2e       	mov	r12, r21
    1434:	d1 2c       	mov	r13, r1
    1436:	e1 2c       	mov	r14, r1
    1438:	f1 2c       	mov	r15, r1
    143a:	06 2f       	mov	r16, r22
    143c:	a7 01       	movw	r20, r14
    143e:	96 01       	movw	r18, r12
    1440:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodsi4>
    1444:	ca 01       	movw	r24, r20
    1446:	b9 01       	movw	r22, r18
    1448:	11 50       	subi	r17, 0x01	; 1
    144a:	e1 e0       	ldi	r30, 0x01	; 1
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	ec 0f       	add	r30, r28
    1450:	fd 1f       	adc	r31, r29
    1452:	e1 0f       	add	r30, r17
    1454:	f1 1d       	adc	r31, r1
    1456:	00 5d       	subi	r16, 0xD0	; 208
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	62 9f       	mul	r22, r18
    145c:	00 19       	sub	r16, r0
    145e:	11 24       	eor	r1, r1
    1460:	00 83       	st	Z, r16
    1462:	61 15       	cp	r22, r1
    1464:	71 05       	cpc	r23, r1
    1466:	81 05       	cpc	r24, r1
    1468:	91 05       	cpc	r25, r1
    146a:	39 f7       	brne	.-50     	; 0x143a <_ZN12OrangutanLCD5printEm+0x18>
    146c:	1a 30       	cpi	r17, 0x0A	; 10
    146e:	58 f4       	brcc	.+22     	; 0x1486 <_ZN12OrangutanLCD5printEm+0x64>
    1470:	e1 e0       	ldi	r30, 0x01	; 1
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	ec 0f       	add	r30, r28
    1476:	fd 1f       	adc	r31, r29
    1478:	e1 0f       	add	r30, r17
    147a:	f1 1d       	adc	r31, r1
    147c:	80 81       	ld	r24, Z
    147e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN12OrangutanLCD9send_dataEh>
    1482:	1f 5f       	subi	r17, 0xFF	; 255
    1484:	f3 cf       	rjmp	.-26     	; 0x146c <_ZN12OrangutanLCD5printEm+0x4a>
    1486:	2a 96       	adiw	r28, 0x0a	; 10
    1488:	e8 e0       	ldi	r30, 0x08	; 8
    148a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x14>

0000148e <_ZN12OrangutanLCD5printEl>:
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	6b 01       	movw	r12, r22
    1498:	7c 01       	movw	r14, r24
    149a:	97 ff       	sbrs	r25, 7
    149c:	0b c0       	rjmp	.+22     	; 0x14b4 <_ZN12OrangutanLCD5printEl+0x26>
    149e:	f0 94       	com	r15
    14a0:	e0 94       	com	r14
    14a2:	d0 94       	com	r13
    14a4:	c0 94       	com	r12
    14a6:	c1 1c       	adc	r12, r1
    14a8:	d1 1c       	adc	r13, r1
    14aa:	e1 1c       	adc	r14, r1
    14ac:	f1 1c       	adc	r15, r1
    14ae:	8d e2       	ldi	r24, 0x2D	; 45
    14b0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN12OrangutanLCD9send_dataEh>
    14b4:	c7 01       	movw	r24, r14
    14b6:	b6 01       	movw	r22, r12
    14b8:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN12OrangutanLCD5printEm>
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	cf 90       	pop	r12
    14c4:	08 95       	ret

000014c6 <print_long>:
    14c6:	0e 94 47 0a 	call	0x148e	; 0x148e <_ZN12OrangutanLCD5printEl>
    14ca:	08 95       	ret

000014cc <_ZN12OrangutanLCD6gotoXYEhh>:
    14cc:	a5 e0       	ldi	r26, 0x05	; 5
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	ec e6       	ldi	r30, 0x6C	; 108
    14d2:	fa e0       	ldi	r31, 0x0A	; 10
    14d4:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__prologue_saves__+0x1e>
    14d8:	18 2f       	mov	r17, r24
    14da:	80 e8       	ldi	r24, 0x80	; 128
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	80 ec       	ldi	r24, 0xC0	; 192
    14e0:	8a 83       	std	Y+2, r24	; 0x02
    14e2:	84 e9       	ldi	r24, 0x94	; 148
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	84 ed       	ldi	r24, 0xD4	; 212
    14e8:	8c 83       	std	Y+4, r24	; 0x04
    14ea:	fe 01       	movw	r30, r28
    14ec:	e6 0f       	add	r30, r22
    14ee:	f1 1d       	adc	r31, r1
    14f0:	81 81       	ldd	r24, Z+1	; 0x01
    14f2:	81 0f       	add	r24, r17
    14f4:	6d 83       	std	Y+5, r22	; 0x05
    14f6:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD8send_cmdEh>
    14fa:	10 93 71 01 	sts	0x0171, r17
    14fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1500:	60 93 72 01 	sts	0x0172, r22
    1504:	25 96       	adiw	r28, 0x05	; 5
    1506:	e3 e0       	ldi	r30, 0x03	; 3
    1508:	0c 94 14 12 	jmp	0x2428	; 0x2428 <__epilogue_restores__+0x1e>

0000150c <lcd_goto_xy>:
    150c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN12OrangutanLCD6gotoXYEhh>
    1510:	08 95       	ret

00001512 <_ZN16OrangutanDigital9setOutputEhh>:
    1512:	88 30       	cpi	r24, 0x08	; 8
    1514:	58 f4       	brcc	.+22     	; 0x152c <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	01 c0       	rjmp	.+2      	; 0x151c <_ZN16OrangutanDigital9setOutputEhh+0xa>
    151a:	99 0f       	add	r25, r25
    151c:	8a 95       	dec	r24
    151e:	ea f7       	brpl	.-6      	; 0x151a <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1520:	89 2f       	mov	r24, r25
    1522:	aa e2       	ldi	r26, 0x2A	; 42
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	eb e2       	ldi	r30, 0x2B	; 43
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	21 c0       	rjmp	.+66     	; 0x156e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    152c:	8e 30       	cpi	r24, 0x0E	; 14
    152e:	60 f4       	brcc	.+24     	; 0x1548 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1530:	98 ef       	ldi	r25, 0xF8	; 248
    1532:	98 0f       	add	r25, r24
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	01 c0       	rjmp	.+2      	; 0x153a <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1538:	88 0f       	add	r24, r24
    153a:	9a 95       	dec	r25
    153c:	ea f7       	brpl	.-6      	; 0x1538 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    153e:	a4 e2       	ldi	r26, 0x24	; 36
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e2       	ldi	r30, 0x25	; 37
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	13 c0       	rjmp	.+38     	; 0x156e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1548:	85 31       	cpi	r24, 0x15	; 21
    154a:	60 f4       	brcc	.+24     	; 0x1564 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    154c:	92 ef       	ldi	r25, 0xF2	; 242
    154e:	98 0f       	add	r25, r24
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1554:	88 0f       	add	r24, r24
    1556:	9a 95       	dec	r25
    1558:	ea f7       	brpl	.-6      	; 0x1554 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    155a:	a7 e2       	ldi	r26, 0x27	; 39
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e8 e2       	ldi	r30, 0x28	; 40
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	05 c0       	rjmp	.+10     	; 0x156e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e0 e0       	ldi	r30, 0x00	; 0
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	6f 3f       	cpi	r22, 0xFF	; 255
    1570:	19 f4       	brne	.+6      	; 0x1578 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1572:	90 81       	ld	r25, Z
    1574:	98 27       	eor	r25, r24
    1576:	09 c0       	rjmp	.+18     	; 0x158a <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1578:	66 23       	and	r22, r22
    157a:	19 f0       	breq	.+6      	; 0x1582 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    157c:	90 81       	ld	r25, Z
    157e:	98 2b       	or	r25, r24
    1580:	04 c0       	rjmp	.+8      	; 0x158a <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1582:	20 81       	ld	r18, Z
    1584:	98 2f       	mov	r25, r24
    1586:	90 95       	com	r25
    1588:	92 23       	and	r25, r18
    158a:	90 83       	st	Z, r25
    158c:	9c 91       	ld	r25, X
    158e:	98 2b       	or	r25, r24
    1590:	9c 93       	st	X, r25
    1592:	08 95       	ret

00001594 <_ZN15OrangutanMotors5init2Ev>:
    1594:	83 ef       	ldi	r24, 0xF3	; 243
    1596:	80 93 b0 00 	sts	0x00B0, r24
    159a:	84 bd       	out	0x24, r24	; 36
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	80 93 b1 00 	sts	0x00B1, r24
    15a2:	85 bd       	out	0x25, r24	; 37
    15a4:	10 92 b4 00 	sts	0x00B4, r1
    15a8:	10 92 b3 00 	sts	0x00B3, r1
    15ac:	18 bc       	out	0x28, r1	; 40
    15ae:	17 bc       	out	0x27, r1	; 39
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	86 e0       	ldi	r24, 0x06	; 6
    15b4:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN16OrangutanDigital9setOutputEhh>
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	85 e0       	ldi	r24, 0x05	; 5
    15bc:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN16OrangutanDigital9setOutputEhh>
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	8b e0       	ldi	r24, 0x0B	; 11
    15c4:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN16OrangutanDigital9setOutputEhh>
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	0e 94 89 0a 	call	0x1512	; 0x1512 <_ZN16OrangutanDigital9setOutputEhh>
    15d0:	08 95       	ret

000015d2 <_ZN15OrangutanMotors4initEv>:
    15d2:	80 91 9d 02 	lds	r24, 0x029D
    15d6:	81 11       	cpse	r24, r1
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <_ZN15OrangutanMotors4initEv+0x12>
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 9d 02 	sts	0x029D, r24
    15e0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN15OrangutanMotors5init2Ev>
    15e4:	08 95       	ret

000015e6 <_ZN15OrangutanMotors10setM1SpeedEi>:
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	ec 01       	movw	r28, r24
    15ec:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN15OrangutanMotors4initEv>
    15f0:	d7 ff       	sbrs	r29, 7
    15f2:	05 c0       	rjmp	.+10     	; 0x15fe <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    15f4:	d1 95       	neg	r29
    15f6:	c1 95       	neg	r28
    15f8:	d1 09       	sbc	r29, r1
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	cf 3f       	cpi	r28, 0xFF	; 255
    1602:	d1 05       	cpc	r29, r1
    1604:	19 f0       	breq	.+6      	; 0x160c <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1606:	14 f0       	brlt	.+4      	; 0x160c <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    1608:	cf ef       	ldi	r28, 0xFF	; 255
    160a:	d0 e0       	ldi	r29, 0x00	; 0
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1610:	18 bc       	out	0x28, r1	; 40
    1612:	c7 bd       	out	0x27, r28	; 39
    1614:	02 c0       	rjmp	.+4      	; 0x161a <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    1616:	c8 bd       	out	0x28, r28	; 40
    1618:	17 bc       	out	0x27, r1	; 39
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ec 01       	movw	r28, r24
    1626:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <_ZN15OrangutanMotors4initEv>
    162a:	d7 ff       	sbrs	r29, 7
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    162e:	d1 95       	neg	r29
    1630:	c1 95       	neg	r28
    1632:	d1 09       	sbc	r29, r1
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	01 c0       	rjmp	.+2      	; 0x163a <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	cf 3f       	cpi	r28, 0xFF	; 255
    163c:	d1 05       	cpc	r29, r1
    163e:	19 f0       	breq	.+6      	; 0x1646 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1640:	14 f0       	brlt	.+4      	; 0x1646 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1642:	cf ef       	ldi	r28, 0xFF	; 255
    1644:	d0 e0       	ldi	r29, 0x00	; 0
    1646:	88 23       	and	r24, r24
    1648:	29 f0       	breq	.+10     	; 0x1654 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    164a:	10 92 b4 00 	sts	0x00B4, r1
    164e:	c0 93 b3 00 	sts	0x00B3, r28
    1652:	04 c0       	rjmp	.+8      	; 0x165c <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1654:	c0 93 b4 00 	sts	0x00B4, r28
    1658:	10 92 b3 00 	sts	0x00B3, r1
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <_ZN15OrangutanMotors9setSpeedsEii>:
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	eb 01       	movw	r28, r22
    1668:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN15OrangutanMotors10setM1SpeedEi>
    166c:	ce 01       	movw	r24, r28
    166e:	0e 94 10 0b 	call	0x1620	; 0x1620 <_ZN15OrangutanMotors10setM2SpeedEi>
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <set_motors>:
    1678:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN15OrangutanMotors9setSpeedsEii>
    167c:	08 95       	ret

0000167e <_ZN20OrangutanPushbuttons5init2Ev>:
    167e:	84 b1       	in	r24, 0x04	; 4
    1680:	8d 7c       	andi	r24, 0xCD	; 205
    1682:	84 b9       	out	0x04, r24	; 4
    1684:	85 b1       	in	r24, 0x05	; 5
    1686:	82 63       	ori	r24, 0x32	; 50
    1688:	85 b9       	out	0x05, r24	; 5
    168a:	85 e0       	ldi	r24, 0x05	; 5
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	6f 93       	push	r22
    1690:	64 e0       	ldi	r22, 0x04	; 4
    1692:	6a 95       	dec	r22
    1694:	f1 f7       	brne	.-4      	; 0x1692 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1696:	6f 91       	pop	r22
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	c9 f7       	brne	.-14     	; 0x168e <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    169c:	08 95       	ret

0000169e <_ZN20OrangutanPushbuttons4initEv>:
    169e:	80 91 9e 02 	lds	r24, 0x029E
    16a2:	81 11       	cpse	r24, r1
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <_ZN20OrangutanPushbuttons4initEv+0x12>
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	80 93 9e 02 	sts	0x029E, r24
    16ac:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN20OrangutanPushbuttons5init2Ev>
    16b0:	08 95       	ret

000016b2 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    16b2:	cf 93       	push	r28
    16b4:	c8 2f       	mov	r28, r24
    16b6:	0e 94 4f 0b 	call	0x169e	; 0x169e <_ZN20OrangutanPushbuttons4initEv>
    16ba:	83 b1       	in	r24, 0x03	; 3
    16bc:	8c 23       	and	r24, r28
    16be:	e9 f3       	breq	.-6      	; 0x16ba <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    16c0:	8a e0       	ldi	r24, 0x0A	; 10
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <delay_ms>
    16c8:	83 b1       	in	r24, 0x03	; 3
    16ca:	8c 23       	and	r24, r28
    16cc:	b1 f3       	breq	.-20     	; 0x16ba <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    16ce:	83 b1       	in	r24, 0x03	; 3
    16d0:	8c 23       	and	r24, r28
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <wait_for_button_release>:
    16d6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    16da:	08 95       	ret

000016dc <_ZN20OrangutanPushbuttons9isPressedEh>:
    16dc:	a1 e0       	ldi	r26, 0x01	; 1
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e4 e7       	ldi	r30, 0x74	; 116
    16e2:	fb e0       	ldi	r31, 0x0B	; 11
    16e4:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x20>
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	0e 94 4f 0b 	call	0x169e	; 0x169e <_ZN20OrangutanPushbuttons4initEv>
    16ee:	93 b1       	in	r25, 0x03	; 3
    16f0:	90 95       	com	r25
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	89 23       	and	r24, r25
    16f6:	21 96       	adiw	r28, 0x01	; 1
    16f8:	e2 e0       	ldi	r30, 0x02	; 2
    16fa:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x20>

000016fe <button_is_pressed>:
    16fe:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <_ZN20OrangutanPushbuttons9isPressedEh>
    1702:	08 95       	ret

00001704 <__vector_9>:
    1704:	2f 92       	push	r2
    1706:	8f 93       	push	r24
    1708:	9f 93       	push	r25
    170a:	2f b6       	in	r2, 0x3f	; 63
    170c:	80 91 7c 01 	lds	r24, 0x017C
    1710:	90 91 7d 01 	lds	r25, 0x017D
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	80 93 7c 01 	sts	0x017C, r24
    171a:	90 93 7d 01 	sts	0x017D, r25
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	80 91 7e 01 	lds	r24, 0x017E
    1724:	89 1f       	adc	r24, r25
    1726:	80 93 7e 01 	sts	0x017E, r24
    172a:	90 91 76 01 	lds	r25, 0x0176
    172e:	9c 5f       	subi	r25, 0xFC	; 252
    1730:	90 93 76 01 	sts	0x0176, r25
    1734:	80 91 75 01 	lds	r24, 0x0175
    1738:	80 51       	subi	r24, 0x10	; 16
    173a:	97 42       	sbci	r25, 0x27	; 39
    173c:	c0 f0       	brcs	.+48     	; 0x176e <end>
    173e:	90 93 76 01 	sts	0x0176, r25
    1742:	80 93 75 01 	sts	0x0175, r24
    1746:	80 91 77 01 	lds	r24, 0x0177
    174a:	90 91 78 01 	lds	r25, 0x0178
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	80 93 77 01 	sts	0x0177, r24
    1754:	90 93 78 01 	sts	0x0178, r25
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	80 91 79 01 	lds	r24, 0x0179
    175e:	89 1f       	adc	r24, r25
    1760:	80 93 79 01 	sts	0x0179, r24
    1764:	80 91 7a 01 	lds	r24, 0x017A
    1768:	89 1f       	adc	r24, r25
    176a:	80 93 7a 01 	sts	0x017A, r24

0000176e <end>:
    176e:	2f be       	out	0x3f, r2	; 63
    1770:	9f 91       	pop	r25
    1772:	8f 91       	pop	r24
    1774:	2f 90       	pop	r2
    1776:	18 95       	reti

00001778 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1778:	28 ee       	ldi	r18, 0xE8	; 232
    177a:	33 e0       	ldi	r19, 0x03	; 3
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	48 f0       	brcs	.+18     	; 0x1792 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1780:	f9 01       	movw	r30, r18
    1782:	6f 93       	push	r22
    1784:	64 e0       	ldi	r22, 0x04	; 4
    1786:	6a 95       	dec	r22
    1788:	f1 f7       	brne	.-4      	; 0x1786 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    178a:	6f 91       	pop	r22
    178c:	31 97       	sbiw	r30, 0x01	; 1
    178e:	c9 f7       	brne	.-14     	; 0x1782 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    1790:	f5 cf       	rjmp	.-22     	; 0x177c <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1792:	08 95       	ret

00001794 <delay_ms>:
    1794:	0e 94 bc 0b 	call	0x1778	; 0x1778 <_ZN13OrangutanTime17delayMillisecondsEj>
    1798:	08 95       	ret

0000179a <_ZN13OrangutanTime5init2Ev>:
    179a:	e0 e7       	ldi	r30, 0x70	; 112
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	8e 7f       	andi	r24, 0xFE	; 254
    17a2:	80 83       	st	Z, r24
    17a4:	a0 eb       	ldi	r26, 0xB0	; 176
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	8c 91       	ld	r24, X
    17aa:	83 60       	ori	r24, 0x03	; 3
    17ac:	8c 93       	st	X, r24
    17ae:	a1 eb       	ldi	r26, 0xB1	; 177
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	8c 91       	ld	r24, X
    17b4:	80 7f       	andi	r24, 0xF0	; 240
    17b6:	8c 93       	st	X, r24
    17b8:	8c 91       	ld	r24, X
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	8c 93       	st	X, r24
    17be:	b8 9a       	sbi	0x17, 0	; 23
    17c0:	80 81       	ld	r24, Z
    17c2:	81 60       	ori	r24, 0x01	; 1
    17c4:	80 83       	st	Z, r24
    17c6:	78 94       	sei
    17c8:	08 95       	ret

000017ca <_ZN13OrangutanTime4initEv>:
    17ca:	80 91 9f 02 	lds	r24, 0x029F
    17ce:	81 11       	cpse	r24, r1
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <_ZN13OrangutanTime4initEv+0x12>
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	80 93 9f 02 	sts	0x029F, r24
    17d8:	0e 94 cd 0b 	call	0x179a	; 0x179a <_ZN13OrangutanTime5init2Ev>
    17dc:	08 95       	ret

000017de <_ZN13OrangutanTime5resetEv>:
    17de:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <_ZN13OrangutanTime4initEv>
    17e2:	e0 e7       	ldi	r30, 0x70	; 112
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8e 7f       	andi	r24, 0xFE	; 254
    17ea:	80 83       	st	Z, r24
    17ec:	10 92 77 01 	sts	0x0177, r1
    17f0:	10 92 78 01 	sts	0x0178, r1
    17f4:	10 92 79 01 	sts	0x0179, r1
    17f8:	10 92 7a 01 	sts	0x017A, r1
    17fc:	10 92 76 01 	sts	0x0176, r1
    1800:	10 92 75 01 	sts	0x0175, r1
    1804:	80 81       	ld	r24, Z
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	80 83       	st	Z, r24
    180a:	08 95       	ret

0000180c <calibrate_line_sensors>:
    180c:	68 2f       	mov	r22, r24
    180e:	8f e7       	ldi	r24, 0x7F	; 127
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN16PololuQTRSensors9calibrateEh>
    1816:	08 95       	ret

00001818 <read_line>:
    1818:	46 2f       	mov	r20, r22
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	bc 01       	movw	r22, r24
    181e:	8f e7       	ldi	r24, 0x7F	; 127
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	0e 94 bf 10 	call	0x217e	; 0x217e <_ZN16PololuQTRSensors8readLineEPjhh>
    1826:	08 95       	ret

00001828 <_ZN9Pololu3pi4initEjh>:
    1828:	0f 93       	push	r16
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	00 d0       	rcall	.+0      	; 0x1830 <_ZN9Pololu3pi4initEjh+0x8>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <_ZN9Pololu3pi4initEjh+0xa>
    1832:	1f 92       	push	r1
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	9c 01       	movw	r18, r24
    183a:	85 e0       	ldi	r24, 0x05	; 5
    183c:	e8 e3       	ldi	r30, 0x38	; 56
    183e:	f1 e0       	ldi	r31, 0x01	; 1
    1840:	de 01       	movw	r26, r28
    1842:	11 96       	adiw	r26, 0x01	; 1
    1844:	01 90       	ld	r0, Z+
    1846:	0d 92       	st	X+, r0
    1848:	8a 95       	dec	r24
    184a:	e1 f7       	brne	.-8      	; 0x1844 <_ZN9Pololu3pi4initEjh+0x1c>
    184c:	66 23       	and	r22, r22
    184e:	11 f0       	breq	.+4      	; 0x1854 <_ZN9Pololu3pi4initEjh+0x2c>
    1850:	0f ef       	ldi	r16, 0xFF	; 255
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <_ZN9Pololu3pi4initEjh+0x2e>
    1854:	03 e1       	ldi	r16, 0x13	; 19
    1856:	45 e0       	ldi	r20, 0x05	; 5
    1858:	be 01       	movw	r22, r28
    185a:	6f 5f       	subi	r22, 0xFF	; 255
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	8f e7       	ldi	r24, 0x7F	; 127
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1866:	8f e7       	ldi	r24, 0x7F	; 127
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	0e 94 bd 0c 	call	0x197a	; 0x197a <_ZN16PololuQTRSensors11emittersOffEv>
    186e:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN13OrangutanTime5resetEv>
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	0f 91       	pop	r16
    1882:	08 95       	ret

00001884 <pololu_3pi_init>:
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZN9Pololu3pi4initEjh>
    188a:	08 95       	ret

0000188c <_GLOBAL__sub_D_pololu_3pi_init>:
    188c:	8f e7       	ldi	r24, 0x7F	; 127
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	0e 94 34 11 	call	0x2268	; 0x2268 <_ZN16PololuQTRSensorsD1Ev>
    1894:	08 95       	ret

00001896 <delay_us>:
    1896:	6f 93       	push	r22
    1898:	64 e0       	ldi	r22, 0x04	; 4
    189a:	6a 95       	dec	r22
    189c:	f1 f7       	brne	.-4      	; 0x189a <delay_us+0x4>
    189e:	6f 91       	pop	r22
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	c9 f7       	brne	.-14     	; 0x1896 <delay_us>
    18a4:	08 95       	ret

000018a6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    18a6:	fc 01       	movw	r30, r24
    18a8:	11 82       	std	Z+1, r1	; 0x01
    18aa:	10 82       	st	Z, r1
    18ac:	13 82       	std	Z+3, r1	; 0x03
    18ae:	12 82       	std	Z+2, r1	; 0x02
    18b0:	15 82       	std	Z+5, r1	; 0x05
    18b2:	14 82       	std	Z+4, r1	; 0x04
    18b4:	16 82       	std	Z+6, r1	; 0x06
    18b6:	68 30       	cpi	r22, 0x08	; 8
    18b8:	68 f4       	brcc	.+26     	; 0x18d4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    18ba:	89 e2       	ldi	r24, 0x29	; 41
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	80 83       	st	Z, r24
    18c2:	8b e2       	ldi	r24, 0x2B	; 43
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	93 83       	std	Z+3, r25	; 0x03
    18c8:	82 83       	std	Z+2, r24	; 0x02
    18ca:	8a e2       	ldi	r24, 0x2A	; 42
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	95 83       	std	Z+5, r25	; 0x05
    18d0:	84 83       	std	Z+4, r24	; 0x04
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18d4:	6e 30       	cpi	r22, 0x0E	; 14
    18d6:	70 f4       	brcc	.+28     	; 0x18f4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    18d8:	83 e2       	ldi	r24, 0x23	; 35
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	85 e2       	ldi	r24, 0x25	; 37
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	93 83       	std	Z+3, r25	; 0x03
    18e6:	82 83       	std	Z+2, r24	; 0x02
    18e8:	84 e2       	ldi	r24, 0x24	; 36
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	95 83       	std	Z+5, r25	; 0x05
    18ee:	84 83       	std	Z+4, r24	; 0x04
    18f0:	68 50       	subi	r22, 0x08	; 8
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18f4:	65 31       	cpi	r22, 0x15	; 21
    18f6:	98 f4       	brcc	.+38     	; 0x191e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    18f8:	86 e2       	ldi	r24, 0x26	; 38
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
    1900:	88 e2       	ldi	r24, 0x28	; 40
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	93 83       	std	Z+3, r25	; 0x03
    1906:	82 83       	std	Z+2, r24	; 0x02
    1908:	87 e2       	ldi	r24, 0x27	; 39
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	95 83       	std	Z+5, r25	; 0x05
    190e:	84 83       	std	Z+4, r24	; 0x04
    1910:	6e 50       	subi	r22, 0x0E	; 14
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    1916:	88 0f       	add	r24, r24
    1918:	6a 95       	dec	r22
    191a:	ea f7       	brpl	.-6      	; 0x1916 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    191c:	86 83       	std	Z+6, r24	; 0x06
    191e:	08 95       	ret

00001920 <_ZN16PololuQTRSensors4initEhhh>:
    1920:	a7 e0       	ldi	r26, 0x07	; 7
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e6 e9       	ldi	r30, 0x96	; 150
    1926:	fc e0       	ldi	r31, 0x0C	; 12
    1928:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x1c>
    192c:	8c 01       	movw	r16, r24
    192e:	fc 01       	movw	r30, r24
    1930:	11 82       	std	Z+1, r1	; 0x01
    1932:	10 82       	st	Z, r1
    1934:	13 82       	std	Z+3, r1	; 0x03
    1936:	12 82       	std	Z+2, r1	; 0x02
    1938:	15 82       	std	Z+5, r1	; 0x05
    193a:	14 82       	std	Z+4, r1	; 0x04
    193c:	17 82       	std	Z+7, r1	; 0x07
    193e:	16 82       	std	Z+6, r1	; 0x06
    1940:	61 31       	cpi	r22, 0x11	; 17
    1942:	18 f0       	brcs	.+6      	; 0x194a <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1944:	80 e1       	ldi	r24, 0x10	; 16
    1946:	80 87       	std	Z+8, r24	; 0x08
    1948:	02 c0       	rjmp	.+4      	; 0x194e <_ZN16PololuQTRSensors4initEhhh+0x2e>
    194a:	fc 01       	movw	r30, r24
    194c:	60 87       	std	Z+8, r22	; 0x08
    194e:	f8 01       	movw	r30, r16
    1950:	20 8b       	std	Z+16, r18	; 0x10
    1952:	64 2f       	mov	r22, r20
    1954:	ce 01       	movw	r24, r28
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    195c:	8f 81       	ldd	r24, Y+7	; 0x07
    195e:	f8 01       	movw	r30, r16
    1960:	81 87       	std	Z+9, r24	; 0x09
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	93 87       	std	Z+11, r25	; 0x0b
    1968:	82 87       	std	Z+10, r24	; 0x0a
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	95 87       	std	Z+13, r25	; 0x0d
    1970:	84 87       	std	Z+12, r24	; 0x0c
    1972:	27 96       	adiw	r28, 0x07	; 7
    1974:	e4 e0       	ldi	r30, 0x04	; 4
    1976:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x1c>

0000197a <_ZN16PololuQTRSensors11emittersOffEv>:
    197a:	fc 01       	movw	r30, r24
    197c:	a4 85       	ldd	r26, Z+12	; 0x0c
    197e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1980:	10 97       	sbiw	r26, 0x00	; 0
    1982:	79 f0       	breq	.+30     	; 0x19a2 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1984:	8c 91       	ld	r24, X
    1986:	91 85       	ldd	r25, Z+9	; 0x09
    1988:	89 2b       	or	r24, r25
    198a:	8c 93       	st	X, r24
    198c:	a2 85       	ldd	r26, Z+10	; 0x0a
    198e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1990:	9c 91       	ld	r25, X
    1992:	81 85       	ldd	r24, Z+9	; 0x09
    1994:	80 95       	com	r24
    1996:	89 23       	and	r24, r25
    1998:	8c 93       	st	X, r24
    199a:	88 ec       	ldi	r24, 0xC8	; 200
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <delay_us>
    19a2:	08 95       	ret

000019a4 <_ZN16PololuQTRSensors10emittersOnEv>:
    19a4:	fc 01       	movw	r30, r24
    19a6:	a4 85       	ldd	r26, Z+12	; 0x0c
    19a8:	b5 85       	ldd	r27, Z+13	; 0x0d
    19aa:	10 97       	sbiw	r26, 0x00	; 0
    19ac:	71 f0       	breq	.+28     	; 0x19ca <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    19ae:	8c 91       	ld	r24, X
    19b0:	91 85       	ldd	r25, Z+9	; 0x09
    19b2:	89 2b       	or	r24, r25
    19b4:	8c 93       	st	X, r24
    19b6:	a2 85       	ldd	r26, Z+10	; 0x0a
    19b8:	b3 85       	ldd	r27, Z+11	; 0x0b
    19ba:	8c 91       	ld	r24, X
    19bc:	91 85       	ldd	r25, Z+9	; 0x09
    19be:	89 2b       	or	r24, r25
    19c0:	8c 93       	st	X, r24
    19c2:	88 ec       	ldi	r24, 0xC8	; 200
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <delay_us>
    19ca:	08 95       	ret

000019cc <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    19cc:	a7 e0       	ldi	r26, 0x07	; 7
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ec ee       	ldi	r30, 0xEC	; 236
    19d2:	fc e0       	ldi	r31, 0x0C	; 12
    19d4:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__prologue_saves__+0x6>
    19d8:	7c 01       	movw	r14, r24
    19da:	4b 01       	movw	r8, r22
    19dc:	64 2f       	mov	r22, r20
    19de:	39 01       	movw	r6, r18
    19e0:	40 2f       	mov	r20, r16
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN16PololuQTRSensors4initEhhh>
    19e8:	87 01       	movw	r16, r14
    19ea:	0f 5b       	subi	r16, 0xBF	; 191
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	f8 01       	movw	r30, r16
    19f0:	10 82       	st	Z, r1
    19f2:	67 01       	movw	r12, r14
    19f4:	f2 e4       	ldi	r31, 0x42	; 66
    19f6:	cf 0e       	add	r12, r31
    19f8:	d1 1c       	adc	r13, r1
    19fa:	f6 01       	movw	r30, r12
    19fc:	10 82       	st	Z, r1
    19fe:	57 01       	movw	r10, r14
    1a00:	f3 e4       	ldi	r31, 0x43	; 67
    1a02:	af 0e       	add	r10, r31
    1a04:	b1 1c       	adc	r11, r1
    1a06:	f5 01       	movw	r30, r10
    1a08:	10 82       	st	Z, r1
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	77 86       	std	Z+15, r7	; 0x0f
    1a0e:	66 86       	std	Z+14, r6	; 0x0e
    1a10:	51 2c       	mov	r5, r1
    1a12:	f7 01       	movw	r30, r14
    1a14:	80 85       	ldd	r24, Z+8	; 0x08
    1a16:	58 16       	cp	r5, r24
    1a18:	50 f5       	brcc	.+84     	; 0x1a6e <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1a1a:	65 2c       	mov	r6, r5
    1a1c:	71 2c       	mov	r7, r1
    1a1e:	f4 01       	movw	r30, r8
    1a20:	e6 0d       	add	r30, r6
    1a22:	f7 1d       	adc	r31, r7
    1a24:	60 81       	ld	r22, Z
    1a26:	ce 01       	movw	r24, r28
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1a2e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a30:	f7 01       	movw	r30, r14
    1a32:	e6 0d       	add	r30, r6
    1a34:	f7 1d       	adc	r31, r7
    1a36:	21 8b       	std	Z+17, r18	; 0x11
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	f3 01       	movw	r30, r6
    1a3e:	ee 0f       	add	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	ee 0d       	add	r30, r14
    1a44:	ff 1d       	adc	r31, r15
    1a46:	92 a3       	std	Z+34, r25	; 0x22
    1a48:	81 a3       	std	Z+33, r24	; 0x21
    1a4a:	83 32       	cpi	r24, 0x23	; 35
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1a50:	f8 01       	movw	r30, r16
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a54:	86 32       	cpi	r24, 0x26	; 38
    1a56:	91 05       	cpc	r25, r1
    1a58:	11 f4       	brne	.+4      	; 0x1a5e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1a5a:	f6 01       	movw	r30, r12
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a5e:	89 97       	sbiw	r24, 0x29	; 41
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1a62:	f5 01       	movw	r30, r10
    1a64:	80 81       	ld	r24, Z
    1a66:	82 2b       	or	r24, r18
    1a68:	80 83       	st	Z, r24
    1a6a:	53 94       	inc	r5
    1a6c:	d2 cf       	rjmp	.-92     	; 0x1a12 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1a6e:	27 96       	adiw	r28, 0x07	; 7
    1a70:	ef e0       	ldi	r30, 0x0F	; 15
    1a72:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__epilogue_restores__+0x6>

00001a76 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1a76:	a0 e0       	ldi	r26, 0x00	; 0
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e1 e4       	ldi	r30, 0x41	; 65
    1a7c:	fd e0       	ldi	r31, 0x0D	; 13
    1a7e:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0xa>
    1a82:	ec 01       	movw	r28, r24
    1a84:	5b 01       	movw	r10, r22
    1a86:	6c 01       	movw	r12, r24
    1a88:	81 e4       	ldi	r24, 0x41	; 65
    1a8a:	c8 0e       	add	r12, r24
    1a8c:	d1 1c       	adc	r13, r1
    1a8e:	f6 01       	movw	r30, r12
    1a90:	80 80       	ld	r8, Z
    1a92:	7e 01       	movw	r14, r28
    1a94:	f2 e4       	ldi	r31, 0x42	; 66
    1a96:	ef 0e       	add	r14, r31
    1a98:	f1 1c       	adc	r15, r1
    1a9a:	f7 01       	movw	r30, r14
    1a9c:	70 80       	ld	r7, Z
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	0d 5b       	subi	r16, 0xBD	; 189
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	90 80       	ld	r9, Z
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	98 85       	ldd	r25, Y+8	; 0x08
    1aac:	89 17       	cp	r24, r25
    1aae:	48 f4       	brcc	.+18     	; 0x1ac2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    1ab0:	f5 01       	movw	r30, r10
    1ab2:	e8 0f       	add	r30, r24
    1ab4:	f1 1d       	adc	r31, r1
    1ab6:	e8 0f       	add	r30, r24
    1ab8:	f1 1d       	adc	r31, r1
    1aba:	11 82       	std	Z+1, r1	; 0x01
    1abc:	10 82       	st	Z, r1
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	f4 cf       	rjmp	.-24     	; 0x1aaa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1ac2:	84 b1       	in	r24, 0x04	; 4
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	90 81       	ld	r25, Z
    1ac8:	89 2b       	or	r24, r25
    1aca:	84 b9       	out	0x04, r24	; 4
    1acc:	87 b1       	in	r24, 0x07	; 7
    1ace:	f7 01       	movw	r30, r14
    1ad0:	90 81       	ld	r25, Z
    1ad2:	89 2b       	or	r24, r25
    1ad4:	87 b9       	out	0x07, r24	; 7
    1ad6:	8a b1       	in	r24, 0x0a	; 10
    1ad8:	f8 01       	movw	r30, r16
    1ada:	90 81       	ld	r25, Z
    1adc:	89 2b       	or	r24, r25
    1ade:	8a b9       	out	0x0a, r24	; 10
    1ae0:	85 b1       	in	r24, 0x05	; 5
    1ae2:	f6 01       	movw	r30, r12
    1ae4:	90 81       	ld	r25, Z
    1ae6:	89 2b       	or	r24, r25
    1ae8:	85 b9       	out	0x05, r24	; 5
    1aea:	88 b1       	in	r24, 0x08	; 8
    1aec:	f7 01       	movw	r30, r14
    1aee:	90 81       	ld	r25, Z
    1af0:	89 2b       	or	r24, r25
    1af2:	88 b9       	out	0x08, r24	; 8
    1af4:	8b b1       	in	r24, 0x0b	; 11
    1af6:	f8 01       	movw	r30, r16
    1af8:	90 81       	ld	r25, Z
    1afa:	89 2b       	or	r24, r25
    1afc:	8b b9       	out	0x0b, r24	; 11
    1afe:	8a e0       	ldi	r24, 0x0A	; 10
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 4b 0c 	call	0x1896	; 0x1896 <delay_us>
    1b06:	94 b1       	in	r25, 0x04	; 4
    1b08:	f6 01       	movw	r30, r12
    1b0a:	80 81       	ld	r24, Z
    1b0c:	80 95       	com	r24
    1b0e:	89 23       	and	r24, r25
    1b10:	84 b9       	out	0x04, r24	; 4
    1b12:	97 b1       	in	r25, 0x07	; 7
    1b14:	f7 01       	movw	r30, r14
    1b16:	80 81       	ld	r24, Z
    1b18:	80 95       	com	r24
    1b1a:	89 23       	and	r24, r25
    1b1c:	87 b9       	out	0x07, r24	; 7
    1b1e:	9a b1       	in	r25, 0x0a	; 10
    1b20:	f8 01       	movw	r30, r16
    1b22:	80 81       	ld	r24, Z
    1b24:	80 95       	com	r24
    1b26:	89 23       	and	r24, r25
    1b28:	8a b9       	out	0x0a, r24	; 10
    1b2a:	95 b1       	in	r25, 0x05	; 5
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 95       	com	r24
    1b32:	89 23       	and	r24, r25
    1b34:	85 b9       	out	0x05, r24	; 5
    1b36:	98 b1       	in	r25, 0x08	; 8
    1b38:	f7 01       	movw	r30, r14
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 95       	com	r24
    1b3e:	89 23       	and	r24, r25
    1b40:	88 b9       	out	0x08, r24	; 8
    1b42:	9b b1       	in	r25, 0x0b	; 11
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 81       	ld	r24, Z
    1b48:	80 95       	com	r24
    1b4a:	89 23       	and	r24, r25
    1b4c:	8b b9       	out	0x0b, r24	; 11
    1b4e:	e0 90 b0 00 	lds	r14, 0x00B0
    1b52:	d0 90 b1 00 	lds	r13, 0x00B1
    1b56:	80 91 b0 00 	lds	r24, 0x00B0
    1b5a:	83 60       	ori	r24, 0x03	; 3
    1b5c:	80 93 b0 00 	sts	0x00B0, r24
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	80 93 b1 00 	sts	0x00B1, r24
    1b66:	40 91 b2 00 	lds	r20, 0x00B2
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b70:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b72:	82 17       	cp	r24, r18
    1b74:	93 07       	cpc	r25, r19
    1b76:	20 f5       	brcc	.+72     	; 0x1bc0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1b78:	c0 90 b2 00 	lds	r12, 0x00B2
    1b7c:	2c 2d       	mov	r18, r12
    1b7e:	24 1b       	sub	r18, r20
    1b80:	82 0f       	add	r24, r18
    1b82:	91 1d       	adc	r25, r1
    1b84:	03 b1       	in	r16, 0x03	; 3
    1b86:	08 11       	cpse	r16, r8
    1b88:	32 c0       	rjmp	.+100    	; 0x1bee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b8a:	f6 b0       	in	r15, 0x06	; 6
    1b8c:	f7 10       	cpse	r15, r7
    1b8e:	2f c0       	rjmp	.+94     	; 0x1bee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b90:	29 b1       	in	r18, 0x09	; 9
    1b92:	29 11       	cpse	r18, r9
    1b94:	2c c0       	rjmp	.+88     	; 0x1bee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b96:	10 c0       	rjmp	.+32     	; 0x1bb8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1b98:	21 2f       	mov	r18, r17
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	44 0f       	add	r20, r20
    1ba0:	55 1f       	adc	r21, r21
    1ba2:	f5 01       	movw	r30, r10
    1ba4:	e4 0f       	add	r30, r20
    1ba6:	f5 1f       	adc	r31, r21
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	67 2b       	or	r22, r23
    1bae:	21 f1       	breq	.+72     	; 0x1bf8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1bb0:	1f 5f       	subi	r17, 0xFF	; 255
    1bb2:	28 85       	ldd	r18, Y+8	; 0x08
    1bb4:	12 17       	cp	r17, r18
    1bb6:	80 f3       	brcs	.-32     	; 0x1b98 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1bb8:	7f 2c       	mov	r7, r15
    1bba:	80 2e       	mov	r8, r16
    1bbc:	4c 2d       	mov	r20, r12
    1bbe:	d7 cf       	rjmp	.-82     	; 0x1b6e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1bc0:	e0 92 b0 00 	sts	0x00B0, r14
    1bc4:	d0 92 b1 00 	sts	0x00B1, r13
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	88 85       	ldd	r24, Y+8	; 0x08
    1bcc:	28 17       	cp	r18, r24
    1bce:	30 f5       	brcc	.+76     	; 0x1c1c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1bd0:	f5 01       	movw	r30, r10
    1bd2:	e2 0f       	add	r30, r18
    1bd4:	f1 1d       	adc	r31, r1
    1bd6:	e2 0f       	add	r30, r18
    1bd8:	f1 1d       	adc	r31, r1
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	89 2b       	or	r24, r25
    1be0:	21 f4       	brne	.+8      	; 0x1bea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1be2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be6:	91 83       	std	Z+1, r25	; 0x01
    1be8:	80 83       	st	Z, r24
    1bea:	2f 5f       	subi	r18, 0xFF	; 255
    1bec:	ee cf       	rjmp	.-36     	; 0x1bca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1bee:	03 b1       	in	r16, 0x03	; 3
    1bf0:	f6 b0       	in	r15, 0x06	; 6
    1bf2:	99 b0       	in	r9, 0x09	; 9
    1bf4:	10 e0       	ldi	r17, 0x00	; 0
    1bf6:	dd cf       	rjmp	.-70     	; 0x1bb2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1bf8:	de 01       	movw	r26, r28
    1bfa:	a4 0f       	add	r26, r20
    1bfc:	b5 1f       	adc	r27, r21
    1bfe:	91 96       	adiw	r26, 0x21	; 33
    1c00:	0d 90       	ld	r0, X+
    1c02:	bc 91       	ld	r27, X
    1c04:	a0 2d       	mov	r26, r0
    1c06:	4c 91       	ld	r20, X
    1c08:	de 01       	movw	r26, r28
    1c0a:	a2 0f       	add	r26, r18
    1c0c:	b3 1f       	adc	r27, r19
    1c0e:	51 96       	adiw	r26, 0x11	; 17
    1c10:	2c 91       	ld	r18, X
    1c12:	42 23       	and	r20, r18
    1c14:	69 f6       	brne	.-102    	; 0x1bb0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	ca cf       	rjmp	.-108    	; 0x1bb0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	ed e0       	ldi	r30, 0x0D	; 13
    1c22:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0xa>

00001c26 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	fc 01       	movw	r30, r24
    1c34:	9b 01       	movw	r18, r22
    1c36:	f0 90 7c 00 	lds	r15, 0x007C
    1c3a:	00 91 7a 00 	lds	r16, 0x007A
    1c3e:	47 b1       	in	r20, 0x07	; 7
    1c40:	18 b1       	in	r17, 0x08	; 8
    1c42:	80 91 7a 00 	lds	r24, 0x007A
    1c46:	86 fd       	sbrc	r24, 6
    1c48:	fc cf       	rjmp	.-8      	; 0x1c42 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 85       	ldd	r25, Z+8	; 0x08
    1c4e:	89 17       	cp	r24, r25
    1c50:	48 f4       	brcc	.+18     	; 0x1c64 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1c52:	d9 01       	movw	r26, r18
    1c54:	a8 0f       	add	r26, r24
    1c56:	b1 1d       	adc	r27, r1
    1c58:	a8 0f       	add	r26, r24
    1c5a:	b1 1d       	adc	r27, r1
    1c5c:	1d 92       	st	X+, r1
    1c5e:	1c 92       	st	X, r1
    1c60:	8f 5f       	subi	r24, 0xFF	; 255
    1c62:	f4 cf       	rjmp	.-24     	; 0x1c4c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1c64:	97 b1       	in	r25, 0x07	; 7
    1c66:	82 a1       	ldd	r24, Z+34	; 0x22
    1c68:	80 95       	com	r24
    1c6a:	89 23       	and	r24, r25
    1c6c:	87 b9       	out	0x07, r24	; 7
    1c6e:	98 b1       	in	r25, 0x08	; 8
    1c70:	82 a1       	ldd	r24, Z+34	; 0x22
    1c72:	80 95       	com	r24
    1c74:	89 23       	and	r24, r25
    1c76:	88 b9       	out	0x08, r24	; 8
    1c78:	87 e8       	ldi	r24, 0x87	; 135
    1c7a:	80 93 7a 00 	sts	0x007A, r24
    1c7e:	e1 2c       	mov	r14, r1
    1c80:	81 a1       	ldd	r24, Z+33	; 0x21
    1c82:	e8 16       	cp	r14, r24
    1c84:	10 f0       	brcs	.+4      	; 0x1c8a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1c86:	e1 2c       	mov	r14, r1
    1c88:	29 c0       	rjmp	.+82     	; 0x1cdc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1c8a:	50 e0       	ldi	r21, 0x00	; 0
    1c8c:	80 85       	ldd	r24, Z+8	; 0x08
    1c8e:	58 17       	cp	r21, r24
    1c90:	18 f5       	brcc	.+70     	; 0x1cd8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1c92:	a5 2f       	mov	r26, r21
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	ef 01       	movw	r28, r30
    1c98:	ca 0f       	add	r28, r26
    1c9a:	db 1f       	adc	r29, r27
    1c9c:	89 89       	ldd	r24, Y+17	; 0x11
    1c9e:	80 64       	ori	r24, 0x40	; 64
    1ca0:	80 93 7c 00 	sts	0x007C, r24
    1ca4:	80 91 7a 00 	lds	r24, 0x007A
    1ca8:	80 64       	ori	r24, 0x40	; 64
    1caa:	80 93 7a 00 	sts	0x007A, r24
    1cae:	80 91 7a 00 	lds	r24, 0x007A
    1cb2:	86 fd       	sbrc	r24, 6
    1cb4:	fc cf       	rjmp	.-8      	; 0x1cae <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1cb6:	60 91 78 00 	lds	r22, 0x0078
    1cba:	70 91 79 00 	lds	r23, 0x0079
    1cbe:	aa 0f       	add	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	a2 0f       	add	r26, r18
    1cc4:	b3 1f       	adc	r27, r19
    1cc6:	8d 91       	ld	r24, X+
    1cc8:	9c 91       	ld	r25, X
    1cca:	11 97       	sbiw	r26, 0x01	; 1
    1ccc:	86 0f       	add	r24, r22
    1cce:	97 1f       	adc	r25, r23
    1cd0:	8d 93       	st	X+, r24
    1cd2:	9c 93       	st	X, r25
    1cd4:	5f 5f       	subi	r21, 0xFF	; 255
    1cd6:	da cf       	rjmp	.-76     	; 0x1c8c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1cd8:	e3 94       	inc	r14
    1cda:	d2 cf       	rjmp	.-92     	; 0x1c80 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1cdc:	80 85       	ldd	r24, Z+8	; 0x08
    1cde:	e8 16       	cp	r14, r24
    1ce0:	a0 f4       	brcc	.+40     	; 0x1d0a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1ce2:	e9 01       	movw	r28, r18
    1ce4:	ce 0d       	add	r28, r14
    1ce6:	d1 1d       	adc	r29, r1
    1ce8:	ce 0d       	add	r28, r14
    1cea:	d1 1d       	adc	r29, r1
    1cec:	61 a1       	ldd	r22, Z+33	; 0x21
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	95 95       	asr	r25
    1cf4:	87 95       	ror	r24
    1cf6:	a8 81       	ld	r26, Y
    1cf8:	b9 81       	ldd	r27, Y+1	; 0x01
    1cfa:	8a 0f       	add	r24, r26
    1cfc:	9b 1f       	adc	r25, r27
    1cfe:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
    1d02:	79 83       	std	Y+1, r23	; 0x01
    1d04:	68 83       	st	Y, r22
    1d06:	e3 94       	inc	r14
    1d08:	e9 cf       	rjmp	.-46     	; 0x1cdc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1d0a:	f0 92 7c 00 	sts	0x007C, r15
    1d0e:	00 93 7a 00 	sts	0x007A, r16
    1d12:	18 b9       	out	0x08, r17	; 8
    1d14:	47 b9       	out	0x07, r20	; 7
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	e6 e0       	ldi	r30, 0x06	; 6
    1d1c:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x18>

00001d20 <_ZN16PololuQTRSensors4readEPjh>:
    1d20:	a0 e2       	ldi	r26, 0x20	; 32
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e6 e9       	ldi	r30, 0x96	; 150
    1d26:	fe e0       	ldi	r31, 0x0E	; 14
    1d28:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x16>
    1d2c:	8c 01       	movw	r16, r24
    1d2e:	7b 01       	movw	r14, r22
    1d30:	d4 2e       	mov	r13, r20
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	84 0f       	add	r24, r20
    1d36:	82 30       	cpi	r24, 0x02	; 2
    1d38:	18 f4       	brcc	.+6      	; 0x1d40 <_ZN16PololuQTRSensors4readEPjh+0x20>
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <_ZN16PololuQTRSensors10emittersOnEv>
    1d40:	d8 01       	movw	r26, r16
    1d42:	50 96       	adiw	r26, 0x10	; 16
    1d44:	8c 91       	ld	r24, X
    1d46:	b7 01       	movw	r22, r14
    1d48:	81 11       	cpse	r24, r1
    1d4a:	10 c0       	rjmp	.+32     	; 0x1d6c <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d52:	c8 01       	movw	r24, r16
    1d54:	0e 94 bd 0c 	call	0x197a	; 0x197a <_ZN16PololuQTRSensors11emittersOffEv>
    1d58:	b2 e0       	ldi	r27, 0x02	; 2
    1d5a:	db 12       	cpse	r13, r27
    1d5c:	3a c0       	rjmp	.+116    	; 0x1dd2 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d5e:	be 01       	movw	r22, r28
    1d60:	6f 5f       	subi	r22, 0xFF	; 255
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	c8 01       	movw	r24, r16
    1d66:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d72:	c8 01       	movw	r24, r16
    1d74:	0e 94 bd 0c 	call	0x197a	; 0x197a <_ZN16PololuQTRSensors11emittersOffEv>
    1d78:	e2 e0       	ldi	r30, 0x02	; 2
    1d7a:	de 12       	cpse	r13, r30
    1d7c:	2a c0       	rjmp	.+84     	; 0x1dd2 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d7e:	be 01       	movw	r22, r28
    1d80:	6f 5f       	subi	r22, 0xFF	; 255
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	c8 01       	movw	r24, r16
    1d86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	80 85       	ldd	r24, Z+8	; 0x08
    1d90:	48 17       	cp	r20, r24
    1d92:	f8 f4       	brcc	.+62     	; 0x1dd2 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d94:	84 2f       	mov	r24, r20
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	f7 01       	movw	r30, r14
    1d9e:	e8 0f       	add	r30, r24
    1da0:	f9 1f       	adc	r31, r25
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	2c 0f       	add	r18, r28
    1da8:	3d 1f       	adc	r19, r29
    1daa:	82 0f       	add	r24, r18
    1dac:	93 1f       	adc	r25, r19
    1dae:	d8 01       	movw	r26, r16
    1db0:	1e 96       	adiw	r26, 0x0e	; 14
    1db2:	2d 91       	ld	r18, X+
    1db4:	3c 91       	ld	r19, X
    1db6:	1f 97       	sbiw	r26, 0x0f	; 15
    1db8:	dc 01       	movw	r26, r24
    1dba:	8d 91       	ld	r24, X+
    1dbc:	9c 91       	ld	r25, X
    1dbe:	28 1b       	sub	r18, r24
    1dc0:	39 0b       	sbc	r19, r25
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	82 0f       	add	r24, r18
    1dc8:	93 1f       	adc	r25, r19
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	4f 5f       	subi	r20, 0xFF	; 255
    1dd0:	dd cf       	rjmp	.-70     	; 0x1d8c <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1dd2:	a0 96       	adiw	r28, 0x20	; 32
    1dd4:	e7 e0       	ldi	r30, 0x07	; 7
    1dd6:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x16>

00001dda <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1dda:	2f 92       	push	r2
    1ddc:	3f 92       	push	r3
    1dde:	5f 92       	push	r5
    1de0:	6f 92       	push	r6
    1de2:	7f 92       	push	r7
    1de4:	8f 92       	push	r8
    1de6:	9f 92       	push	r9
    1de8:	af 92       	push	r10
    1dea:	bf 92       	push	r11
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	c0 56       	subi	r28, 0x60	; 96
    1e02:	d1 09       	sbc	r29, r1
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	8c 01       	movw	r16, r24
    1e10:	4b 01       	movw	r8, r22
    1e12:	5a 01       	movw	r10, r20
    1e14:	52 2e       	mov	r5, r18
    1e16:	da 01       	movw	r26, r20
    1e18:	8d 91       	ld	r24, X+
    1e1a:	9c 91       	ld	r25, X
    1e1c:	89 2b       	or	r24, r25
    1e1e:	31 f0       	breq	.+12     	; 0x1e2c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1e20:	f4 01       	movw	r30, r8
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	89 2b       	or	r24, r25
    1e28:	f1 f4       	brne	.+60     	; 0x1e66 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1e2a:	24 c0       	rjmp	.+72     	; 0x1e74 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1e2c:	d8 01       	movw	r26, r16
    1e2e:	18 96       	adiw	r26, 0x08	; 8
    1e30:	8c 91       	ld	r24, X
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0e 94 26 12 	call	0x244c	; 0x244c <malloc>
    1e3c:	f5 01       	movw	r30, r10
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1e46:	b1 c0       	rjmp	.+354    	; 0x1faa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e48:	fc 01       	movw	r30, r24
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	d8 01       	movw	r26, r16
    1e50:	18 96       	adiw	r26, 0x08	; 8
    1e52:	8c 91       	ld	r24, X
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	28 17       	cp	r18, r24
    1e58:	39 07       	cpc	r19, r25
    1e5a:	14 f7       	brge	.-60     	; 0x1e20 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1e5c:	11 92       	st	Z+, r1
    1e5e:	11 92       	st	Z+, r1
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	f4 cf       	rjmp	.-24     	; 0x1e4e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1e66:	e1 2c       	mov	r14, r1
    1e68:	f1 2c       	mov	r15, r1
    1e6a:	6e 01       	movw	r12, r28
    1e6c:	b1 e2       	ldi	r27, 0x21	; 33
    1e6e:	cb 0e       	add	r12, r27
    1e70:	d1 1c       	adc	r13, r1
    1e72:	21 c0       	rjmp	.+66     	; 0x1eb6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1e74:	f8 01       	movw	r30, r16
    1e76:	80 85       	ldd	r24, Z+8	; 0x08
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	0e 94 26 12 	call	0x244c	; 0x244c <malloc>
    1e82:	d4 01       	movw	r26, r8
    1e84:	8d 93       	st	X+, r24
    1e86:	9c 93       	st	X, r25
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1e8c:	8e c0       	rjmp	.+284    	; 0x1faa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	d8 01       	movw	r26, r16
    1e96:	18 96       	adiw	r26, 0x08	; 8
    1e98:	8c 91       	ld	r24, X
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	28 17       	cp	r18, r24
    1e9e:	39 07       	cpc	r19, r25
    1ea0:	14 f7       	brge	.-60     	; 0x1e66 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1ea2:	d8 01       	movw	r26, r16
    1ea4:	1e 96       	adiw	r26, 0x0e	; 14
    1ea6:	8d 91       	ld	r24, X+
    1ea8:	9c 91       	ld	r25, X
    1eaa:	1f 97       	sbiw	r26, 0x0f	; 15
    1eac:	81 93       	st	Z+, r24
    1eae:	91 93       	st	Z+, r25
    1eb0:	2f 5f       	subi	r18, 0xFF	; 255
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	ef cf       	rjmp	.-34     	; 0x1e94 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1eb6:	45 2d       	mov	r20, r5
    1eb8:	be 01       	movw	r22, r28
    1eba:	6f 5b       	subi	r22, 0xBF	; 191
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	c8 01       	movw	r24, r16
    1ec0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN16PololuQTRSensors4readEPjh>
    1ec4:	f8 01       	movw	r30, r16
    1ec6:	60 84       	ldd	r6, Z+8	; 0x08
    1ec8:	71 2c       	mov	r7, r1
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 5b       	subi	r30, 0xBF	; 191
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	c6 01       	movw	r24, r12
    1ed2:	9e 01       	movw	r18, r28
    1ed4:	2f 5f       	subi	r18, 0xFF	; 255
    1ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed8:	19 01       	movw	r2, r18
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	26 15       	cp	r18, r6
    1ee0:	37 05       	cpc	r19, r7
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1ee4:	e1 14       	cp	r14, r1
    1ee6:	f1 04       	cpc	r15, r1
    1ee8:	89 f0       	breq	.+34     	; 0x1f0c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1eea:	dc 01       	movw	r26, r24
    1eec:	6d 91       	ld	r22, X+
    1eee:	7c 91       	ld	r23, X
    1ef0:	40 81       	ld	r20, Z
    1ef2:	51 81       	ldd	r21, Z+1	; 0x01
    1ef4:	64 17       	cp	r22, r20
    1ef6:	75 07       	cpc	r23, r21
    1ef8:	48 f0       	brcs	.+18     	; 0x1f0c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1efa:	d1 01       	movw	r26, r2
    1efc:	6d 91       	ld	r22, X+
    1efe:	7c 91       	ld	r23, X
    1f00:	40 81       	ld	r20, Z
    1f02:	51 81       	ldd	r21, Z+1	; 0x01
    1f04:	46 17       	cp	r20, r22
    1f06:	57 07       	cpc	r21, r23
    1f08:	48 f0       	brcs	.+18     	; 0x1f1c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1f0a:	0d c0       	rjmp	.+26     	; 0x1f26 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1f0c:	40 81       	ld	r20, Z
    1f0e:	51 81       	ldd	r21, Z+1	; 0x01
    1f10:	dc 01       	movw	r26, r24
    1f12:	4d 93       	st	X+, r20
    1f14:	5c 93       	st	X, r21
    1f16:	e1 14       	cp	r14, r1
    1f18:	f1 04       	cpc	r15, r1
    1f1a:	79 f7       	brne	.-34     	; 0x1efa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1f1c:	40 81       	ld	r20, Z
    1f1e:	51 81       	ldd	r21, Z+1	; 0x01
    1f20:	d1 01       	movw	r26, r2
    1f22:	4d 93       	st	X+, r20
    1f24:	5c 93       	st	X, r21
    1f26:	2f 5f       	subi	r18, 0xFF	; 255
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	b2 e0       	ldi	r27, 0x02	; 2
    1f2c:	2b 0e       	add	r2, r27
    1f2e:	31 1c       	adc	r3, r1
    1f30:	32 96       	adiw	r30, 0x02	; 2
    1f32:	02 96       	adiw	r24, 0x02	; 2
    1f34:	d4 cf       	rjmp	.-88     	; 0x1ede <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1f36:	ef ef       	ldi	r30, 0xFF	; 255
    1f38:	ee 1a       	sub	r14, r30
    1f3a:	fe 0a       	sbc	r15, r30
    1f3c:	fa e0       	ldi	r31, 0x0A	; 10
    1f3e:	ef 16       	cp	r14, r31
    1f40:	f1 04       	cpc	r15, r1
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1f44:	b8 cf       	rjmp	.-144    	; 0x1eb6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1f46:	9e 01       	movw	r18, r28
    1f48:	2f 5f       	subi	r18, 0xFF	; 255
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	79 01       	movw	r14, r18
    1f4e:	36 01       	movw	r6, r12
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	f8 01       	movw	r30, r16
    1f56:	20 85       	ldd	r18, Z+8	; 0x08
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	82 17       	cp	r24, r18
    1f5c:	93 07       	cpc	r25, r19
    1f5e:	2c f5       	brge	.+74     	; 0x1faa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1f60:	d7 01       	movw	r26, r14
    1f62:	2d 91       	ld	r18, X+
    1f64:	3d 91       	ld	r19, X+
    1f66:	7d 01       	movw	r14, r26
    1f68:	b3 01       	movw	r22, r6
    1f6a:	6c 19       	sub	r22, r12
    1f6c:	7d 09       	sbc	r23, r13
    1f6e:	d5 01       	movw	r26, r10
    1f70:	ed 91       	ld	r30, X+
    1f72:	fc 91       	ld	r31, X
    1f74:	e6 0f       	add	r30, r22
    1f76:	f7 1f       	adc	r31, r23
    1f78:	40 81       	ld	r20, Z
    1f7a:	51 81       	ldd	r21, Z+1	; 0x01
    1f7c:	42 17       	cp	r20, r18
    1f7e:	53 07       	cpc	r21, r19
    1f80:	10 f4       	brcc	.+4      	; 0x1f86 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1f82:	31 83       	std	Z+1, r19	; 0x01
    1f84:	20 83       	st	Z, r18
    1f86:	f3 01       	movw	r30, r6
    1f88:	21 91       	ld	r18, Z+
    1f8a:	31 91       	ld	r19, Z+
    1f8c:	3f 01       	movw	r6, r30
    1f8e:	d4 01       	movw	r26, r8
    1f90:	ed 91       	ld	r30, X+
    1f92:	fc 91       	ld	r31, X
    1f94:	e6 0f       	add	r30, r22
    1f96:	f7 1f       	adc	r31, r23
    1f98:	40 81       	ld	r20, Z
    1f9a:	51 81       	ldd	r21, Z+1	; 0x01
    1f9c:	24 17       	cp	r18, r20
    1f9e:	35 07       	cpc	r19, r21
    1fa0:	10 f4       	brcc	.+4      	; 0x1fa6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1fa2:	31 83       	std	Z+1, r19	; 0x01
    1fa4:	20 83       	st	Z, r18
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	d5 cf       	rjmp	.-86     	; 0x1f54 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1faa:	c0 5a       	subi	r28, 0xA0	; 160
    1fac:	df 4f       	sbci	r29, 0xFF	; 255
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	1f 91       	pop	r17
    1fbe:	0f 91       	pop	r16
    1fc0:	ff 90       	pop	r15
    1fc2:	ef 90       	pop	r14
    1fc4:	df 90       	pop	r13
    1fc6:	cf 90       	pop	r12
    1fc8:	bf 90       	pop	r11
    1fca:	af 90       	pop	r10
    1fcc:	9f 90       	pop	r9
    1fce:	8f 90       	pop	r8
    1fd0:	7f 90       	pop	r7
    1fd2:	6f 90       	pop	r6
    1fd4:	5f 90       	pop	r5
    1fd6:	3f 90       	pop	r3
    1fd8:	2f 90       	pop	r2
    1fda:	08 95       	ret

00001fdc <_ZN16PololuQTRSensors9calibrateEh>:
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	ec 01       	movw	r28, r24
    1fe4:	16 2f       	mov	r17, r22
    1fe6:	8f ef       	ldi	r24, 0xFF	; 255
    1fe8:	86 0f       	add	r24, r22
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	18 f0       	brcs	.+6      	; 0x1ff4 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1fee:	66 23       	and	r22, r22
    1ff0:	59 f0       	breq	.+22     	; 0x2008 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1ff2:	14 c0       	rjmp	.+40     	; 0x201c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1ff4:	21 e0       	ldi	r18, 0x01	; 1
    1ff6:	ae 01       	movw	r20, r28
    1ff8:	4e 5f       	subi	r20, 0xFE	; 254
    1ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffc:	be 01       	movw	r22, r28
    1ffe:	ce 01       	movw	r24, r28
    2000:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2004:	12 30       	cpi	r17, 0x02	; 2
    2006:	51 f4       	brne	.+20     	; 0x201c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    2008:	ae 01       	movw	r20, r28
    200a:	4a 5f       	subi	r20, 0xFA	; 250
    200c:	5f 4f       	sbci	r21, 0xFF	; 255
    200e:	be 01       	movw	r22, r28
    2010:	6c 5f       	subi	r22, 0xFC	; 252
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	ce 01       	movw	r24, r28
    2018:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    201c:	df 91       	pop	r29
    201e:	cf 91       	pop	r28
    2020:	1f 91       	pop	r17
    2022:	08 95       	ret

00002024 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    2024:	a0 e0       	ldi	r26, 0x00	; 0
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e8 e1       	ldi	r30, 0x18	; 24
    202a:	f0 e1       	ldi	r31, 0x10	; 16
    202c:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x12>
    2030:	ec 01       	movw	r28, r24
    2032:	8b 01       	movw	r16, r22
    2034:	b4 2e       	mov	r11, r20
    2036:	84 2f       	mov	r24, r20
    2038:	8d 7f       	andi	r24, 0xFD	; 253
    203a:	51 f4       	brne	.+20     	; 0x2050 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	89 2b       	or	r24, r25
    2042:	09 f4       	brne	.+2      	; 0x2046 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    2044:	97 c0       	rjmp	.+302    	; 0x2174 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2046:	8e 81       	ldd	r24, Y+6	; 0x06
    2048:	9f 81       	ldd	r25, Y+7	; 0x07
    204a:	89 2b       	or	r24, r25
    204c:	09 f4       	brne	.+2      	; 0x2050 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    204e:	92 c0       	rjmp	.+292    	; 0x2174 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	8b 0d       	add	r24, r11
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	50 f4       	brcc	.+20     	; 0x206c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2058:	88 81       	ld	r24, Y
    205a:	99 81       	ldd	r25, Y+1	; 0x01
    205c:	89 2b       	or	r24, r25
    205e:	09 f4       	brne	.+2      	; 0x2062 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2060:	89 c0       	rjmp	.+274    	; 0x2174 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	89 2b       	or	r24, r25
    2068:	09 f4       	brne	.+2      	; 0x206c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    206a:	84 c0       	rjmp	.+264    	; 0x2174 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    206c:	4b 2d       	mov	r20, r11
    206e:	b8 01       	movw	r22, r16
    2070:	ce 01       	movw	r24, r28
    2072:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_ZN16PololuQTRSensors4readEPjh>
    2076:	78 01       	movw	r14, r16
    2078:	00 e0       	ldi	r16, 0x00	; 0
    207a:	10 e0       	ldi	r17, 0x00	; 0
    207c:	c1 2c       	mov	r12, r1
    207e:	d1 2c       	mov	r13, r1
    2080:	88 85       	ldd	r24, Y+8	; 0x08
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	c8 16       	cp	r12, r24
    2086:	d9 06       	cpc	r13, r25
    2088:	0c f0       	brlt	.+2      	; 0x208c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    208a:	74 c0       	rjmp	.+232    	; 0x2174 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	b8 12       	cpse	r11, r24
    2090:	0a c0       	rjmp	.+20     	; 0x20a6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2092:	ea 81       	ldd	r30, Y+2	; 0x02
    2094:	fb 81       	ldd	r31, Y+3	; 0x03
    2096:	e0 0f       	add	r30, r16
    2098:	f1 1f       	adc	r31, r17
    209a:	01 90       	ld	r0, Z+
    209c:	f0 81       	ld	r31, Z
    209e:	e0 2d       	mov	r30, r0
    20a0:	a8 81       	ld	r26, Y
    20a2:	b9 81       	ldd	r27, Y+1	; 0x01
    20a4:	0d c0       	rjmp	.+26     	; 0x20c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    20a6:	8c 81       	ldd	r24, Y+4	; 0x04
    20a8:	9d 81       	ldd	r25, Y+5	; 0x05
    20aa:	2e 81       	ldd	r18, Y+6	; 0x06
    20ac:	3f 81       	ldd	r19, Y+7	; 0x07
    20ae:	b1 10       	cpse	r11, r1
    20b0:	0c c0       	rjmp	.+24     	; 0x20ca <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    20b2:	f9 01       	movw	r30, r18
    20b4:	e0 0f       	add	r30, r16
    20b6:	f1 1f       	adc	r31, r17
    20b8:	01 90       	ld	r0, Z+
    20ba:	f0 81       	ld	r31, Z
    20bc:	e0 2d       	mov	r30, r0
    20be:	dc 01       	movw	r26, r24
    20c0:	a0 0f       	add	r26, r16
    20c2:	b1 1f       	adc	r27, r17
    20c4:	8d 91       	ld	r24, X+
    20c6:	9c 91       	ld	r25, X
    20c8:	28 c0       	rjmp	.+80     	; 0x211a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    20ca:	fc 01       	movw	r30, r24
    20cc:	e0 0f       	add	r30, r16
    20ce:	f1 1f       	adc	r31, r17
    20d0:	40 81       	ld	r20, Z
    20d2:	51 81       	ldd	r21, Z+1	; 0x01
    20d4:	e8 81       	ld	r30, Y
    20d6:	f9 81       	ldd	r31, Y+1	; 0x01
    20d8:	e0 0f       	add	r30, r16
    20da:	f1 1f       	adc	r31, r17
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    20e2:	ff 85       	ldd	r31, Y+15	; 0x0f
    20e4:	48 17       	cp	r20, r24
    20e6:	59 07       	cpc	r21, r25
    20e8:	10 f4       	brcc	.+4      	; 0x20ee <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    20ea:	cf 01       	movw	r24, r30
    20ec:	04 c0       	rjmp	.+8      	; 0x20f6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    20ee:	8e 0f       	add	r24, r30
    20f0:	9f 1f       	adc	r25, r31
    20f2:	84 1b       	sub	r24, r20
    20f4:	95 0b       	sbc	r25, r21
    20f6:	d9 01       	movw	r26, r18
    20f8:	a0 0f       	add	r26, r16
    20fa:	b1 1f       	adc	r27, r17
    20fc:	2d 91       	ld	r18, X+
    20fe:	3c 91       	ld	r19, X
    2100:	aa 81       	ldd	r26, Y+2	; 0x02
    2102:	bb 81       	ldd	r27, Y+3	; 0x03
    2104:	a0 0f       	add	r26, r16
    2106:	b1 1f       	adc	r27, r17
    2108:	4d 91       	ld	r20, X+
    210a:	5c 91       	ld	r21, X
    210c:	24 17       	cp	r18, r20
    210e:	35 07       	cpc	r19, r21
    2110:	20 f0       	brcs	.+8      	; 0x211a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2112:	e4 0f       	add	r30, r20
    2114:	f5 1f       	adc	r31, r21
    2116:	e2 1b       	sub	r30, r18
    2118:	f3 0b       	sbc	r31, r19
    211a:	e8 1b       	sub	r30, r24
    211c:	f9 0b       	sbc	r31, r25
    211e:	a9 f0       	breq	.+42     	; 0x214a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2120:	d7 01       	movw	r26, r14
    2122:	2d 91       	ld	r18, X+
    2124:	3c 91       	ld	r19, X
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	28 1b       	sub	r18, r24
    212c:	39 0b       	sbc	r19, r25
    212e:	41 09       	sbc	r20, r1
    2130:	51 09       	sbc	r21, r1
    2132:	a8 ee       	ldi	r26, 0xE8	; 232
    2134:	b3 e0       	ldi	r27, 0x03	; 3
    2136:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__muluhisi3>
    213a:	9f 01       	movw	r18, r30
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	0e 94 a8 11 	call	0x2350	; 0x2350 <__divmodsi4>
    2144:	37 fd       	sbrc	r19, 7
    2146:	0a c0       	rjmp	.+20     	; 0x215c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2148:	02 c0       	rjmp	.+4      	; 0x214e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	29 3e       	cpi	r18, 0xE9	; 233
    2150:	b3 e0       	ldi	r27, 0x03	; 3
    2152:	3b 07       	cpc	r19, r27
    2154:	2c f0       	brlt	.+10     	; 0x2160 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2156:	28 ee       	ldi	r18, 0xE8	; 232
    2158:	33 e0       	ldi	r19, 0x03	; 3
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	f7 01       	movw	r30, r14
    2162:	21 93       	st	Z+, r18
    2164:	31 93       	st	Z+, r19
    2166:	7f 01       	movw	r14, r30
    2168:	ff ef       	ldi	r31, 0xFF	; 255
    216a:	cf 1a       	sub	r12, r31
    216c:	df 0a       	sbc	r13, r31
    216e:	0e 5f       	subi	r16, 0xFE	; 254
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	86 cf       	rjmp	.-244    	; 0x2080 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	e9 e0       	ldi	r30, 0x09	; 9
    217a:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x12>

0000217e <_ZN16PololuQTRSensors8readLineEPjhh>:
    217e:	a0 e0       	ldi	r26, 0x00	; 0
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 ec       	ldi	r30, 0xC5	; 197
    2184:	f0 e1       	ldi	r31, 0x10	; 16
    2186:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__>
    218a:	ec 01       	movw	r28, r24
    218c:	8b 01       	movw	r16, r22
    218e:	82 2e       	mov	r8, r18
    2190:	0e 94 12 10 	call	0x2024	; 0x2024 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2194:	28 84       	ldd	r2, Y+8	; 0x08
    2196:	e8 01       	movw	r28, r16
    2198:	41 2c       	mov	r4, r1
    219a:	51 2c       	mov	r5, r1
    219c:	32 01       	movw	r6, r4
    219e:	00 e0       	ldi	r16, 0x00	; 0
    21a0:	10 e0       	ldi	r17, 0x00	; 0
    21a2:	c1 2c       	mov	r12, r1
    21a4:	d1 2c       	mov	r13, r1
    21a6:	76 01       	movw	r14, r12
    21a8:	31 2c       	mov	r3, r1
    21aa:	91 2c       	mov	r9, r1
    21ac:	58 ee       	ldi	r21, 0xE8	; 232
    21ae:	a5 2e       	mov	r10, r21
    21b0:	53 e0       	ldi	r21, 0x03	; 3
    21b2:	b5 2e       	mov	r11, r21
    21b4:	92 14       	cp	r9, r2
    21b6:	21 f1       	breq	.+72     	; 0x2200 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    21b8:	e9 91       	ld	r30, Y+
    21ba:	f9 91       	ld	r31, Y+
    21bc:	88 20       	and	r8, r8
    21be:	21 f0       	breq	.+8      	; 0x21c8 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    21c0:	c5 01       	movw	r24, r10
    21c2:	8e 1b       	sub	r24, r30
    21c4:	9f 0b       	sbc	r25, r31
    21c6:	fc 01       	movw	r30, r24
    21c8:	e9 3c       	cpi	r30, 0xC9	; 201
    21ca:	f1 05       	cpc	r31, r1
    21cc:	24 f4       	brge	.+8      	; 0x21d6 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    21ce:	e3 33       	cpi	r30, 0x33	; 51
    21d0:	f1 05       	cpc	r31, r1
    21d2:	74 f0       	brlt	.+28     	; 0x21f0 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    21d6:	33 24       	eor	r3, r3
    21d8:	33 94       	inc	r3
    21da:	df 01       	movw	r26, r30
    21dc:	a3 01       	movw	r20, r6
    21de:	92 01       	movw	r18, r4
    21e0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__mulshisi3>
    21e4:	c6 0e       	add	r12, r22
    21e6:	d7 1e       	adc	r13, r23
    21e8:	e8 1e       	adc	r14, r24
    21ea:	f9 1e       	adc	r15, r25
    21ec:	0e 0f       	add	r16, r30
    21ee:	1f 1f       	adc	r17, r31
    21f0:	93 94       	inc	r9
    21f2:	98 ee       	ldi	r25, 0xE8	; 232
    21f4:	49 0e       	add	r4, r25
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	59 1e       	adc	r5, r25
    21fa:	61 1c       	adc	r6, r1
    21fc:	71 1c       	adc	r7, r1
    21fe:	da cf       	rjmp	.-76     	; 0x21b4 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2200:	31 10       	cpse	r3, r1
    2202:	1e c0       	rjmp	.+60     	; 0x2240 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2204:	49 2d       	mov	r20, r9
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	41 50       	subi	r20, 0x01	; 1
    220a:	51 09       	sbc	r21, r1
    220c:	24 ef       	ldi	r18, 0xF4	; 244
    220e:	31 e0       	ldi	r19, 0x01	; 1
    2210:	42 9f       	mul	r20, r18
    2212:	c0 01       	movw	r24, r0
    2214:	43 9f       	mul	r20, r19
    2216:	90 0d       	add	r25, r0
    2218:	52 9f       	mul	r21, r18
    221a:	90 0d       	add	r25, r0
    221c:	11 24       	eor	r1, r1
    221e:	20 91 c3 01 	lds	r18, 0x01C3
    2222:	30 91 c4 01 	lds	r19, 0x01C4
    2226:	28 17       	cp	r18, r24
    2228:	39 07       	cpc	r19, r25
    222a:	b4 f0       	brlt	.+44     	; 0x2258 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    222c:	88 ee       	ldi	r24, 0xE8	; 232
    222e:	93 e0       	ldi	r25, 0x03	; 3
    2230:	48 9f       	mul	r20, r24
    2232:	90 01       	movw	r18, r0
    2234:	49 9f       	mul	r20, r25
    2236:	30 0d       	add	r19, r0
    2238:	58 9f       	mul	r21, r24
    223a:	30 0d       	add	r19, r0
    223c:	11 24       	eor	r1, r1
    223e:	0e c0       	rjmp	.+28     	; 0x225c <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2240:	98 01       	movw	r18, r16
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	c7 01       	movw	r24, r14
    2248:	b6 01       	movw	r22, r12
    224a:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodsi4>
    224e:	30 93 c4 01 	sts	0x01C4, r19
    2252:	20 93 c3 01 	sts	0x01C3, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	c9 01       	movw	r24, r18
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	e2 e1       	ldi	r30, 0x12	; 18
    2264:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__>

00002268 <_ZN16PololuQTRSensorsD1Ev>:
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	ec 01       	movw	r28, r24
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	9b 81       	ldd	r25, Y+3	; 0x03
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	11 f0       	breq	.+4      	; 0x227a <_ZN16PololuQTRSensorsD1Ev+0x12>
    2276:	0e 94 bb 12 	call	0x2576	; 0x2576 <free>
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	11 f0       	breq	.+4      	; 0x2286 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2282:	0e 94 bb 12 	call	0x2576	; 0x2576 <free>
    2286:	88 81       	ld	r24, Y
    2288:	99 81       	ldd	r25, Y+1	; 0x01
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	11 f0       	breq	.+4      	; 0x2292 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    228e:	0e 94 bb 12 	call	0x2576	; 0x2576 <free>
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	11 f0       	breq	.+4      	; 0x229e <_ZN16PololuQTRSensorsD1Ev+0x36>
    229a:	0e 94 bb 12 	call	0x2576	; 0x2576 <free>
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	08 95       	ret

000022a4 <__udivmodqi4>:
    22a4:	99 1b       	sub	r25, r25
    22a6:	79 e0       	ldi	r23, 0x09	; 9
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <__udivmodqi4_ep>

000022aa <__udivmodqi4_loop>:
    22aa:	99 1f       	adc	r25, r25
    22ac:	96 17       	cp	r25, r22
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <__udivmodqi4_ep>
    22b0:	96 1b       	sub	r25, r22

000022b2 <__udivmodqi4_ep>:
    22b2:	88 1f       	adc	r24, r24
    22b4:	7a 95       	dec	r23
    22b6:	c9 f7       	brne	.-14     	; 0x22aa <__udivmodqi4_loop>
    22b8:	80 95       	com	r24
    22ba:	08 95       	ret

000022bc <__udivmodhi4>:
    22bc:	aa 1b       	sub	r26, r26
    22be:	bb 1b       	sub	r27, r27
    22c0:	51 e1       	ldi	r21, 0x11	; 17
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <__udivmodhi4_ep>

000022c4 <__udivmodhi4_loop>:
    22c4:	aa 1f       	adc	r26, r26
    22c6:	bb 1f       	adc	r27, r27
    22c8:	a6 17       	cp	r26, r22
    22ca:	b7 07       	cpc	r27, r23
    22cc:	10 f0       	brcs	.+4      	; 0x22d2 <__udivmodhi4_ep>
    22ce:	a6 1b       	sub	r26, r22
    22d0:	b7 0b       	sbc	r27, r23

000022d2 <__udivmodhi4_ep>:
    22d2:	88 1f       	adc	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	5a 95       	dec	r21
    22d8:	a9 f7       	brne	.-22     	; 0x22c4 <__udivmodhi4_loop>
    22da:	80 95       	com	r24
    22dc:	90 95       	com	r25
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	08 95       	ret

000022e4 <__divmodhi4>:
    22e4:	97 fb       	bst	r25, 7
    22e6:	07 2e       	mov	r0, r23
    22e8:	16 f4       	brtc	.+4      	; 0x22ee <__divmodhi4+0xa>
    22ea:	00 94       	com	r0
    22ec:	07 d0       	rcall	.+14     	; 0x22fc <__divmodhi4_neg1>
    22ee:	77 fd       	sbrc	r23, 7
    22f0:	09 d0       	rcall	.+18     	; 0x2304 <__divmodhi4_neg2>
    22f2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__udivmodhi4>
    22f6:	07 fc       	sbrc	r0, 7
    22f8:	05 d0       	rcall	.+10     	; 0x2304 <__divmodhi4_neg2>
    22fa:	3e f4       	brtc	.+14     	; 0x230a <__divmodhi4_exit>

000022fc <__divmodhi4_neg1>:
    22fc:	90 95       	com	r25
    22fe:	81 95       	neg	r24
    2300:	9f 4f       	sbci	r25, 0xFF	; 255
    2302:	08 95       	ret

00002304 <__divmodhi4_neg2>:
    2304:	70 95       	com	r23
    2306:	61 95       	neg	r22
    2308:	7f 4f       	sbci	r23, 0xFF	; 255

0000230a <__divmodhi4_exit>:
    230a:	08 95       	ret

0000230c <__udivmodsi4>:
    230c:	a1 e2       	ldi	r26, 0x21	; 33
    230e:	1a 2e       	mov	r1, r26
    2310:	aa 1b       	sub	r26, r26
    2312:	bb 1b       	sub	r27, r27
    2314:	fd 01       	movw	r30, r26
    2316:	0d c0       	rjmp	.+26     	; 0x2332 <__udivmodsi4_ep>

00002318 <__udivmodsi4_loop>:
    2318:	aa 1f       	adc	r26, r26
    231a:	bb 1f       	adc	r27, r27
    231c:	ee 1f       	adc	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	a2 17       	cp	r26, r18
    2322:	b3 07       	cpc	r27, r19
    2324:	e4 07       	cpc	r30, r20
    2326:	f5 07       	cpc	r31, r21
    2328:	20 f0       	brcs	.+8      	; 0x2332 <__udivmodsi4_ep>
    232a:	a2 1b       	sub	r26, r18
    232c:	b3 0b       	sbc	r27, r19
    232e:	e4 0b       	sbc	r30, r20
    2330:	f5 0b       	sbc	r31, r21

00002332 <__udivmodsi4_ep>:
    2332:	66 1f       	adc	r22, r22
    2334:	77 1f       	adc	r23, r23
    2336:	88 1f       	adc	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	1a 94       	dec	r1
    233c:	69 f7       	brne	.-38     	; 0x2318 <__udivmodsi4_loop>
    233e:	60 95       	com	r22
    2340:	70 95       	com	r23
    2342:	80 95       	com	r24
    2344:	90 95       	com	r25
    2346:	9b 01       	movw	r18, r22
    2348:	ac 01       	movw	r20, r24
    234a:	bd 01       	movw	r22, r26
    234c:	cf 01       	movw	r24, r30
    234e:	08 95       	ret

00002350 <__divmodsi4>:
    2350:	05 2e       	mov	r0, r21
    2352:	97 fb       	bst	r25, 7
    2354:	1e f4       	brtc	.+6      	; 0x235c <__divmodsi4+0xc>
    2356:	00 94       	com	r0
    2358:	0e 94 bf 11 	call	0x237e	; 0x237e <__negsi2>
    235c:	57 fd       	sbrc	r21, 7
    235e:	07 d0       	rcall	.+14     	; 0x236e <__divmodsi4_neg2>
    2360:	0e 94 86 11 	call	0x230c	; 0x230c <__udivmodsi4>
    2364:	07 fc       	sbrc	r0, 7
    2366:	03 d0       	rcall	.+6      	; 0x236e <__divmodsi4_neg2>
    2368:	4e f4       	brtc	.+18     	; 0x237c <__divmodsi4_exit>
    236a:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__negsi2>

0000236e <__divmodsi4_neg2>:
    236e:	50 95       	com	r21
    2370:	40 95       	com	r20
    2372:	30 95       	com	r19
    2374:	21 95       	neg	r18
    2376:	3f 4f       	sbci	r19, 0xFF	; 255
    2378:	4f 4f       	sbci	r20, 0xFF	; 255
    237a:	5f 4f       	sbci	r21, 0xFF	; 255

0000237c <__divmodsi4_exit>:
    237c:	08 95       	ret

0000237e <__negsi2>:
    237e:	90 95       	com	r25
    2380:	80 95       	com	r24
    2382:	70 95       	com	r23
    2384:	61 95       	neg	r22
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	8f 4f       	sbci	r24, 0xFF	; 255
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
    238c:	08 95       	ret

0000238e <__umulhisi3>:
    238e:	a2 9f       	mul	r26, r18
    2390:	b0 01       	movw	r22, r0
    2392:	b3 9f       	mul	r27, r19
    2394:	c0 01       	movw	r24, r0
    2396:	a3 9f       	mul	r26, r19
    2398:	70 0d       	add	r23, r0
    239a:	81 1d       	adc	r24, r1
    239c:	11 24       	eor	r1, r1
    239e:	91 1d       	adc	r25, r1
    23a0:	b2 9f       	mul	r27, r18
    23a2:	70 0d       	add	r23, r0
    23a4:	81 1d       	adc	r24, r1
    23a6:	11 24       	eor	r1, r1
    23a8:	91 1d       	adc	r25, r1
    23aa:	08 95       	ret

000023ac <__muluhisi3>:
    23ac:	0e 94 c7 11 	call	0x238e	; 0x238e <__umulhisi3>
    23b0:	a5 9f       	mul	r26, r21
    23b2:	90 0d       	add	r25, r0
    23b4:	b4 9f       	mul	r27, r20
    23b6:	90 0d       	add	r25, r0
    23b8:	a4 9f       	mul	r26, r20
    23ba:	80 0d       	add	r24, r0
    23bc:	91 1d       	adc	r25, r1
    23be:	11 24       	eor	r1, r1
    23c0:	08 95       	ret

000023c2 <__mulshisi3>:
    23c2:	b7 ff       	sbrs	r27, 7
    23c4:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__muluhisi3>

000023c8 <__mulohisi3>:
    23c8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__muluhisi3>
    23cc:	82 1b       	sub	r24, r18
    23ce:	93 0b       	sbc	r25, r19
    23d0:	08 95       	ret

000023d2 <__prologue_saves__>:
    23d2:	2f 92       	push	r2
    23d4:	3f 92       	push	r3
    23d6:	4f 92       	push	r4
    23d8:	5f 92       	push	r5
    23da:	6f 92       	push	r6
    23dc:	7f 92       	push	r7
    23de:	8f 92       	push	r8
    23e0:	9f 92       	push	r9
    23e2:	af 92       	push	r10
    23e4:	bf 92       	push	r11
    23e6:	cf 92       	push	r12
    23e8:	df 92       	push	r13
    23ea:	ef 92       	push	r14
    23ec:	ff 92       	push	r15
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	ca 1b       	sub	r28, r26
    23fc:	db 0b       	sbc	r29, r27
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	09 94       	ijmp

0000240a <__epilogue_restores__>:
    240a:	2a 88       	ldd	r2, Y+18	; 0x12
    240c:	39 88       	ldd	r3, Y+17	; 0x11
    240e:	48 88       	ldd	r4, Y+16	; 0x10
    2410:	5f 84       	ldd	r5, Y+15	; 0x0f
    2412:	6e 84       	ldd	r6, Y+14	; 0x0e
    2414:	7d 84       	ldd	r7, Y+13	; 0x0d
    2416:	8c 84       	ldd	r8, Y+12	; 0x0c
    2418:	9b 84       	ldd	r9, Y+11	; 0x0b
    241a:	aa 84       	ldd	r10, Y+10	; 0x0a
    241c:	b9 84       	ldd	r11, Y+9	; 0x09
    241e:	c8 84       	ldd	r12, Y+8	; 0x08
    2420:	df 80       	ldd	r13, Y+7	; 0x07
    2422:	ee 80       	ldd	r14, Y+6	; 0x06
    2424:	fd 80       	ldd	r15, Y+5	; 0x05
    2426:	0c 81       	ldd	r16, Y+4	; 0x04
    2428:	1b 81       	ldd	r17, Y+3	; 0x03
    242a:	aa 81       	ldd	r26, Y+2	; 0x02
    242c:	b9 81       	ldd	r27, Y+1	; 0x01
    242e:	ce 0f       	add	r28, r30
    2430:	d1 1d       	adc	r29, r1
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	ed 01       	movw	r28, r26
    243e:	08 95       	ret

00002440 <__tablejump2__>:
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	05 90       	lpm	r0, Z+
    2446:	f4 91       	lpm	r31, Z
    2448:	e0 2d       	mov	r30, r0
    244a:	09 94       	ijmp

0000244c <malloc>:
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	91 05       	cpc	r25, r1
    2454:	10 f4       	brcc	.+4      	; 0x245a <malloc+0xe>
    2456:	82 e0       	ldi	r24, 0x02	; 2
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	e0 91 7e 03 	lds	r30, 0x037E
    245e:	f0 91 7f 03 	lds	r31, 0x037F
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	c0 e0       	ldi	r28, 0x00	; 0
    2468:	d0 e0       	ldi	r29, 0x00	; 0
    246a:	30 97       	sbiw	r30, 0x00	; 0
    246c:	11 f1       	breq	.+68     	; 0x24b2 <malloc+0x66>
    246e:	40 81       	ld	r20, Z
    2470:	51 81       	ldd	r21, Z+1	; 0x01
    2472:	48 17       	cp	r20, r24
    2474:	59 07       	cpc	r21, r25
    2476:	c0 f0       	brcs	.+48     	; 0x24a8 <malloc+0x5c>
    2478:	48 17       	cp	r20, r24
    247a:	59 07       	cpc	r21, r25
    247c:	61 f4       	brne	.+24     	; 0x2496 <malloc+0x4a>
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	93 81       	ldd	r25, Z+3	; 0x03
    2482:	20 97       	sbiw	r28, 0x00	; 0
    2484:	19 f0       	breq	.+6      	; 0x248c <malloc+0x40>
    2486:	9b 83       	std	Y+3, r25	; 0x03
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	2b c0       	rjmp	.+86     	; 0x24e2 <malloc+0x96>
    248c:	90 93 7f 03 	sts	0x037F, r25
    2490:	80 93 7e 03 	sts	0x037E, r24
    2494:	26 c0       	rjmp	.+76     	; 0x24e2 <malloc+0x96>
    2496:	21 15       	cp	r18, r1
    2498:	31 05       	cpc	r19, r1
    249a:	19 f0       	breq	.+6      	; 0x24a2 <malloc+0x56>
    249c:	42 17       	cp	r20, r18
    249e:	53 07       	cpc	r21, r19
    24a0:	18 f4       	brcc	.+6      	; 0x24a8 <malloc+0x5c>
    24a2:	9a 01       	movw	r18, r20
    24a4:	be 01       	movw	r22, r28
    24a6:	df 01       	movw	r26, r30
    24a8:	ef 01       	movw	r28, r30
    24aa:	02 80       	ldd	r0, Z+2	; 0x02
    24ac:	f3 81       	ldd	r31, Z+3	; 0x03
    24ae:	e0 2d       	mov	r30, r0
    24b0:	dc cf       	rjmp	.-72     	; 0x246a <malloc+0x1e>
    24b2:	21 15       	cp	r18, r1
    24b4:	31 05       	cpc	r19, r1
    24b6:	09 f1       	breq	.+66     	; 0x24fa <malloc+0xae>
    24b8:	28 1b       	sub	r18, r24
    24ba:	39 0b       	sbc	r19, r25
    24bc:	24 30       	cpi	r18, 0x04	; 4
    24be:	31 05       	cpc	r19, r1
    24c0:	90 f4       	brcc	.+36     	; 0x24e6 <malloc+0x9a>
    24c2:	12 96       	adiw	r26, 0x02	; 2
    24c4:	8d 91       	ld	r24, X+
    24c6:	9c 91       	ld	r25, X
    24c8:	13 97       	sbiw	r26, 0x03	; 3
    24ca:	61 15       	cp	r22, r1
    24cc:	71 05       	cpc	r23, r1
    24ce:	21 f0       	breq	.+8      	; 0x24d8 <malloc+0x8c>
    24d0:	fb 01       	movw	r30, r22
    24d2:	93 83       	std	Z+3, r25	; 0x03
    24d4:	82 83       	std	Z+2, r24	; 0x02
    24d6:	04 c0       	rjmp	.+8      	; 0x24e0 <malloc+0x94>
    24d8:	90 93 7f 03 	sts	0x037F, r25
    24dc:	80 93 7e 03 	sts	0x037E, r24
    24e0:	fd 01       	movw	r30, r26
    24e2:	32 96       	adiw	r30, 0x02	; 2
    24e4:	44 c0       	rjmp	.+136    	; 0x256e <malloc+0x122>
    24e6:	fd 01       	movw	r30, r26
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	81 93       	st	Z+, r24
    24ee:	91 93       	st	Z+, r25
    24f0:	22 50       	subi	r18, 0x02	; 2
    24f2:	31 09       	sbc	r19, r1
    24f4:	2d 93       	st	X+, r18
    24f6:	3c 93       	st	X, r19
    24f8:	3a c0       	rjmp	.+116    	; 0x256e <malloc+0x122>
    24fa:	20 91 7c 03 	lds	r18, 0x037C
    24fe:	30 91 7d 03 	lds	r19, 0x037D
    2502:	23 2b       	or	r18, r19
    2504:	41 f4       	brne	.+16     	; 0x2516 <malloc+0xca>
    2506:	20 91 10 01 	lds	r18, 0x0110
    250a:	30 91 11 01 	lds	r19, 0x0111
    250e:	30 93 7d 03 	sts	0x037D, r19
    2512:	20 93 7c 03 	sts	0x037C, r18
    2516:	20 91 0e 01 	lds	r18, 0x010E
    251a:	30 91 0f 01 	lds	r19, 0x010F
    251e:	21 15       	cp	r18, r1
    2520:	31 05       	cpc	r19, r1
    2522:	41 f4       	brne	.+16     	; 0x2534 <malloc+0xe8>
    2524:	2d b7       	in	r18, 0x3d	; 61
    2526:	3e b7       	in	r19, 0x3e	; 62
    2528:	40 91 12 01 	lds	r20, 0x0112
    252c:	50 91 13 01 	lds	r21, 0x0113
    2530:	24 1b       	sub	r18, r20
    2532:	35 0b       	sbc	r19, r21
    2534:	e0 91 7c 03 	lds	r30, 0x037C
    2538:	f0 91 7d 03 	lds	r31, 0x037D
    253c:	e2 17       	cp	r30, r18
    253e:	f3 07       	cpc	r31, r19
    2540:	a0 f4       	brcc	.+40     	; 0x256a <malloc+0x11e>
    2542:	2e 1b       	sub	r18, r30
    2544:	3f 0b       	sbc	r19, r31
    2546:	28 17       	cp	r18, r24
    2548:	39 07       	cpc	r19, r25
    254a:	78 f0       	brcs	.+30     	; 0x256a <malloc+0x11e>
    254c:	ac 01       	movw	r20, r24
    254e:	4e 5f       	subi	r20, 0xFE	; 254
    2550:	5f 4f       	sbci	r21, 0xFF	; 255
    2552:	24 17       	cp	r18, r20
    2554:	35 07       	cpc	r19, r21
    2556:	48 f0       	brcs	.+18     	; 0x256a <malloc+0x11e>
    2558:	4e 0f       	add	r20, r30
    255a:	5f 1f       	adc	r21, r31
    255c:	50 93 7d 03 	sts	0x037D, r21
    2560:	40 93 7c 03 	sts	0x037C, r20
    2564:	81 93       	st	Z+, r24
    2566:	91 93       	st	Z+, r25
    2568:	02 c0       	rjmp	.+4      	; 0x256e <malloc+0x122>
    256a:	e0 e0       	ldi	r30, 0x00	; 0
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	cf 01       	movw	r24, r30
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <free>:
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	00 97       	sbiw	r24, 0x00	; 0
    2580:	09 f4       	brne	.+2      	; 0x2584 <free+0xe>
    2582:	8c c0       	rjmp	.+280    	; 0x269c <free+0x126>
    2584:	fc 01       	movw	r30, r24
    2586:	32 97       	sbiw	r30, 0x02	; 2
    2588:	13 82       	std	Z+3, r1	; 0x03
    258a:	12 82       	std	Z+2, r1	; 0x02
    258c:	00 91 7e 03 	lds	r16, 0x037E
    2590:	10 91 7f 03 	lds	r17, 0x037F
    2594:	01 15       	cp	r16, r1
    2596:	11 05       	cpc	r17, r1
    2598:	81 f4       	brne	.+32     	; 0x25ba <free+0x44>
    259a:	20 81       	ld	r18, Z
    259c:	31 81       	ldd	r19, Z+1	; 0x01
    259e:	82 0f       	add	r24, r18
    25a0:	93 1f       	adc	r25, r19
    25a2:	20 91 7c 03 	lds	r18, 0x037C
    25a6:	30 91 7d 03 	lds	r19, 0x037D
    25aa:	28 17       	cp	r18, r24
    25ac:	39 07       	cpc	r19, r25
    25ae:	79 f5       	brne	.+94     	; 0x260e <free+0x98>
    25b0:	f0 93 7d 03 	sts	0x037D, r31
    25b4:	e0 93 7c 03 	sts	0x037C, r30
    25b8:	71 c0       	rjmp	.+226    	; 0x269c <free+0x126>
    25ba:	d8 01       	movw	r26, r16
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	ae 17       	cp	r26, r30
    25c2:	bf 07       	cpc	r27, r31
    25c4:	50 f4       	brcc	.+20     	; 0x25da <free+0x64>
    25c6:	12 96       	adiw	r26, 0x02	; 2
    25c8:	2d 91       	ld	r18, X+
    25ca:	3c 91       	ld	r19, X
    25cc:	13 97       	sbiw	r26, 0x03	; 3
    25ce:	ad 01       	movw	r20, r26
    25d0:	21 15       	cp	r18, r1
    25d2:	31 05       	cpc	r19, r1
    25d4:	09 f1       	breq	.+66     	; 0x2618 <free+0xa2>
    25d6:	d9 01       	movw	r26, r18
    25d8:	f3 cf       	rjmp	.-26     	; 0x25c0 <free+0x4a>
    25da:	9d 01       	movw	r18, r26
    25dc:	da 01       	movw	r26, r20
    25de:	33 83       	std	Z+3, r19	; 0x03
    25e0:	22 83       	std	Z+2, r18	; 0x02
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	86 0f       	add	r24, r22
    25e8:	97 1f       	adc	r25, r23
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	69 f4       	brne	.+26     	; 0x260a <free+0x94>
    25f0:	ec 01       	movw	r28, r24
    25f2:	28 81       	ld	r18, Y
    25f4:	39 81       	ldd	r19, Y+1	; 0x01
    25f6:	26 0f       	add	r18, r22
    25f8:	37 1f       	adc	r19, r23
    25fa:	2e 5f       	subi	r18, 0xFE	; 254
    25fc:	3f 4f       	sbci	r19, 0xFF	; 255
    25fe:	31 83       	std	Z+1, r19	; 0x01
    2600:	20 83       	st	Z, r18
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	93 83       	std	Z+3, r25	; 0x03
    2608:	82 83       	std	Z+2, r24	; 0x02
    260a:	45 2b       	or	r20, r21
    260c:	29 f4       	brne	.+10     	; 0x2618 <free+0xa2>
    260e:	f0 93 7f 03 	sts	0x037F, r31
    2612:	e0 93 7e 03 	sts	0x037E, r30
    2616:	42 c0       	rjmp	.+132    	; 0x269c <free+0x126>
    2618:	13 96       	adiw	r26, 0x03	; 3
    261a:	fc 93       	st	X, r31
    261c:	ee 93       	st	-X, r30
    261e:	12 97       	sbiw	r26, 0x02	; 2
    2620:	ed 01       	movw	r28, r26
    2622:	49 91       	ld	r20, Y+
    2624:	59 91       	ld	r21, Y+
    2626:	9e 01       	movw	r18, r28
    2628:	24 0f       	add	r18, r20
    262a:	35 1f       	adc	r19, r21
    262c:	e2 17       	cp	r30, r18
    262e:	f3 07       	cpc	r31, r19
    2630:	71 f4       	brne	.+28     	; 0x264e <free+0xd8>
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	84 0f       	add	r24, r20
    2638:	95 1f       	adc	r25, r21
    263a:	02 96       	adiw	r24, 0x02	; 2
    263c:	11 96       	adiw	r26, 0x01	; 1
    263e:	9c 93       	st	X, r25
    2640:	8e 93       	st	-X, r24
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	13 96       	adiw	r26, 0x03	; 3
    2648:	9c 93       	st	X, r25
    264a:	8e 93       	st	-X, r24
    264c:	12 97       	sbiw	r26, 0x02	; 2
    264e:	e0 e0       	ldi	r30, 0x00	; 0
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	d8 01       	movw	r26, r16
    2654:	12 96       	adiw	r26, 0x02	; 2
    2656:	8d 91       	ld	r24, X+
    2658:	9c 91       	ld	r25, X
    265a:	13 97       	sbiw	r26, 0x03	; 3
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	19 f0       	breq	.+6      	; 0x2666 <free+0xf0>
    2660:	f8 01       	movw	r30, r16
    2662:	8c 01       	movw	r16, r24
    2664:	f6 cf       	rjmp	.-20     	; 0x2652 <free+0xdc>
    2666:	8d 91       	ld	r24, X+
    2668:	9c 91       	ld	r25, X
    266a:	98 01       	movw	r18, r16
    266c:	2e 5f       	subi	r18, 0xFE	; 254
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	82 0f       	add	r24, r18
    2672:	93 1f       	adc	r25, r19
    2674:	20 91 7c 03 	lds	r18, 0x037C
    2678:	30 91 7d 03 	lds	r19, 0x037D
    267c:	28 17       	cp	r18, r24
    267e:	39 07       	cpc	r19, r25
    2680:	69 f4       	brne	.+26     	; 0x269c <free+0x126>
    2682:	30 97       	sbiw	r30, 0x00	; 0
    2684:	29 f4       	brne	.+10     	; 0x2690 <free+0x11a>
    2686:	10 92 7f 03 	sts	0x037F, r1
    268a:	10 92 7e 03 	sts	0x037E, r1
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <free+0x11e>
    2690:	13 82       	std	Z+3, r1	; 0x03
    2692:	12 82       	std	Z+2, r1	; 0x02
    2694:	10 93 7d 03 	sts	0x037D, r17
    2698:	00 93 7c 03 	sts	0x037C, r16
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	08 95       	ret

000026a6 <__do_global_dtors>:
    26a6:	10 e0       	ldi	r17, 0x00	; 0
    26a8:	c5 e5       	ldi	r28, 0x55	; 85
    26aa:	d0 e0       	ldi	r29, 0x00	; 0
    26ac:	04 c0       	rjmp	.+8      	; 0x26b6 <__do_global_dtors+0x10>
    26ae:	fe 01       	movw	r30, r28
    26b0:	0e 94 20 12 	call	0x2440	; 0x2440 <__tablejump2__>
    26b4:	21 96       	adiw	r28, 0x01	; 1
    26b6:	c6 35       	cpi	r28, 0x56	; 86
    26b8:	d1 07       	cpc	r29, r17
    26ba:	c9 f7       	brne	.-14     	; 0x26ae <__do_global_dtors+0x8>
    26bc:	f8 94       	cli

000026be <__stop_program>:
    26be:	ff cf       	rjmp	.-2      	; 0x26be <__stop_program>
