
3pi-mazesolver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  000026b6  0000274a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021c  008001c4  008001c4  0000280e  2**0
                  ALLOC
  3 .stab         00006e88  00000000  00000000  00002810  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008ce2  00000000  00000000  00009698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0001237a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000123bc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f0  00000000  00000000  000123fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001503  00000000  00000000  000124ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000791  00000000  00000000  000139ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000f66  00000000  00000000  00014180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000214  00000000  00000000  000150e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000047f  00000000  00000000  000152fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000809  00000000  00000000  0001577b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000d0  00000000  00000000  00015f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__dtors_end>
       4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
       c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      10:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      24:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__vector_9>
      28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      34:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_13>
      38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
      64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 00       	nop
      6e:	00 1f       	adc	r16, r16
      70:	1f 1f       	adc	r17, r31
      72:	1f 1f       	adc	r17, r31
      74:	1f 1f       	adc	r17, r31

00000076 <welcome>:
      76:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

00000080 <demo_name_line2>:
      80:	73 6f 6c 76 65 72 00                                solver.

00000087 <demo_name_line1>:
      87:	4d 61 7a 65 00                                      Maze.

0000008c <welcome_line2>:
      8c:	33 f7 20 52 6f 62 6f 74 00                          3. Robot.

00000095 <welcome_line1>:
      95:	20 50 61 63 6d 61 6e 00 00                           Pacman..

0000009e <__ctors_end>:
      9e:	41 0c       	add	r4, r1

000000a0 <__dtors_end>:
      a0:	11 24       	eor	r1, r1
      a2:	1f be       	out	0x3f, r1	; 63
      a4:	cf ef       	ldi	r28, 0xFF	; 255
      a6:	d8 e0       	ldi	r29, 0x08	; 8
      a8:	de bf       	out	0x3e, r29	; 62
      aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_copy_data>:
      ac:	11 e0       	ldi	r17, 0x01	; 1
      ae:	a0 e0       	ldi	r26, 0x00	; 0
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	e6 eb       	ldi	r30, 0xB6	; 182
      b4:	f6 e2       	ldi	r31, 0x26	; 38
      b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
      b8:	05 90       	lpm	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	a4 3c       	cpi	r26, 0xC4	; 196
      be:	b1 07       	cpc	r27, r17
      c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
      c2:	23 e0       	ldi	r18, 0x03	; 3
      c4:	a4 ec       	ldi	r26, 0xC4	; 196
      c6:	b1 e0       	ldi	r27, 0x01	; 1
      c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
      ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
      cc:	a0 3e       	cpi	r26, 0xE0	; 224
      ce:	b2 07       	cpc	r27, r18
      d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
      d2:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
      d6:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__do_global_dtors>

000000da <__bad_interrupt>:
      da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <load_custom_characters>:

// This function loads custom characters into the LCD.  Up to 8
// characters can be loaded; we use them for 7 levels of a bar graph.
void load_custom_characters()
{
	lcd_load_custom_character(levels+0,0); // no offset, e.g. one bar
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	88 e6       	ldi	r24, 0x68	; 104
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+1,1); // two bars
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	89 e6       	ldi	r24, 0x69	; 105
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+2,2); // etc...
      f2:	62 e0       	ldi	r22, 0x02	; 2
      f4:	8a e6       	ldi	r24, 0x6A	; 106
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+3,3);
      fc:	63 e0       	ldi	r22, 0x03	; 3
      fe:	8b e6       	ldi	r24, 0x6B	; 107
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+4,4);
     106:	64 e0       	ldi	r22, 0x04	; 4
     108:	8c e6       	ldi	r24, 0x6C	; 108
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+5,5);
     110:	65 e0       	ldi	r22, 0x05	; 5
     112:	8d e6       	ldi	r24, 0x6D	; 109
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_load_custom_character>
	lcd_load_custom_character(levels+6,6);
     11a:	66 e0       	ldi	r22, 0x06	; 6
     11c:	8e e6       	ldi	r24, 0x6E	; 110
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 76 09 	call	0x12ec	; 0x12ec <lcd_load_custom_character>
	clear(); // the LCD must be cleared for the characters to take effect
     124:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <clear>

00000128 <display_readings>:
}

// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
     128:	bf 92       	push	r11
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	2a 97       	sbiw	r28, 0x0a	; 10
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	8c 01       	movw	r16, r24
     14c:	7c 01       	movw	r14, r24
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	e8 0e       	add	r14, r24
     152:	f1 1c       	adc	r15, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     154:	8a e0       	ldi	r24, 0x0A	; 10
     156:	b8 2e       	mov	r11, r24

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     158:	95 e6       	ldi	r25, 0x65	; 101
     15a:	c9 2e       	mov	r12, r25
     15c:	d1 2c       	mov	r13, r1
	for(i=0;i<5;i++) {
		// Initialize the array of characters that we will use for the
		// graph.  Using the space, an extra copy of the one-bar
		// character, and character 255 (a full black box), we get 10
		// characters in the array.
		const char display_characters[10] = {' ',0,0,1,2,3,4,5,6,255};
     15e:	e6 e1       	ldi	r30, 0x16	; 22
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	de 01       	movw	r26, r28
     164:	11 96       	adiw	r26, 0x01	; 1
     166:	8b 2d       	mov	r24, r11
     168:	01 90       	ld	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	8a 95       	dec	r24
     16e:	e1 f7       	brne	.-8      	; 0x168 <display_readings+0x40>

		// The variable c will have values from 0 to 9, since
		// calibrated values are in the range of 0 to 1000, and
		// 1000/101 is 9 with integer math.
		char c = display_characters[calibrated_values[i]/101];
     170:	f8 01       	movw	r30, r16
     172:	81 91       	ld	r24, Z+
     174:	91 91       	ld	r25, Z+
     176:	8f 01       	movw	r16, r30
     178:	b6 01       	movw	r22, r12
     17a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
     17e:	e1 e0       	ldi	r30, 0x01	; 1
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	ec 0f       	add	r30, r28
     184:	fd 1f       	adc	r31, r29
     186:	e6 0f       	add	r30, r22
     188:	f7 1f       	adc	r31, r23

		// Display the bar graph character.
		print_character(c);
     18a:	80 81       	ld	r24, Z
     18c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <print_character>
// This function displays the sensor readings using a bar graph.
void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     190:	0e 15       	cp	r16, r14
     192:	1f 05       	cpc	r17, r15
     194:	21 f7       	brne	.-56     	; 0x15e <display_readings+0x36>
		char c = display_characters[calibrated_values[i]/101];

		// Display the bar graph character.
		print_character(c);
	}
}
     196:	2a 96       	adiw	r28, 0x0a	; 10
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	f8 94       	cli
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	cd bf       	out	0x3d, r28	; 61
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	ff 90       	pop	r15
     1ac:	ef 90       	pop	r14
     1ae:	df 90       	pop	r13
     1b0:	cf 90       	pop	r12
     1b2:	bf 90       	pop	r11
     1b4:	08 95       	ret

000001b6 <follow_segment>:
 */

#include <pololu/3pi.h>

void follow_segment()
{
     1b6:	2f 92       	push	r2
     1b8:	3f 92       	push	r3
     1ba:	4f 92       	push	r4
     1bc:	5f 92       	push	r5
     1be:	6f 92       	push	r6
     1c0:	7f 92       	push	r7
     1c2:	8f 92       	push	r8
     1c4:	9f 92       	push	r9
     1c6:	af 92       	push	r10
     1c8:	bf 92       	push	r11
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	2a 97       	sbiw	r28, 0x0a	; 10
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
	int last_proportional = 0;
	long integral=0;
     1ea:	c1 2c       	mov	r12, r1
     1ec:	d1 2c       	mov	r13, r1
     1ee:	76 01       	movw	r14, r12

#include <pololu/3pi.h>

void follow_segment()
{
	int last_proportional = 0;
     1f0:	a1 2c       	mov	r10, r1
     1f2:	b1 2c       	mov	r11, r1
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     1f4:	60 e1       	ldi	r22, 0x10	; 16
     1f6:	46 2e       	mov	r4, r22
     1f8:	67 e2       	ldi	r22, 0x27	; 39
     1fa:	56 2e       	mov	r5, r22
     1fc:	61 2c       	mov	r6, r1
     1fe:	71 2c       	mov	r7, r1
     200:	74 e1       	ldi	r23, 0x14	; 20
     202:	27 2e       	mov	r2, r23
     204:	31 2c       	mov	r3, r1
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     206:	ec e3       	ldi	r30, 0x3C	; 60
     208:	8e 2e       	mov	r8, r30
     20a:	91 2c       	mov	r9, r1
		// similar to the 3pi-linefollower-pid example, but the maximum
		// speed is turned down to 60 for reliability.

		// Get the position of the line.
		unsigned int sensors[5];
		unsigned int position = read_line_white(sensors,IR_EMITTERS_ON);
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	ce 01       	movw	r24, r28
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	0e 94 07 0c 	call	0x180e	; 0x180e <read_line_white>

		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     216:	8c 01       	movw	r16, r24
     218:	00 5d       	subi	r16, 0xD0	; 208
     21a:	17 40       	sbci	r17, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;
     21c:	c8 01       	movw	r24, r16
     21e:	01 2e       	mov	r0, r17
     220:	00 0c       	add	r0, r0
     222:	aa 0b       	sbc	r26, r26
     224:	bb 0b       	sbc	r27, r27
     226:	c8 0e       	add	r12, r24
     228:	d9 1e       	adc	r13, r25
     22a:	ea 1e       	adc	r14, r26
     22c:	fb 1e       	adc	r15, r27
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     22e:	c7 01       	movw	r24, r14
     230:	b6 01       	movw	r22, r12
     232:	a3 01       	movw	r20, r6
     234:	92 01       	movw	r18, r4
     236:	0e 94 a3 11 	call	0x2346	; 0x2346 <__divmodsi4>
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     23a:	f8 01       	movw	r30, r16
     23c:	ea 19       	sub	r30, r10
     23e:	fb 09       	sbc	r31, r11
		// Compute the difference between the two motor power settings,
		// m1 - m2.  If this is a positive number the robot will turn
		// to the left.  If it is a negative number, the robot will
		// turn to the right, and the magnitude of the number determines
		// the sharpness of the turn.
		int power_difference = proportional/20 + integral/10000 + derivative*3/2;
     240:	cf 01       	movw	r24, r30
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	8e 0f       	add	r24, r30
     248:	9f 1f       	adc	r25, r31
     24a:	97 fd       	sbrc	r25, 7
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	95 95       	asr	r25
     250:	87 95       	ror	r24
     252:	28 0f       	add	r18, r24
     254:	39 1f       	adc	r19, r25
     256:	c8 01       	movw	r24, r16
     258:	b1 01       	movw	r22, r2
     25a:	0e 94 6d 11 	call	0x22da	; 0x22da <__divmodhi4>
     25e:	c9 01       	movw	r24, r18
     260:	86 0f       	add	r24, r22
     262:	97 1f       	adc	r25, r23

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
     264:	8d 33       	cpi	r24, 0x3D	; 61
     266:	91 05       	cpc	r25, r1
     268:	6c f4       	brge	.+26     	; 0x284 <follow_segment+0xce>
			power_difference = max;
		if(power_difference < -max)
     26a:	84 3c       	cpi	r24, 0xC4	; 196
     26c:	2f ef       	ldi	r18, 0xFF	; 255
     26e:	92 07       	cpc	r25, r18
     270:	1c f0       	brlt	.+6      	; 0x278 <follow_segment+0xc2>
			power_difference = -max;
		
		if(power_difference < 0)
     272:	97 fd       	sbrc	r25, 7
     274:	03 c0       	rjmp	.+6      	; 0x27c <follow_segment+0xc6>
     276:	08 c0       	rjmp	.+16     	; 0x288 <follow_segment+0xd2>
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
		if(power_difference < -max)
			power_difference = -max;
     278:	84 ec       	ldi	r24, 0xC4	; 196
     27a:	9f ef       	ldi	r25, 0xFF	; 255
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
     27c:	6c e3       	ldi	r22, 0x3C	; 60
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	cc 96       	adiw	r24, 0x3c	; 60
     282:	07 c0       	rjmp	.+14     	; 0x292 <follow_segment+0xdc>

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 60; // the maximum speed
		if(power_difference > max)
			power_difference = max;
     284:	8c e3       	ldi	r24, 0x3C	; 60
     286:	90 e0       	ldi	r25, 0x00	; 0
			power_difference = -max;
		
		if(power_difference < 0)
			set_motors(max+power_difference,max);
		else
			set_motors(max,max-power_difference);
     288:	b4 01       	movw	r22, r8
     28a:	68 1b       	sub	r22, r24
     28c:	79 0b       	sbc	r23, r25
     28e:	8c e3       	ldi	r24, 0x3C	; 60
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
		// We use the inner three sensors (1, 2, and 3) for
		// determining whether there is a line straight ahead, and the
		// sensors 0 and 4 for detecting lines going to the left and
		// right.

		if(sensors[1] > 300 && sensors[2] > 300 && sensors[3] > 300)
     296:	8b 81       	ldd	r24, Y+3	; 0x03
     298:	9c 81       	ldd	r25, Y+4	; 0x04
     29a:	8d 32       	cpi	r24, 0x2D	; 45
     29c:	91 40       	sbci	r25, 0x01	; 1
     29e:	50 f0       	brcs	.+20     	; 0x2b4 <follow_segment+0xfe>
     2a0:	8d 81       	ldd	r24, Y+5	; 0x05
     2a2:	9e 81       	ldd	r25, Y+6	; 0x06
     2a4:	8d 32       	cpi	r24, 0x2D	; 45
     2a6:	91 40       	sbci	r25, 0x01	; 1
     2a8:	28 f0       	brcs	.+10     	; 0x2b4 <follow_segment+0xfe>
     2aa:	8f 81       	ldd	r24, Y+7	; 0x07
     2ac:	98 85       	ldd	r25, Y+8	; 0x08
     2ae:	8d 32       	cpi	r24, 0x2D	; 45
     2b0:	91 40       	sbci	r25, 0x01	; 1
     2b2:	88 f4       	brcc	.+34     	; 0x2d6 <follow_segment+0x120>
		{
			// There is no line visible ahead, and we didn't see any
			// intersection.  Must be a dead end.
			return;
		}
		else if(sensors[0] < 200 || sensors[4] < 200)
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	9a 81       	ldd	r25, Y+2	; 0x02
     2b8:	88 3c       	cpi	r24, 0xC8	; 200
     2ba:	91 05       	cpc	r25, r1
     2bc:	28 f0       	brcs	.+10     	; 0x2c8 <follow_segment+0x112>
     2be:	89 85       	ldd	r24, Y+9	; 0x09
     2c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     2c2:	88 3c       	cpi	r24, 0xC8	; 200
     2c4:	91 05       	cpc	r25, r1
     2c6:	28 f4       	brcc	.+10     	; 0x2d2 <follow_segment+0x11c>
		{
			// Found an intersection.
			play("<<G32");
     2c8:	8d e3       	ldi	r24, 0x3D	; 61
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	0e 94 a5 08 	call	0x114a	; 0x114a <play>
			return;
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <follow_segment+0x120>
		// position.
		int derivative = proportional - last_proportional;
		integral += proportional;

		// Remember the last position.
		last_proportional = proportional;
     2d2:	58 01       	movw	r10, r16
		{
			// Found an intersection.
			play("<<G32");
			return;
		}
	}
     2d4:	9b cf       	rjmp	.-202    	; 0x20c <follow_segment+0x56>
}
     2d6:	2a 96       	adiw	r28, 0x0a	; 10
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	df 90       	pop	r13
     2f0:	cf 90       	pop	r12
     2f2:	bf 90       	pop	r11
     2f4:	af 90       	pop	r10
     2f6:	9f 90       	pop	r9
     2f8:	8f 90       	pop	r8
     2fa:	7f 90       	pop	r7
     2fc:	6f 90       	pop	r6
     2fe:	5f 90       	pop	r5
     300:	4f 90       	pop	r4
     302:	3f 90       	pop	r3
     304:	2f 90       	pop	r2
     306:	08 95       	ret

00000308 <initialize>:
const char go[] PROGMEM = "L16 cdegreg4";

// Initializes the 3pi, displays a welcome message, calibrates, and
// plays the initial music.
void initialize()
{
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	cd b7       	in	r28, 0x3d	; 61
     312:	de b7       	in	r29, 0x3e	; 62
     314:	2a 97       	sbiw	r28, 0x0a	; 10
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
	unsigned int sensors[5]; // an array to hold sensor values

	// This must be called at the beginning of 3pi code, to set up the
	// sensors.  We use a value of 2000 for the timeout, which
	// corresponds to 2000*0.4 us = 0.8 ms on our 20 MHz processor.
	pololu_3pi_init(2000);
     320:	80 ed       	ldi	r24, 0xD0	; 208
     322:	97 e0       	ldi	r25, 0x07	; 7
     324:	0e 94 3d 0c 	call	0x187a	; 0x187a <pololu_3pi_init>
	load_custom_characters(); // load the custom characters
     328:	0e 94 6f 00 	call	0xde	; 0xde <load_custom_characters>
	
	// Play welcome music and display a message
	print_from_program_space(welcome_line1);
     32c:	85 e9       	ldi	r24, 0x95	; 149
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 09 0a 	call	0x1412	; 0x1412 <print_from_program_space>
	lcd_goto_xy(0,1);
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 81 0a 	call	0x1502	; 0x1502 <lcd_goto_xy>
	print_from_program_space(welcome_line2);
     33c:	8c e8       	ldi	r24, 0x8C	; 140
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 09 0a 	call	0x1412	; 0x1412 <print_from_program_space>
	play_from_program_space(welcome);
     344:	86 e7       	ldi	r24, 0x76	; 118
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 b6 08 	call	0x116c	; 0x116c <play_from_program_space>
	delay_ms(1000);
     34c:	88 ee       	ldi	r24, 0xE8	; 232
     34e:	93 e0       	ldi	r25, 0x03	; 3
     350:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>

	clear();
     354:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <clear>
	print_from_program_space(demo_name_line1);
     358:	87 e8       	ldi	r24, 0x87	; 135
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 09 0a 	call	0x1412	; 0x1412 <print_from_program_space>
	lcd_goto_xy(0,1);
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 81 0a 	call	0x1502	; 0x1502 <lcd_goto_xy>
	print_from_program_space(demo_name_line2);
     368:	80 e8       	ldi	r24, 0x80	; 128
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 09 0a 	call	0x1412	; 0x1412 <print_from_program_space>
	delay_ms(1000);
     370:	88 ee       	ldi	r24, 0xE8	; 232
     372:	93 e0       	ldi	r25, 0x03	; 3
		print_long(bat);
		print("mV");
		lcd_goto_xy(0,1);
		print("Press B");

		delay_ms(100);
     374:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
	lcd_goto_xy(0,1);
	print_from_program_space(demo_name_line2);
	delay_ms(1000);

	// Display battery voltage and wait for button press
	while(!button_is_pressed(BUTTON_B))
     378:	80 e1       	ldi	r24, 0x10	; 16
     37a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <button_is_pressed>
     37e:	81 11       	cpse	r24, r1
     380:	1a c0       	rjmp	.+52     	; 0x3b6 <initialize+0xae>
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     382:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <read_battery_millivolts_3pi>
     386:	8c 01       	movw	r16, r24
	{
		int bat = read_battery_millivolts();

		clear();
     388:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <clear>
		print_long(bat);
     38c:	b8 01       	movw	r22, r16
     38e:	11 0f       	add	r17, r17
     390:	88 0b       	sbc	r24, r24
     392:	99 0b       	sbc	r25, r25
     394:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <print_long>
		print("mV");
     398:	83 e4       	ldi	r24, 0x43	; 67
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <print>
		lcd_goto_xy(0,1);
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 81 0a 	call	0x1502	; 0x1502 <lcd_goto_xy>
		print("Press B");
     3a8:	86 e4       	ldi	r24, 0x46	; 70
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <print>

		delay_ms(100);
     3b0:	84 e6       	ldi	r24, 0x64	; 100
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	df cf       	rjmp	.-66     	; 0x374 <initialize+0x6c>
	}

	// Always wait for the button to be released so that 3pi doesn't
	// start moving until your hand is away from it.
	wait_for_button_release(BUTTON_B);
     3b6:	80 e1       	ldi	r24, 0x10	; 16
     3b8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <wait_for_button_release>
	delay_ms(1000);
     3bc:	88 ee       	ldi	r24, 0xE8	; 232
     3be:	93 e0       	ldi	r25, 0x03	; 3
     3c0:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
     3c4:	0c ee       	ldi	r16, 0xEC	; 236
     3c6:	1f ef       	ldi	r17, 0xFF	; 255

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     3c8:	08 32       	cpi	r16, 0x28	; 40
     3ca:	11 05       	cpc	r17, r1
     3cc:	28 f0       	brcs	.+10     	; 0x3d8 <initialize+0xd0>
			set_motors(40,-40);
     3ce:	68 ed       	ldi	r22, 0xD8	; 216
     3d0:	7f ef       	ldi	r23, 0xFF	; 255
     3d2:	88 e2       	ldi	r24, 0x28	; 40
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <initialize+0xd8>
		else
			set_motors(-40,40);
     3d8:	68 e2       	ldi	r22, 0x28	; 40
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	88 ed       	ldi	r24, 0xD8	; 216
     3de:	9f ef       	ldi	r25, 0xFF	; 255
     3e0:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
		// This function records a set of sensor readings and keeps
		// track of the minimum and maximum values encountered.  The
		// IR_EMITTERS_ON argument means that the IR LEDs will be
		// turned on during the reading, which is usually what you
		// want.
		calibrate_line_sensors(IR_EMITTERS_ON);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 01 0c 	call	0x1802	; 0x1802 <calibrate_line_sensors>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
     3ea:	84 e1       	ldi	r24, 0x14	; 20
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
     3f2:	0f 5f       	subi	r16, 0xFF	; 255
     3f4:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	// Auto-calibration: turn right and left while calibrating the
	// sensors.
	for(counter=0;counter<80;counter++)
     3f6:	0c 33       	cpi	r16, 0x3C	; 60
     3f8:	11 05       	cpc	r17, r1
     3fa:	31 f7       	brne	.-52     	; 0x3c8 <initialize+0xc0>

		// Since our counter runs to 80, the total delay will be
		// 80*20 = 1600 ms.
		delay_ms(20);
	}
	set_motors(0,0);
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>

	// Display calibrated values as a bar graph.
	while(!button_is_pressed(BUTTON_B))
     408:	80 e1       	ldi	r24, 0x10	; 16
     40a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <button_is_pressed>
     40e:	81 11       	cpse	r24, r1
     410:	1a c0       	rjmp	.+52     	; 0x446 <initialize+0x13e>
	{
		// Read the sensor values and get the position measurement.
		unsigned int position = read_line_white(sensors,IR_EMITTERS_ON);
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	ce 01       	movw	r24, r28
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	0e 94 07 0c 	call	0x180e	; 0x180e <read_line_white>
     41c:	8c 01       	movw	r16, r24
		// Display the position measurement, which will go from 0
		// (when the leftmost sensor is over the line) to 4000 (when
		// the rightmost sensor is over the line) on the 3pi, along
		// with a bar graph of the sensor readings.  This allows you
		// to make sure the robot is ready to go.
		clear();
     41e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <clear>
		print_long(position);
     422:	b8 01       	movw	r22, r16
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <print_long>
		lcd_goto_xy(0,1);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	0e 94 81 0a 	call	0x1502	; 0x1502 <lcd_goto_xy>
		display_readings(sensors);
     434:	ce 01       	movw	r24, r28
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	0e 94 94 00 	call	0x128	; 0x128 <display_readings>

		delay_ms(100);
     43c:	84 e6       	ldi	r24, 0x64	; 100
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
     444:	e1 cf       	rjmp	.-62     	; 0x408 <initialize+0x100>
	}
	wait_for_button_release(BUTTON_B);
     446:	80 e1       	ldi	r24, 0x10	; 16
     448:	0e 94 66 0b 	call	0x16cc	; 0x16cc <wait_for_button_release>

	clear();
     44c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <clear>

	print("Go!");		
     450:	8e e4       	ldi	r24, 0x4E	; 78
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <print>

	// Play music and wait for it to finish before we start driving.
	//play_from_program_space(go);
	play("!L16O5 B>BF#D#B32F#8D# RBC>CGE>CGE<<C<BBF#D#BF#8D# R<<BD#32E32F32 F32F#32G32 G32G#32A32 B");
     458:	82 e5       	ldi	r24, 0x52	; 82
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	0e 94 a5 08 	call	0x114a	; 0x114a <play>
	while(is_playing());
     460:	0e 94 95 08 	call	0x112a	; 0x112a <is_playing>
     464:	81 11       	cpse	r24, r1
     466:	fc cf       	rjmp	.-8      	; 0x460 <initialize+0x158>
}
     468:	2a 96       	adiw	r28, 0x0a	; 10
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	08 95       	ret

0000047e <main>:
// This is the main function, where the code starts.  All C programs
// must have a main() function defined somewhere.
int main()
{
	// set up the 3pi
	initialize();
     47e:	0e 94 84 01 	call	0x308	; 0x308 <initialize>

	// Call our maze solving routine.
	maze_solve();
     482:	0e 94 b8 02 	call	0x570	; 0x570 <maze_solve>
	// never reach the end of its program, or unpredictable behavior
	// will result as random code starts getting executed.  If you
	// really want to stop all actions at some point, set your motors
	// to 0,0 and run the following command to loop forever:

	while(1);
     486:	ff cf       	rjmp	.-2      	; 0x486 <main+0x8>

00000488 <select_turn>:
// three directions, applying the "left hand on the wall" strategy.
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left) // L->1
     488:	81 11       	cpse	r24, r1
     48a:	06 c0       	rjmp	.+12     	; 0x498 <select_turn+0x10>
      return 'L';
   else if(found_straight) // S->2
     48c:	61 11       	cpse	r22, r1
     48e:	06 c0       	rjmp	.+12     	; 0x49c <select_turn+0x14>
      return 'S';
   else if(found_right) // R->3
     490:	41 11       	cpse	r20, r1
     492:	06 c0       	rjmp	.+12     	; 0x4a0 <select_turn+0x18>
      return 'R';
   else // back->0
      return 'B';
     494:	82 e4       	ldi	r24, 0x42	; 66
     496:	08 95       	ret
char select_turn(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left) // L->1
      return 'L';
     498:	8c e4       	ldi	r24, 0x4C	; 76
     49a:	08 95       	ret
   else if(found_straight) // S->2
      return 'S';
     49c:	83 e5       	ldi	r24, 0x53	; 83
     49e:	08 95       	ret
   else if(found_right) // R->3
      return 'R';
     4a0:	82 e5       	ldi	r24, 0x52	; 82
   else // back->0
      return 'B';
}
     4a2:	08 95       	ret

000004a4 <record_intersec>:
// code for intersection recording
int record_intersec(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left && found_right && found_straight) // LRS->4
     4a4:	88 23       	and	r24, r24
     4a6:	39 f0       	breq	.+14     	; 0x4b6 <record_intersec+0x12>
     4a8:	44 23       	and	r20, r20
     4aa:	61 f0       	breq	.+24     	; 0x4c4 <record_intersec+0x20>
     4ac:	61 11       	cpse	r22, r1
     4ae:	0f c0       	rjmp	.+30     	; 0x4ce <record_intersec+0x2a>
      return '4';
   else if(found_left && found_right) // LR->3
      return '3';
     4b0:	83 e3       	ldi	r24, 0x33	; 51
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	08 95       	ret
   else if(found_right && found_straight) // RS->2
     4b6:	44 23       	and	r20, r20
     4b8:	69 f0       	breq	.+26     	; 0x4d4 <record_intersec+0x30>
     4ba:	66 23       	and	r22, r22
     4bc:	59 f0       	breq	.+22     	; 0x4d4 <record_intersec+0x30>
      return '2';
     4be:	82 e3       	ldi	r24, 0x32	; 50
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
   else if(found_left && found_straight) // LS->1
     4c4:	66 23       	and	r22, r22
     4c6:	31 f0       	breq	.+12     	; 0x4d4 <record_intersec+0x30>
      return '1';
     4c8:	81 e3       	ldi	r24, 0x31	; 49
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	08 95       	ret
int record_intersec(unsigned char found_left, unsigned char found_straight, unsigned char found_right) {
   // Make a decision about how to turn.  The following code
   // implements a left-hand-on-the-wall strategy, where we always
   // turn as far to the left as possible.
   if(found_left && found_right && found_straight) // LRS->4
      return '4';
     4ce:	84 e3       	ldi	r24, 0x34	; 52
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	08 95       	ret
   else if(found_right && found_straight) // RS->2
      return '2';
   else if(found_left && found_straight) // LS->1
      return '1';
   else // No intersection->0
      return '0';
     4d4:	80 e3       	ldi	r24, 0x30	; 48
     4d6:	90 e0       	ldi	r25, 0x00	; 0
}
     4d8:	08 95       	ret

000004da <simplify_path>:
// example, LBL -> S, because a single S bypasses the dead end
// represented by LBL.

void simplify_path() {
   // only simplify the path if the second-to-last turn was a 'B'
   if(pathsol_length < 3 || pathsol[pathsol_length-2] != 'B') {
     4da:	40 91 27 02 	lds	r20, 0x0227
     4de:	43 30       	cpi	r20, 0x03	; 3
     4e0:	08 f4       	brcc	.+2      	; 0x4e4 <simplify_path+0xa>
     4e2:	45 c0       	rjmp	.+138    	; 0x56e <simplify_path+0x94>
     4e4:	24 2f       	mov	r18, r20
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	28 5d       	subi	r18, 0xD8	; 216
     4ea:	3d 4f       	sbci	r19, 0xFD	; 253
     4ec:	f9 01       	movw	r30, r18
     4ee:	32 97       	sbiw	r30, 0x02	; 2
     4f0:	80 81       	ld	r24, Z
     4f2:	82 34       	cpi	r24, 0x42	; 66
     4f4:	e1 f5       	brne	.+120    	; 0x56e <simplify_path+0x94>
     4f6:	f9 01       	movw	r30, r18
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
   }

   int total_angle = 0;
   int i;
   for(i=1;i<=3;i++) {
      switch(pathsol[pathsol_length-i]) {
     500:	52 91       	ld	r21, -Z
     502:	5c 34       	cpi	r21, 0x4C	; 76
     504:	51 f0       	breq	.+20     	; 0x51a <simplify_path+0x40>
     506:	52 35       	cpi	r21, 0x52	; 82
     508:	29 f0       	breq	.+10     	; 0x514 <simplify_path+0x3a>
     50a:	52 34       	cpi	r21, 0x42	; 66
     50c:	41 f4       	brne	.+16     	; 0x51e <simplify_path+0x44>
            break;
         case 'L':
            total_angle += 270;
            break;
         case 'B':
            total_angle += 180;
     50e:	8c 54       	subi	r24, 0x4C	; 76
     510:	9f 4f       	sbci	r25, 0xFF	; 255
            break;
     512:	05 c0       	rjmp	.+10     	; 0x51e <simplify_path+0x44>
   int total_angle = 0;
   int i;
   for(i=1;i<=3;i++) {
      switch(pathsol[pathsol_length-i]) {
         case 'R':
            total_angle += 90;
     514:	86 5a       	subi	r24, 0xA6	; 166
     516:	9f 4f       	sbci	r25, 0xFF	; 255
            break;
     518:	02 c0       	rjmp	.+4      	; 0x51e <simplify_path+0x44>
         case 'L':
            total_angle += 270;
     51a:	82 5f       	subi	r24, 0xF2	; 242
     51c:	9e 4f       	sbci	r25, 0xFE	; 254
      return;
   }

   int total_angle = 0;
   int i;
   for(i=1;i<=3;i++) {
     51e:	6f 5f       	subi	r22, 0xFF	; 255
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	64 30       	cpi	r22, 0x04	; 4
     524:	71 05       	cpc	r23, r1
     526:	61 f7       	brne	.-40     	; 0x500 <simplify_path+0x26>
            break;
      }
   }

   // Get the angle as a number between 0 and 360 degrees.
   total_angle = total_angle % 360;
     528:	68 e6       	ldi	r22, 0x68	; 104
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	0e 94 6d 11 	call	0x22da	; 0x22da <__divmodhi4>

   // Replace all of those turns with a single one.
   switch(total_angle) {
     530:	8a 35       	cpi	r24, 0x5A	; 90
     532:	91 05       	cpc	r25, r1
     534:	89 f0       	breq	.+34     	; 0x558 <simplify_path+0x7e>
     536:	34 f4       	brge	.+12     	; 0x544 <simplify_path+0x6a>
     538:	89 2b       	or	r24, r25
     53a:	b1 f4       	brne	.+44     	; 0x568 <simplify_path+0x8e>
      case 0:
         pathsol[pathsol_length - 3] = 'S';
     53c:	f9 01       	movw	r30, r18
     53e:	33 97       	sbiw	r30, 0x03	; 3
     540:	83 e5       	ldi	r24, 0x53	; 83
     542:	11 c0       	rjmp	.+34     	; 0x566 <simplify_path+0x8c>

   // Get the angle as a number between 0 and 360 degrees.
   total_angle = total_angle % 360;

   // Replace all of those turns with a single one.
   switch(total_angle) {
     544:	84 3b       	cpi	r24, 0xB4	; 180
     546:	91 05       	cpc	r25, r1
     548:	59 f0       	breq	.+22     	; 0x560 <simplify_path+0x86>
     54a:	8e 30       	cpi	r24, 0x0E	; 14
     54c:	91 40       	sbci	r25, 0x01	; 1
     54e:	61 f4       	brne	.+24     	; 0x568 <simplify_path+0x8e>
         break;
      case 180:
         pathsol[pathsol_length - 3] = 'B';
         break;
      case 270:
         pathsol[pathsol_length - 3] = 'L';
     550:	f9 01       	movw	r30, r18
     552:	33 97       	sbiw	r30, 0x03	; 3
     554:	8c e4       	ldi	r24, 0x4C	; 76
     556:	07 c0       	rjmp	.+14     	; 0x566 <simplify_path+0x8c>
   switch(total_angle) {
      case 0:
         pathsol[pathsol_length - 3] = 'S';
         break;
      case 90:
         pathsol[pathsol_length - 3] = 'R';
     558:	f9 01       	movw	r30, r18
     55a:	33 97       	sbiw	r30, 0x03	; 3
     55c:	82 e5       	ldi	r24, 0x52	; 82
     55e:	03 c0       	rjmp	.+6      	; 0x566 <simplify_path+0x8c>
         break;
      case 180:
         pathsol[pathsol_length - 3] = 'B';
     560:	f9 01       	movw	r30, r18
     562:	33 97       	sbiw	r30, 0x03	; 3
     564:	82 e4       	ldi	r24, 0x42	; 66
         break;
      case 270:
         pathsol[pathsol_length - 3] = 'L';
     566:	80 83       	st	Z, r24
         break;
   }

   // The path is now two steps shorter.
   pathsol_length -= 2;
     568:	42 50       	subi	r20, 0x02	; 2
     56a:	40 93 27 02 	sts	0x0227, r20
     56e:	08 95       	ret

00000570 <maze_solve>:
}

// This function is called once, from main.c.
void maze_solve() {
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	2b 97       	sbiw	r28, 0x0b	; 11
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
   // Loop until we have record the maze.
   while(1) {
      // FIRST MAIN LOOP BODY  
      follow_segment();
     584:	0e 94 db 00 	call	0x1b6	; 0x1b6 <follow_segment>

      // Drive straight a bit.  This helps us in case we entered the
      // intersection at an angle.
      // Note that we are slowing down - this prevents the robot
      // from tipping forward too much.
      set_motors(50,50);
     588:	62 e3       	ldi	r22, 0x32	; 50
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	82 e3       	ldi	r24, 0x32	; 50
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
      delay_ms(50);
     594:	82 e3       	ldi	r24, 0x32	; 50
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
      unsigned char found_straight=0;
      unsigned char found_right=0;

      // Now read the sensors and check the intersection type.
      unsigned int sensors[5];
      read_line_white(sensors,IR_EMITTERS_ON);
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	ce 01       	movw	r24, r28
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	0e 94 07 0c 	call	0x180e	; 0x180e <read_line_white>

      // Check for left and right exits.
      if(sensors[0] < 200){
     5a6:	01 e0       	ldi	r16, 0x01	; 1
     5a8:	89 81       	ldd	r24, Y+1	; 0x01
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	88 3c       	cpi	r24, 0xC8	; 200
     5ae:	91 05       	cpc	r25, r1
     5b0:	08 f0       	brcs	.+2      	; 0x5b4 <maze_solve+0x44>
     5b2:	00 e0       	ldi	r16, 0x00	; 0
         found_left = 1;
      }
      if(sensors[4] < 200){
     5b4:	ff 24       	eor	r15, r15
     5b6:	f3 94       	inc	r15
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     5bc:	88 3c       	cpi	r24, 0xC8	; 200
     5be:	91 05       	cpc	r25, r1
     5c0:	08 f0       	brcs	.+2      	; 0x5c4 <maze_solve+0x54>
     5c2:	f1 2c       	mov	r15, r1
         found_right = 1;
      }

      // Drive straight a bit more - this is enough to line up our
      // wheels with the intersection.
      set_motors(40,40);
     5c4:	68 e2       	ldi	r22, 0x28	; 40
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	88 e2       	ldi	r24, 0x28	; 40
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
      delay_ms(200);
     5d0:	88 ec       	ldi	r24, 0xC8	; 200
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>

      // Check for a straight exit.
      read_line_white(sensors,IR_EMITTERS_ON);
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	ce 01       	movw	r24, r28
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	0e 94 07 0c 	call	0x180e	; 0x180e <read_line_white>
      if(sensors[1] < 200 || sensors[2] < 200 || sensors[3] < 200) {
     5e2:	2b 81       	ldd	r18, Y+3	; 0x03
     5e4:	3c 81       	ldd	r19, Y+4	; 0x04
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	28 3c       	cpi	r18, 0xC8	; 200
     5ec:	31 05       	cpc	r19, r1
     5ee:	58 f0       	brcs	.+22     	; 0x606 <maze_solve+0x96>
     5f0:	11 e0       	ldi	r17, 0x01	; 1
     5f2:	88 3c       	cpi	r24, 0xC8	; 200
     5f4:	91 05       	cpc	r25, r1
     5f6:	58 f0       	brcs	.+22     	; 0x60e <maze_solve+0x9e>
     5f8:	8f 81       	ldd	r24, Y+7	; 0x07
     5fa:	98 85       	ldd	r25, Y+8	; 0x08
     5fc:	88 3c       	cpi	r24, 0xC8	; 200
     5fe:	91 05       	cpc	r25, r1
     600:	30 f0       	brcs	.+12     	; 0x60e <maze_solve+0x9e>
     602:	10 e0       	ldi	r17, 0x00	; 0
     604:	04 c0       	rjmp	.+8      	; 0x60e <maze_solve+0x9e>
         found_straight = 1;
      }

      // Check for the ending spot.
      // If all 3 center sensors are on white, we have solved the maze.
      if(sensors[1] < 200 && sensors[2] < 200 && sensors[3] < 200) {
     606:	88 3c       	cpi	r24, 0xC8	; 200
     608:	91 05       	cpc	r25, r1
     60a:	18 f1       	brcs	.+70     	; 0x652 <maze_solve+0xe2>
     60c:	11 e0       	ldi	r17, 0x01	; 1
      }

      // Intersection identification is complete.
      // If the maze has been solved, we can follow the existing
      // path.  Otherwise, we need to learn the solution.
      unsigned char dir = select_turn(found_left, found_straight, found_right);
     60e:	4f 2d       	mov	r20, r15
     610:	61 2f       	mov	r22, r17
     612:	80 2f       	mov	r24, r16
     614:	0e 94 44 02 	call	0x488	; 0x488 <select_turn>
     618:	e8 2e       	mov	r14, r24
        
      int recint = record_intersec(found_left, found_straight, found_right);
     61a:	4f 2d       	mov	r20, r15
     61c:	61 2f       	mov	r22, r17
     61e:	80 2f       	mov	r24, r16
     620:	0e 94 52 02 	call	0x4a4	; 0x4a4 <record_intersec>
     624:	8c 01       	movw	r16, r24
      // Make the turn indicated by the path.
      turn(dir);
     626:	8e 2d       	mov	r24, r14
     628:	0e 94 8b 04 	call	0x916	; 0x916 <turn>

      // Store the intersection in the path variable.
      path[path_length] = dir;
     62c:	90 91 97 02 	lds	r25, 0x0297
     630:	29 2f       	mov	r18, r25
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	e8 56       	subi	r30, 0x68	; 104
     638:	fd 4f       	sbci	r31, 0xFD	; 253
     63a:	e0 82       	st	Z, r14
      intersection[path_length] = recint;
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	f9 01       	movw	r30, r18
     642:	ec 5e       	subi	r30, 0xEC	; 236
     644:	fc 4f       	sbci	r31, 0xFC	; 252
     646:	11 83       	std	Z+1, r17	; 0x01
     648:	00 83       	st	Z, r16
      path_length ++;
     64a:	9f 5f       	subi	r25, 0xFF	; 255
     64c:	90 93 97 02 	sts	0x0297, r25

      // You should check to make sure that the path_length does not
      // exceed the bounds of the array.  We'll ignore that in this
      // example.  
   }
     650:	99 cf       	rjmp	.-206    	; 0x584 <maze_solve+0x14>
         found_straight = 1;
      }

      // Check for the ending spot.
      // If all 3 center sensors are on white, we have solved the maze.
      if(sensors[1] < 200 && sensors[2] < 200 && sensors[3] < 200) {
     652:	8f 81       	ldd	r24, Y+7	; 0x07
     654:	98 85       	ldd	r25, Y+8	; 0x08
     656:	88 3c       	cpi	r24, 0xC8	; 200
     658:	91 05       	cpc	r25, r1
     65a:	c0 f6       	brcc	.-80     	; 0x60c <maze_solve+0x9c>
      // then we check how many values of m we have, if we have more than one value we add another step and so on until we have one m value. 
      int i2;
      int c2;

      for (i=0;i<100;i++) {
         if (i<(100-paths_length)) {
     65c:	04 e6       	ldi	r16, 0x64	; 100
     65e:	10 e0       	ldi	r17, 0x00	; 0

   // Maze Recorded!
   while(1) {
      
      // Beep to show that we finished the maze.
      paths_length=0;
     660:	10 92 8c 02 	sts	0x028C, r1
      set_motors(0,0);
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
      play(">>a32");
     670:	8c ea       	ldi	r24, 0xAC	; 172
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 a5 08 	call	0x114a	; 0x114a <play>

      // Wait for the user to press a button.
      while(!button_is_pressed(BUTTON_B)) {
     678:	80 e1       	ldi	r24, 0x10	; 16
     67a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <button_is_pressed>
     67e:	81 11       	cpse	r24, r1
     680:	13 c0       	rjmp	.+38     	; 0x6a8 <maze_solve+0x138>
         clear();
     682:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <clear>
         print("Recorded!");
     686:	82 eb       	ldi	r24, 0xB2	; 178
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <print>
         lcd_goto_xy(0,1);
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 81 0a 	call	0x1502	; 0x1502 <lcd_goto_xy>
         print("Press B");
     696:	86 e4       	ldi	r24, 0x46	; 70
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <print>
         delay_ms(30);
     69e:	8e e1       	ldi	r24, 0x1E	; 30
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
     6a6:	e8 cf       	rjmp	.-48     	; 0x678 <maze_solve+0x108>
      }
      
      while(button_is_pressed(BUTTON_B)) {
     6a8:	80 e1       	ldi	r24, 0x10	; 16
     6aa:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <button_is_pressed>
     6ae:	88 23       	and	r24, r24
     6b0:	99 f0       	breq	.+38     	; 0x6d8 <maze_solve+0x168>
         clear();
     6b2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <clear>
         print("Here we");
     6b6:	8c eb       	ldi	r24, 0xBC	; 188
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <print>
         lcd_goto_xy(0,1);
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 81 0a 	call	0x1502	; 0x1502 <lcd_goto_xy>
         print("Go!");
     6c6:	8e e4       	ldi	r24, 0x4E	; 78
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <print>
         delay_ms(1000);
     6ce:	88 ee       	ldi	r24, 0xE8	; 232
     6d0:	93 e0       	ldi	r25, 0x03	; 3
     6d2:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
     6d6:	e8 cf       	rjmp	.-48     	; 0x6a8 <maze_solve+0x138>
     6d8:	e1 2c       	mov	r14, r1
     6da:	f1 2c       	mov	r15, r1
      }
         
      int i=0;   
      while (i<4) {
         follow_segment();
     6dc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <follow_segment>
         // Drive straight a bit.  This helps us in case we entered the
         // intersection at an angle.
         // Note that we are slowing down - this prevents the robot
         // from tipping forward too much.
         set_motors(50,50);
     6e0:	62 e3       	ldi	r22, 0x32	; 50
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	82 e3       	ldi	r24, 0x32	; 50
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
         delay_ms(50);
     6ec:	82 e3       	ldi	r24, 0x32	; 50
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
         unsigned char found_straight=0;
         unsigned char found_right=0;

         // Now read the sensors and check the intersection type.
         unsigned int sensors[5];
         read_line_white(sensors,IR_EMITTERS_ON);
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	ce 01       	movw	r24, r28
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	0e 94 07 0c 	call	0x180e	; 0x180e <read_line_white>

         // Check for left and right exits.
         if(sensors[0] < 200) {
     6fe:	dd 24       	eor	r13, r13
     700:	d3 94       	inc	r13
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	88 3c       	cpi	r24, 0xC8	; 200
     708:	91 05       	cpc	r25, r1
     70a:	08 f0       	brcs	.+2      	; 0x70e <maze_solve+0x19e>
     70c:	d1 2c       	mov	r13, r1
            found_left = 1;
         }
         if(sensors[4] < 200) {
     70e:	cc 24       	eor	r12, r12
     710:	c3 94       	inc	r12
     712:	89 85       	ldd	r24, Y+9	; 0x09
     714:	9a 85       	ldd	r25, Y+10	; 0x0a
     716:	88 3c       	cpi	r24, 0xC8	; 200
     718:	91 05       	cpc	r25, r1
     71a:	08 f0       	brcs	.+2      	; 0x71e <maze_solve+0x1ae>
     71c:	c1 2c       	mov	r12, r1
            found_right = 1;
         }

         // Drive straight a bit more - this is enough to line up our
         // wheels with the intersection.
         set_motors(40,40);
     71e:	68 e2       	ldi	r22, 0x28	; 40
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	88 e2       	ldi	r24, 0x28	; 40
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
         delay_ms(200);
     72a:	88 ec       	ldi	r24, 0xC8	; 200
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>

         // Check for a straight exit.
         read_line_white(sensors,IR_EMITTERS_ON);
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	0e 94 07 0c 	call	0x180e	; 0x180e <read_line_white>
         if(sensors[1] < 200 || sensors[2] < 200 || sensors[3] < 200) {
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	9c 81       	ldd	r25, Y+4	; 0x04
     740:	88 3c       	cpi	r24, 0xC8	; 200
     742:	91 05       	cpc	r25, r1
     744:	68 f0       	brcs	.+26     	; 0x760 <maze_solve+0x1f0>
     746:	8d 81       	ldd	r24, Y+5	; 0x05
     748:	9e 81       	ldd	r25, Y+6	; 0x06
     74a:	88 3c       	cpi	r24, 0xC8	; 200
     74c:	91 05       	cpc	r25, r1
     74e:	40 f0       	brcs	.+16     	; 0x760 <maze_solve+0x1f0>
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	2f 81       	ldd	r18, Y+7	; 0x07
     754:	38 85       	ldd	r19, Y+8	; 0x08
     756:	28 3c       	cpi	r18, 0xC8	; 200
     758:	31 05       	cpc	r19, r1
     75a:	18 f0       	brcs	.+6      	; 0x762 <maze_solve+0x1f2>
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	01 c0       	rjmp	.+2      	; 0x762 <maze_solve+0x1f2>
            found_straight = 1;
     760:	91 e0       	ldi	r25, 0x01	; 1
         }

         unsigned char dir = select_turn(found_left, found_straight, found_right);
     762:	4c 2d       	mov	r20, r12
     764:	69 2f       	mov	r22, r25
     766:	8d 2d       	mov	r24, r13
     768:	9b 87       	std	Y+11, r25	; 0x0b
     76a:	0e 94 44 02 	call	0x488	; 0x488 <select_turn>
     76e:	b8 2e       	mov	r11, r24
        
         int recint = record_intersec(found_left, found_straight, found_right);
     770:	4c 2d       	mov	r20, r12
     772:	9b 85       	ldd	r25, Y+11	; 0x0b
     774:	69 2f       	mov	r22, r25
     776:	8d 2d       	mov	r24, r13
     778:	0e 94 52 02 	call	0x4a4	; 0x4a4 <record_intersec>
     77c:	6c 01       	movw	r12, r24
         // Make the turn indicated by the path.
         turn(dir);
     77e:	8b 2d       	mov	r24, r11
     780:	0e 94 8b 04 	call	0x916	; 0x916 <turn>

         // Store the intersection in the path variable.
         paths[paths_length] = dir;
     784:	90 91 8c 02 	lds	r25, 0x028C
     788:	29 2f       	mov	r18, r25
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	f9 01       	movw	r30, r18
     78e:	e3 57       	subi	r30, 0x73	; 115
     790:	fd 4f       	sbci	r31, 0xFD	; 253
     792:	b0 82       	st	Z, r11
         intersections[paths_length] = recint;
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	f9 01       	movw	r30, r18
     79a:	e0 50       	subi	r30, 0x00	; 0
     79c:	fd 4f       	sbci	r31, 0xFD	; 253
     79e:	d1 82       	std	Z+1, r13	; 0x01
     7a0:	c0 82       	st	Z, r12
     7a2:	9f 5f       	subi	r25, 0xFF	; 255
         if (paths[paths_length] != 'B') {
     7a4:	82 e4       	ldi	r24, 0x42	; 66
     7a6:	b8 16       	cp	r11, r24
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <maze_solve+0x240>
            i++;
     7aa:	ef ef       	ldi	r30, 0xFF	; 255
     7ac:	ee 1a       	sub	r14, r30
     7ae:	fe 0a       	sbc	r15, r30
            paths_length ++;
         } else {
            paths_length ++;
     7b0:	90 93 8c 02 	sts	0x028C, r25
         print("Go!");
         delay_ms(1000);
      }
         
      int i=0;   
      while (i<4) {
     7b4:	f4 e0       	ldi	r31, 0x04	; 4
     7b6:	ef 16       	cp	r14, r31
     7b8:	f1 04       	cpc	r15, r1
     7ba:	0c f4       	brge	.+2      	; 0x7be <maze_solve+0x24e>
     7bc:	8f cf       	rjmp	.-226    	; 0x6dc <maze_solve+0x16c>
      // then we check how many values of m we have, if we have more than one value we add another step and so on until we have one m value. 
      int i2;
      int c2;

      for (i=0;i<100;i++) {
         if (i<(100-paths_length)) {
     7be:	20 91 8c 02 	lds	r18, 0x028C
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	68 01       	movw	r12, r16
     7c6:	c2 1a       	sub	r12, r18
     7c8:	d3 0a       	sbc	r13, r19
     7ca:	a0 90 14 01 	lds	r10, 0x0114
     7ce:	b0 90 15 01 	lds	r11, 0x0115
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	4c 15       	cp	r20, r12
     7d8:	5d 05       	cpc	r21, r13
     7da:	6c f5       	brge	.+90     	; 0x836 <maze_solve+0x2c6>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	7a 01       	movw	r14, r20
     7e2:	e2 0e       	add	r14, r18
     7e4:	f3 1e       	adc	r15, r19
     7e6:	24 c0       	rjmp	.+72     	; 0x830 <maze_solve+0x2c0>
            i2=0;
            while (i2<paths_length) {
               c2=0;
               if (paths[i2]==path[i+i2] && intersections[i2]==intersection[i+i2]) {
     7e8:	ba 01       	movw	r22, r20
     7ea:	68 0f       	add	r22, r24
     7ec:	79 1f       	adc	r23, r25
     7ee:	db 01       	movw	r26, r22
     7f0:	a8 56       	subi	r26, 0x68	; 104
     7f2:	bd 4f       	sbci	r27, 0xFD	; 253
     7f4:	fc 01       	movw	r30, r24
     7f6:	e3 57       	subi	r30, 0x73	; 115
     7f8:	fd 4f       	sbci	r31, 0xFD	; 253
     7fa:	f0 81       	ld	r31, Z
     7fc:	ec 91       	ld	r30, X
     7fe:	fe 13       	cpse	r31, r30
     800:	26 c0       	rjmp	.+76     	; 0x84e <maze_solve+0x2de>
     802:	dc 01       	movw	r26, r24
     804:	aa 0f       	add	r26, r26
     806:	bb 1f       	adc	r27, r27
     808:	a0 50       	subi	r26, 0x00	; 0
     80a:	bd 4f       	sbci	r27, 0xFD	; 253
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	fb 01       	movw	r30, r22
     812:	ec 5e       	subi	r30, 0xEC	; 236
     814:	fc 4f       	sbci	r31, 0xFC	; 252
     816:	6d 91       	ld	r22, X+
     818:	7c 91       	ld	r23, X
     81a:	01 90       	ld	r0, Z+
     81c:	f0 81       	ld	r31, Z
     81e:	e0 2d       	mov	r30, r0
     820:	6e 17       	cp	r22, r30
     822:	7f 07       	cpc	r23, r31
     824:	a1 f4       	brne	.+40     	; 0x84e <maze_solve+0x2de>
                  c2=1;
                  i2++;
     826:	01 96       	adiw	r24, 0x01	; 1
               }
               if (c2!=1) {
                  i2=100;
               }
               if (i2 == paths_length ) {
     828:	82 17       	cp	r24, r18
     82a:	93 07       	cpc	r25, r19
     82c:	09 f4       	brne	.+2      	; 0x830 <maze_solve+0x2c0>
     82e:	57 01       	movw	r10, r14
      int c2;

      for (i=0;i<100;i++) {
         if (i<(100-paths_length)) {
            i2=0;
            while (i2<paths_length) {
     830:	82 17       	cp	r24, r18
     832:	93 07       	cpc	r25, r19
     834:	cc f2       	brlt	.-78     	; 0x7e8 <maze_solve+0x278>
      // Its Possible to modify this code, so we start by running the robot two steps, 
      // then we check how many values of m we have, if we have more than one value we add another step and so on until we have one m value. 
      int i2;
      int c2;

      for (i=0;i<100;i++) {
     836:	4f 5f       	subi	r20, 0xFF	; 255
     838:	5f 4f       	sbci	r21, 0xFF	; 255
     83a:	44 36       	cpi	r20, 0x64	; 100
     83c:	51 05       	cpc	r21, r1
     83e:	59 f6       	brne	.-106    	; 0x7d6 <maze_solve+0x266>
     840:	a0 92 14 01 	sts	0x0114, r10
     844:	b0 92 15 01 	sts	0x0115, r11
     848:	e1 2c       	mov	r14, r1
     84a:	f1 2c       	mov	r15, r1
     84c:	03 c0       	rjmp	.+6      	; 0x854 <maze_solve+0x2e4>
               if (paths[i2]==path[i+i2] && intersections[i2]==intersection[i+i2]) {
                  c2=1;
                  i2++;
               }
               if (c2!=1) {
                  i2=100;
     84e:	84 e6       	ldi	r24, 0x64	; 100
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	ea cf       	rjmp	.-44     	; 0x828 <maze_solve+0x2b8>
            }
         }
      }

      // We found the Robot location, now find the shortest way to the end.
      for(i=0;i<(100-m);i++) {
     854:	80 91 14 01 	lds	r24, 0x0114
     858:	90 91 15 01 	lds	r25, 0x0115
     85c:	98 01       	movw	r18, r16
     85e:	28 1b       	sub	r18, r24
     860:	39 0b       	sbc	r19, r25
     862:	e2 16       	cp	r14, r18
     864:	f3 06       	cpc	r15, r19
     866:	bc f4       	brge	.+46     	; 0x896 <maze_solve+0x326>
         pathsol[pathsol_length]=path[i+m];
     868:	20 91 27 02 	lds	r18, 0x0227
     86c:	e2 2f       	mov	r30, r18
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	e8 5d       	subi	r30, 0xD8	; 216
     872:	fd 4f       	sbci	r31, 0xFD	; 253
     874:	a7 01       	movw	r20, r14
     876:	48 56       	subi	r20, 0x68	; 104
     878:	5d 4f       	sbci	r21, 0xFD	; 253
     87a:	da 01       	movw	r26, r20
     87c:	a8 0f       	add	r26, r24
     87e:	b9 1f       	adc	r27, r25
     880:	8c 91       	ld	r24, X
     882:	80 83       	st	Z, r24
         pathsol_length ++;
     884:	2f 5f       	subi	r18, 0xFF	; 255
     886:	20 93 27 02 	sts	0x0227, r18
         simplify_path();
     88a:	0e 94 6d 02 	call	0x4da	; 0x4da <simplify_path>
            }
         }
      }

      // We found the Robot location, now find the shortest way to the end.
      for(i=0;i<(100-m);i++) {
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	e8 1a       	sub	r14, r24
     892:	f8 0a       	sbc	r15, r24
     894:	df cf       	rjmp	.-66     	; 0x854 <maze_solve+0x2e4>
     896:	88 e2       	ldi	r24, 0x28	; 40
     898:	e8 2e       	mov	r14, r24
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	f8 2e       	mov	r15, r24
         simplify_path();
      }

      // Go to the end.
      i=0;
      while(i<pathsol_length) {
     89e:	80 91 27 02 	lds	r24, 0x0227
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	97 01       	movw	r18, r14
     8a6:	28 52       	subi	r18, 0x28	; 40
     8a8:	32 40       	sbci	r19, 0x02	; 2
     8aa:	28 17       	cp	r18, r24
     8ac:	39 07       	cpc	r19, r25
     8ae:	0c f0       	brlt	.+2      	; 0x8b2 <maze_solve+0x342>
     8b0:	d7 ce       	rjmp	.-594    	; 0x660 <maze_solve+0xf0>
         // Re-run the maze.  It's not necessary to identify the
         // intersections, so this loop is really simple.
            follow_segment();
     8b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <follow_segment>

            // Drive straight while slowing down, as before.
            set_motors(50,50);
     8b6:	62 e3       	ldi	r22, 0x32	; 50
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	82 e3       	ldi	r24, 0x32	; 50
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
            delay_ms(50);
     8c2:	82 e3       	ldi	r24, 0x32	; 50
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
            set_motors(40,40);
     8ca:	68 e2       	ldi	r22, 0x28	; 40
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	88 e2       	ldi	r24, 0x28	; 40
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
            delay_ms(200);
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>

            // Make a turn according to the instruction stored in
            // pathsol[i].
            turn(pathsol[i]);
     8de:	f7 01       	movw	r30, r14
     8e0:	81 91       	ld	r24, Z+
     8e2:	7f 01       	movw	r14, r30
     8e4:	0e 94 8b 04 	call	0x916	; 0x916 <turn>
            i+=1;
            unsigned int sensors[5];
            read_line_white(sensors,IR_EMITTERS_ON);
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	0e 94 07 0c 	call	0x180e	; 0x180e <read_line_white>
            // The end is reached.
            if(sensors[1] < 200 && sensors[2] < 200 && sensors[3] < 200) {
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	9c 81       	ldd	r25, Y+4	; 0x04
     8f6:	88 3c       	cpi	r24, 0xC8	; 200
     8f8:	91 05       	cpc	r25, r1
     8fa:	88 f6       	brcc	.-94     	; 0x89e <maze_solve+0x32e>
     8fc:	8d 81       	ldd	r24, Y+5	; 0x05
     8fe:	9e 81       	ldd	r25, Y+6	; 0x06
     900:	88 3c       	cpi	r24, 0xC8	; 200
     902:	91 05       	cpc	r25, r1
     904:	60 f6       	brcc	.-104    	; 0x89e <maze_solve+0x32e>
     906:	8f 81       	ldd	r24, Y+7	; 0x07
     908:	98 85       	ldd	r25, Y+8	; 0x08
     90a:	88 3c       	cpi	r24, 0xC8	; 200
     90c:	91 05       	cpc	r25, r1
     90e:	38 f6       	brcc	.-114    	; 0x89e <maze_solve+0x32e>
               pathsol_length=0;
     910:	10 92 27 02 	sts	0x0227, r1
     914:	c4 cf       	rjmp	.-120    	; 0x89e <maze_solve+0x32e>

00000916 <turn>:

// Turns according to the parameter dir, which should be 'L', 'R', 'S'
// (straight), or 'B' (back).
void turn(char dir)
{
	switch(dir)
     916:	8c 34       	cpi	r24, 0x4C	; 76
     918:	69 f0       	breq	.+26     	; 0x934 <turn+0x1e>
     91a:	82 35       	cpi	r24, 0x52	; 82
     91c:	81 f0       	breq	.+32     	; 0x93e <turn+0x28>
     91e:	82 34       	cpi	r24, 0x42	; 66
     920:	c1 f4       	brne	.+48     	; 0x952 <turn+0x3c>
		set_motors(80,-80);
		delay_ms(200);
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
     922:	60 eb       	ldi	r22, 0xB0	; 176
     924:	7f ef       	ldi	r23, 0xFF	; 255
     926:	80 e5       	ldi	r24, 0x50	; 80
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
		delay_ms(400);
     92e:	80 e9       	ldi	r24, 0x90	; 144
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0d c0       	rjmp	.+26     	; 0x94e <turn+0x38>
{
	switch(dir)
	{
	case 'L':
		// Turn left.
		set_motors(-80,80);
     934:	60 e5       	ldi	r22, 0x50	; 80
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 eb       	ldi	r24, 0xB0	; 176
     93a:	9f ef       	ldi	r25, 0xFF	; 255
     93c:	04 c0       	rjmp	.+8      	; 0x946 <turn+0x30>
		delay_ms(200);
		break;
	case 'R':
		// Turn right.
		set_motors(80,-80);
     93e:	60 eb       	ldi	r22, 0xB0	; 176
     940:	7f ef       	ldi	r23, 0xFF	; 255
     942:	80 e5       	ldi	r24, 0x50	; 80
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 37 0b 	call	0x166e	; 0x166e <set_motors>
		delay_ms(200);
     94a:	88 ec       	ldi	r24, 0xC8	; 200
     94c:	90 e0       	ldi	r25, 0x00	; 0
		break;
	case 'B':
		// Turn around.
		set_motors(80,-80);
		delay_ms(400);
     94e:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <delay_ms>
     952:	08 95       	ret

00000954 <_ZN15OrangutanAnalog7setModeEh.part.0>:
     954:	ec e7       	ldi	r30, 0x7C	; 124
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	8f 7d       	andi	r24, 0xDF	; 223
     95c:	80 83       	st	Z, r24
     95e:	08 95       	ret

00000960 <_ZN15OrangutanAnalog7setModeEh>:
     960:	81 11       	cpse	r24, r1
     962:	03 c0       	rjmp	.+6      	; 0x96a <_ZN15OrangutanAnalog7setModeEh+0xa>
     964:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN15OrangutanAnalog7setModeEh.part.0>
     968:	08 95       	ret
     96a:	80 91 7c 00 	lds	r24, 0x007C
     96e:	80 62       	ori	r24, 0x20	; 32
     970:	80 93 7c 00 	sts	0x007C, r24
     974:	08 95       	ret

00000976 <_ZN15OrangutanAnalog7getModeEv>:
     976:	80 91 7c 00 	lds	r24, 0x007C
     97a:	85 fb       	bst	r24, 5
     97c:	88 27       	eor	r24, r24
     97e:	80 f9       	bld	r24, 0
     980:	08 95       	ret

00000982 <_ZN15OrangutanAnalog16conversionResultEv>:
     982:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN15OrangutanAnalog7getModeEv>
     986:	88 23       	and	r24, r24
     988:	21 f0       	breq	.+8      	; 0x992 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     98a:	80 91 79 00 	lds	r24, 0x0079
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	08 95       	ret
     992:	80 91 78 00 	lds	r24, 0x0078
     996:	90 91 79 00 	lds	r25, 0x0079
     99a:	08 95       	ret

0000099c <_ZN15OrangutanAnalog15startConversionEhh>:
     99c:	80 32       	cpi	r24, 0x20	; 32
     99e:	a0 f4       	brcc	.+40     	; 0x9c8 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     9a0:	97 e8       	ldi	r25, 0x87	; 135
     9a2:	90 93 7a 00 	sts	0x007A, r25
     9a6:	90 91 7c 00 	lds	r25, 0x007C
     9aa:	66 23       	and	r22, r22
     9ac:	11 f0       	breq	.+4      	; 0x9b2 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     9ae:	90 6c       	ori	r25, 0xC0	; 192
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     9b2:	9f 77       	andi	r25, 0x7F	; 127
     9b4:	90 64       	ori	r25, 0x40	; 64
     9b6:	90 7e       	andi	r25, 0xE0	; 224
     9b8:	98 2b       	or	r25, r24
     9ba:	90 93 7c 00 	sts	0x007C, r25
     9be:	80 91 7a 00 	lds	r24, 0x007A
     9c2:	80 64       	ori	r24, 0x40	; 64
     9c4:	80 93 7a 00 	sts	0x007A, r24
     9c8:	08 95       	ret

000009ca <_ZN15OrangutanAnalog11readAverageEhj>:
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	eb ee       	ldi	r30, 0xEB	; 235
     9d0:	f4 e0       	ldi	r31, 0x04	; 4
     9d2:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x14>
     9d6:	eb 01       	movw	r28, r22
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN15OrangutanAnalog15startConversionEhh>
     9de:	80 91 7a 00 	lds	r24, 0x007A
     9e2:	86 fd       	sbrc	r24, 6
     9e4:	fc cf       	rjmp	.-8      	; 0x9de <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     9e6:	8e 01       	movw	r16, r28
     9e8:	c1 2c       	mov	r12, r1
     9ea:	d1 2c       	mov	r13, r1
     9ec:	76 01       	movw	r14, r12
     9ee:	80 91 7a 00 	lds	r24, 0x007A
     9f2:	80 64       	ori	r24, 0x40	; 64
     9f4:	80 93 7a 00 	sts	0x007A, r24
     9f8:	80 91 7a 00 	lds	r24, 0x007A
     9fc:	86 fd       	sbrc	r24, 6
     9fe:	fc cf       	rjmp	.-8      	; 0x9f8 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     a00:	0e 94 c1 04 	call	0x982	; 0x982 <_ZN15OrangutanAnalog16conversionResultEv>
     a04:	c8 0e       	add	r12, r24
     a06:	d9 1e       	adc	r13, r25
     a08:	e1 1c       	adc	r14, r1
     a0a:	f1 1c       	adc	r15, r1
     a0c:	01 50       	subi	r16, 0x01	; 1
     a0e:	11 09       	sbc	r17, r1
     a10:	01 15       	cp	r16, r1
     a12:	11 05       	cpc	r17, r1
     a14:	61 f7       	brne	.-40     	; 0x9ee <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     a16:	ce 01       	movw	r24, r28
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	c0 34       	cpi	r28, 0x40	; 64
     a1e:	d1 05       	cpc	r29, r1
     a20:	38 f4       	brcc	.+14     	; 0xa30 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     a22:	8c 0d       	add	r24, r12
     a24:	9d 1d       	adc	r25, r13
     a26:	be 01       	movw	r22, r28
     a28:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
     a2c:	cb 01       	movw	r24, r22
     a2e:	0e c0       	rjmp	.+28     	; 0xa4c <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     a30:	a7 01       	movw	r20, r14
     a32:	96 01       	movw	r18, r12
     a34:	28 0f       	add	r18, r24
     a36:	39 1f       	adc	r19, r25
     a38:	41 1d       	adc	r20, r1
     a3a:	51 1d       	adc	r21, r1
     a3c:	ca 01       	movw	r24, r20
     a3e:	b9 01       	movw	r22, r18
     a40:	9e 01       	movw	r18, r28
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmodsi4>
     a4a:	c9 01       	movw	r24, r18
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	e8 e0       	ldi	r30, 0x08	; 8
     a52:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x14>

00000a56 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     a56:	cf 92       	push	r12
     a58:	df 92       	push	r13
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	a0 91 00 01 	lds	r26, 0x0100
     a62:	b0 91 01 01 	lds	r27, 0x0101
     a66:	9c 01       	movw	r18, r24
     a68:	0e 94 c2 11 	call	0x2384	; 0x2384 <__umulhisi3>
     a6c:	6b 01       	movw	r12, r22
     a6e:	7c 01       	movw	r14, r24
     a70:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN15OrangutanAnalog7getModeEv>
     a74:	88 23       	and	r24, r24
     a76:	59 f0       	breq	.+22     	; 0xa8e <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     a78:	c7 01       	movw	r24, r14
     a7a:	b6 01       	movw	r22, r12
     a7c:	61 58       	subi	r22, 0x81	; 129
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	8f 4f       	sbci	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	2f ef       	ldi	r18, 0xFF	; 255
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	0a c0       	rjmp	.+20     	; 0xaa2 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     a8e:	c7 01       	movw	r24, r14
     a90:	b6 01       	movw	r22, r12
     a92:	61 50       	subi	r22, 0x01	; 1
     a94:	7e 4f       	sbci	r23, 0xFE	; 254
     a96:	8f 4f       	sbci	r24, 0xFF	; 255
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	33 e0       	ldi	r19, 0x03	; 3
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmodsi4>
     aa6:	c9 01       	movw	r24, r18
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	08 95       	ret

00000ab2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     ab2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <_ZN15OrangutanAnalog11readAverageEhj>
     ab6:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN15OrangutanAnalog12toMillivoltsEj>
     aba:	08 95       	ret

00000abc <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	0e 94 bb 04 	call	0x976	; 0x976 <_ZN15OrangutanAnalog7getModeEv>
     ac6:	18 2f       	mov	r17, r24
     ac8:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN15OrangutanAnalog7setModeEh.part.0>
     acc:	6a e0       	ldi	r22, 0x0A	; 10
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	86 e0       	ldi	r24, 0x06	; 6
     ad2:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     ad6:	ec 01       	movw	r28, r24
     ad8:	81 2f       	mov	r24, r17
     ada:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN15OrangutanAnalog7setModeEh>
     ade:	ce 01       	movw	r24, r28
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	8c 0f       	add	r24, r28
     ae6:	9d 1f       	adc	r25, r29
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	96 95       	lsr	r25
     aec:	87 95       	ror	r24
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	08 95       	ret

00000af6 <read_battery_millivolts_3pi>:
     af6:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     afa:	08 95       	ret

00000afc <_ZL16currentCharacterv>:
     afc:	90 91 c9 01 	lds	r25, 0x01C9
     b00:	e0 91 c4 01 	lds	r30, 0x01C4
     b04:	f0 91 c5 01 	lds	r31, 0x01C5
     b08:	99 23       	and	r25, r25
     b0a:	11 f0       	breq	.+4      	; 0xb10 <_ZL16currentCharacterv+0x14>
     b0c:	84 91       	lpm	r24, Z
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <_ZL16currentCharacterv+0x16>
     b10:	80 81       	ld	r24, Z
     b12:	2f eb       	ldi	r18, 0xBF	; 191
     b14:	28 0f       	add	r18, r24
     b16:	2a 31       	cpi	r18, 0x1A	; 26
     b18:	10 f4       	brcc	.+4      	; 0xb1e <_ZL16currentCharacterv+0x22>
     b1a:	80 5e       	subi	r24, 0xE0	; 224
     b1c:	08 95       	ret
     b1e:	80 32       	cpi	r24, 0x20	; 32
     b20:	49 f4       	brne	.+18     	; 0xb34 <_ZL16currentCharacterv+0x38>
     b22:	9f 01       	movw	r18, r30
     b24:	2f 5f       	subi	r18, 0xFF	; 255
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	30 93 c5 01 	sts	0x01C5, r19
     b2c:	20 93 c4 01 	sts	0x01C4, r18
     b30:	ef 2b       	or	r30, r31
     b32:	31 f7       	brne	.-52     	; 0xb00 <_ZL16currentCharacterv+0x4>
     b34:	08 95       	ret

00000b36 <_ZL9getNumberv>:
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL16currentCharacterv>
     b40:	c0 e0       	ldi	r28, 0x00	; 0
     b42:	d0 e0       	ldi	r29, 0x00	; 0
     b44:	1a e0       	ldi	r17, 0x0A	; 10
     b46:	90 ed       	ldi	r25, 0xD0	; 208
     b48:	98 0f       	add	r25, r24
     b4a:	9a 30       	cpi	r25, 0x0A	; 10
     b4c:	b8 f4       	brcc	.+46     	; 0xb7c <_ZL9getNumberv+0x46>
     b4e:	9e 01       	movw	r18, r28
     b50:	12 9f       	mul	r17, r18
     b52:	e0 01       	movw	r28, r0
     b54:	13 9f       	mul	r17, r19
     b56:	d0 0d       	add	r29, r0
     b58:	11 24       	eor	r1, r1
     b5a:	c8 0f       	add	r28, r24
     b5c:	d1 1d       	adc	r29, r1
     b5e:	87 fd       	sbrc	r24, 7
     b60:	da 95       	dec	r29
     b62:	e0 97       	sbiw	r28, 0x30	; 48
     b64:	80 91 c4 01 	lds	r24, 0x01C4
     b68:	90 91 c5 01 	lds	r25, 0x01C5
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	90 93 c5 01 	sts	0x01C5, r25
     b72:	80 93 c4 01 	sts	0x01C4, r24
     b76:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL16currentCharacterv>
     b7a:	e5 cf       	rjmp	.-54     	; 0xb46 <_ZL9getNumberv+0x10>
     b7c:	ce 01       	movw	r24, r28
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	08 95       	ret

00000b86 <_ZN15OrangutanBuzzer5init2Ev>:
     b86:	10 92 6f 00 	sts	0x006F, r1
     b8a:	83 e2       	ldi	r24, 0x23	; 35
     b8c:	80 93 80 00 	sts	0x0080, r24
     b90:	81 e1       	ldi	r24, 0x11	; 17
     b92:	80 93 81 00 	sts	0x0081, r24
     b96:	10 92 82 00 	sts	0x0082, r1
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	97 e2       	ldi	r25, 0x27	; 39
     b9e:	90 93 89 00 	sts	0x0089, r25
     ba2:	80 93 88 00 	sts	0x0088, r24
     ba6:	10 92 8b 00 	sts	0x008B, r1
     baa:	10 92 8a 00 	sts	0x008A, r1
     bae:	22 9a       	sbi	0x04, 2	; 4
     bb0:	78 94       	sei
     bb2:	08 95       	ret

00000bb4 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
     bb4:	8f 92       	push	r8
     bb6:	9f 92       	push	r9
     bb8:	af 92       	push	r10
     bba:	bf 92       	push	r11
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	5c 01       	movw	r10, r24
     bcc:	8b 01       	movw	r16, r22
     bce:	d4 2e       	mov	r13, r20
     bd0:	80 91 c6 01 	lds	r24, 0x01C6
     bd4:	81 11       	cpse	r24, r1
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	80 93 c6 01 	sts	0x01C6, r24
     bde:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN15OrangutanBuzzer5init2Ev>
     be2:	10 92 0b 01 	sts	0x010B, r1
     be6:	b7 fe       	sbrs	r11, 7
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
     bea:	e8 94       	clt
     bec:	b7 f8       	bld	r11, 7
     bee:	2a e0       	ldi	r18, 0x0A	; 10
     bf0:	f2 2e       	mov	r15, r18
     bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
     bf4:	ff 24       	eor	r15, r15
     bf6:	f3 94       	inc	r15
     bf8:	e0 90 81 00 	lds	r14, 0x0081
     bfc:	2e 2d       	mov	r18, r14
     bfe:	28 7f       	andi	r18, 0xF8	; 248
     c00:	e2 2e       	mov	r14, r18
     c02:	48 ec       	ldi	r20, 0xC8	; 200
     c04:	f4 9e       	mul	r15, r20
     c06:	c0 01       	movw	r24, r0
     c08:	11 24       	eor	r1, r1
     c0a:	8a 15       	cp	r24, r10
     c0c:	9b 05       	cpc	r25, r11
     c0e:	e0 f4       	brcc	.+56     	; 0xc48 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
     c10:	e5 01       	movw	r28, r10
     c12:	51 e1       	ldi	r21, 0x11	; 17
     c14:	a5 16       	cp	r10, r21
     c16:	57 e2       	ldi	r21, 0x27	; 39
     c18:	b5 06       	cpc	r11, r21
     c1a:	10 f0       	brcs	.+4      	; 0xc20 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
     c1c:	c0 e1       	ldi	r28, 0x10	; 16
     c1e:	d7 e2       	ldi	r29, 0x27	; 39
     c20:	be 01       	movw	r22, r28
     c22:	76 95       	lsr	r23
     c24:	67 95       	ror	r22
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	60 58       	subi	r22, 0x80	; 128
     c2c:	79 46       	sbci	r23, 0x69	; 105
     c2e:	87 46       	sbci	r24, 0x67	; 103
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	4e 01       	movw	r8, r28
     c34:	a1 2c       	mov	r10, r1
     c36:	b1 2c       	mov	r11, r1
     c38:	a5 01       	movw	r20, r10
     c3a:	94 01       	movw	r18, r8
     c3c:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmodsi4>
     c40:	59 01       	movw	r10, r18
     c42:	8e 2d       	mov	r24, r14
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	24 c0       	rjmp	.+72     	; 0xc90 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
     c48:	c8 e2       	ldi	r28, 0x28	; 40
     c4a:	fc 9e       	mul	r15, r28
     c4c:	c0 2d       	mov	r28, r0
     c4e:	11 24       	eor	r1, r1
     c50:	d0 e0       	ldi	r29, 0x00	; 0
     c52:	ca 15       	cp	r28, r10
     c54:	db 05       	cpc	r29, r11
     c56:	08 f4       	brcc	.+2      	; 0xc5a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
     c58:	e5 01       	movw	r28, r10
     c5a:	be 01       	movw	r22, r28
     c5c:	76 95       	lsr	r23
     c5e:	67 95       	ror	r22
     c60:	9e 01       	movw	r18, r28
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	8a e0       	ldi	r24, 0x0A	; 10
     c68:	f8 12       	cpse	r15, r24
     c6a:	07 c0       	rjmp	.+14     	; 0xc7a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	60 5e       	subi	r22, 0xE0	; 224
     c72:	73 44       	sbci	r23, 0x43	; 67
     c74:	81 44       	sbci	r24, 0x41	; 65
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	60 53       	subi	r22, 0x30	; 48
     c80:	7d 4e       	sbci	r23, 0xED	; 237
     c82:	8c 4e       	sbci	r24, 0xEC	; 236
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmodsi4>
     c8a:	59 01       	movw	r10, r18
     c8c:	8e 2d       	mov	r24, r14
     c8e:	82 60       	ori	r24, 0x02	; 2
     c90:	88 2e       	mov	r8, r24
     c92:	2a e0       	ldi	r18, 0x0A	; 10
     c94:	f2 12       	cpse	r15, r18
     c96:	07 c0       	rjmp	.+14     	; 0xca6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
     c98:	ce 01       	movw	r24, r28
     c9a:	05 96       	adiw	r24, 0x05	; 5
     c9c:	6a e0       	ldi	r22, 0x0A	; 10
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
     ca4:	eb 01       	movw	r28, r22
     ca6:	c8 3e       	cpi	r28, 0xE8	; 232
     ca8:	43 e0       	ldi	r20, 0x03	; 3
     caa:	d4 07       	cpc	r29, r20
     cac:	59 f0       	breq	.+22     	; 0xcc4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
     cae:	98 01       	movw	r18, r16
     cb0:	de 01       	movw	r26, r28
     cb2:	0e 94 c2 11 	call	0x2384	; 0x2384 <__umulhisi3>
     cb6:	28 ee       	ldi	r18, 0xE8	; 232
     cb8:	33 e0       	ldi	r19, 0x03	; 3
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	0e 94 a3 11 	call	0x2346	; 0x2346 <__divmodsi4>
     cc2:	89 01       	movw	r16, r18
     cc4:	10 92 6f 00 	sts	0x006F, r1
     cc8:	80 92 81 00 	sts	0x0081, r8
     ccc:	b0 92 89 00 	sts	0x0089, r11
     cd0:	a0 92 88 00 	sts	0x0088, r10
     cd4:	20 91 88 00 	lds	r18, 0x0088
     cd8:	30 91 89 00 	lds	r19, 0x0089
     cdc:	4d 2d       	mov	r20, r13
     cde:	40 31       	cpi	r20, 0x10	; 16
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
     ce2:	4f e0       	ldi	r20, 0x0F	; 15
     ce4:	80 e1       	ldi	r24, 0x10	; 16
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	84 1b       	sub	r24, r20
     cea:	91 09       	sbc	r25, r1
     cec:	a9 01       	movw	r20, r18
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
     cf0:	56 95       	lsr	r21
     cf2:	47 95       	ror	r20
     cf4:	8a 95       	dec	r24
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
     cf8:	50 93 8b 00 	sts	0x008B, r21
     cfc:	40 93 8a 00 	sts	0x008A, r20
     d00:	10 93 cc 01 	sts	0x01CC, r17
     d04:	00 93 cb 01 	sts	0x01CB, r16
     d08:	86 b3       	in	r24, 0x16	; 22
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	86 bb       	out	0x16, r24	; 22
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 6f 00 	sts	0x006F, r24
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	9f 90       	pop	r9
     d28:	8f 90       	pop	r8
     d2a:	08 95       	ret

00000d2c <_ZN15OrangutanBuzzer8playNoteEhjh>:
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	eb 01       	movw	r28, r22
     d32:	8f 3f       	cpi	r24, 0xFF	; 255
     d34:	11 f0       	breq	.+4      	; 0xd3a <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     d36:	41 11       	cpse	r20, r1
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	be 01       	movw	r22, r28
     d3e:	88 ee       	ldi	r24, 0xE8	; 232
     d40:	93 e0       	ldi	r25, 0x03	; 3
     d42:	43 c0       	rjmp	.+134    	; 0xdca <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
     d44:	81 31       	cpi	r24, 0x11	; 17
     d46:	30 f0       	brcs	.+12     	; 0xd54 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
     d48:	50 ef       	ldi	r21, 0xF0	; 240
     d4a:	58 0f       	add	r21, r24
     d4c:	50 36       	cpi	r21, 0x60	; 96
     d4e:	18 f0       	brcs	.+6      	; 0xd56 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     d50:	5f e5       	ldi	r21, 0x5F	; 95
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	85 2f       	mov	r24, r21
     d58:	6c e0       	ldi	r22, 0x0C	; 12
     d5a:	0e 94 4d 11 	call	0x229a	; 0x229a <__udivmodqi4>
     d5e:	68 2f       	mov	r22, r24
     d60:	74 ef       	ldi	r23, 0xF4	; 244
     d62:	76 03       	mulsu	r23, r22
     d64:	90 01       	movw	r18, r0
     d66:	11 24       	eor	r1, r1
     d68:	25 0f       	add	r18, r21
     d6a:	31 1d       	adc	r19, r1
     d6c:	2c 30       	cpi	r18, 0x0C	; 12
     d6e:	31 05       	cpc	r19, r1
     d70:	40 f4       	brcc	.+16     	; 0xd82 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
     d72:	f9 01       	movw	r30, r18
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	e0 5e       	subi	r30, 0xE0	; 224
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	20 81       	ld	r18, Z
     d7e:	31 81       	ldd	r19, Z+1	; 0x01
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	87 30       	cpi	r24, 0x07	; 7
     d88:	81 f0       	breq	.+32     	; 0xdaa <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
     d8a:	08 2e       	mov	r0, r24
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	28 f0       	brcs	.+10     	; 0xda4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
     d9a:	c9 01       	movw	r24, r18
     d9c:	05 96       	adiw	r24, 0x05	; 5
     d9e:	6a e0       	ldi	r22, 0x0A	; 10
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	0c c0       	rjmp	.+24     	; 0xdbc <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
     da4:	c9 01       	movw	r24, r18
     da6:	90 58       	subi	r25, 0x80	; 128
     da8:	0c c0       	rjmp	.+24     	; 0xdc2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
     daa:	c9 01       	movw	r24, r18
     dac:	36 e0       	ldi	r19, 0x06	; 6
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	3a 95       	dec	r19
     db4:	e1 f7       	brne	.-8      	; 0xdae <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
     db6:	02 96       	adiw	r24, 0x02	; 2
     db8:	65 e0       	ldi	r22, 0x05	; 5
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
     dc0:	cb 01       	movw	r24, r22
     dc2:	40 31       	cpi	r20, 0x10	; 16
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
     dc6:	4f e0       	ldi	r20, 0x0F	; 15
     dc8:	be 01       	movw	r22, r28
     dca:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <_ZL8nextNotev>:
     dd4:	a2 e0       	ldi	r26, 0x02	; 2
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e0 ef       	ldi	r30, 0xF0	; 240
     dda:	f6 e0       	ldi	r31, 0x06	; 6
     ddc:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <__prologue_saves__+0x4>
     de0:	90 90 0a 01 	lds	r9, 0x010A
     de4:	80 91 c8 01 	lds	r24, 0x01C8
     de8:	88 23       	and	r24, r24
     dea:	21 f0       	breq	.+8      	; 0xdf4 <_ZL8nextNotev+0x20>
     dec:	60 91 c7 01 	lds	r22, 0x01C7
     df0:	61 11       	cpse	r22, r1
     df2:	17 c0       	rjmp	.+46     	; 0xe22 <_ZL8nextNotev+0x4e>
     df4:	77 24       	eor	r7, r7
     df6:	73 94       	inc	r7
     df8:	b0 ec       	ldi	r27, 0xC0	; 192
     dfa:	ab 2e       	mov	r10, r27
     dfc:	bd e5       	ldi	r27, 0x5D	; 93
     dfe:	bb 2e       	mov	r11, r27
     e00:	1a e0       	ldi	r17, 0x0A	; 10
     e02:	61 2e       	mov	r6, r17
     e04:	04 e0       	ldi	r16, 0x04	; 4
     e06:	80 2e       	mov	r8, r16
     e08:	80 ed       	ldi	r24, 0xD0	; 208
     e0a:	c8 2e       	mov	r12, r24
     e0c:	87 e0       	ldi	r24, 0x07	; 7
     e0e:	d8 2e       	mov	r13, r24
     e10:	94 e0       	ldi	r25, 0x04	; 4
     e12:	e9 2e       	mov	r14, r25
     e14:	f1 2c       	mov	r15, r1
     e16:	04 ef       	ldi	r16, 0xF4	; 244
     e18:	11 e0       	ldi	r17, 0x01	; 1
     e1a:	2f e0       	ldi	r18, 0x0F	; 15
     e1c:	42 2e       	mov	r4, r18
     e1e:	51 2c       	mov	r5, r1
     e20:	15 c0       	rjmp	.+42     	; 0xe4c <_ZL8nextNotev+0x78>
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	88 ee       	ldi	r24, 0xE8	; 232
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
     e2e:	10 92 c7 01 	sts	0x01C7, r1
     e32:	17 c1       	rjmp	.+558    	; 0x1062 <_ZL8nextNotev+0x28e>
     e34:	86 36       	cpi	r24, 0x66	; 102
     e36:	d4 f5       	brge	.+116    	; 0xeac <_ZL8nextNotev+0xd8>
     e38:	81 36       	cpi	r24, 0x61	; 97
     e3a:	09 f4       	brne	.+2      	; 0xe3e <_ZL8nextNotev+0x6a>
     e3c:	a9 c0       	rjmp	.+338    	; 0xf90 <_ZL8nextNotev+0x1bc>
     e3e:	7c f5       	brge	.+94     	; 0xe9e <_ZL8nextNotev+0xca>
     e40:	8c 33       	cpi	r24, 0x3C	; 60
     e42:	09 f4       	brne	.+2      	; 0xe46 <_ZL8nextNotev+0x72>
     e44:	60 c0       	rjmp	.+192    	; 0xf06 <_ZL8nextNotev+0x132>
     e46:	8e 33       	cpi	r24, 0x3E	; 62
     e48:	81 f4       	brne	.+32     	; 0xe6a <_ZL8nextNotev+0x96>
     e4a:	93 94       	inc	r9
     e4c:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL16currentCharacterv>
     e50:	20 91 c4 01 	lds	r18, 0x01C4
     e54:	30 91 c5 01 	lds	r19, 0x01C5
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	30 93 c5 01 	sts	0x01C5, r19
     e60:	20 93 c4 01 	sts	0x01C4, r18
     e64:	85 36       	cpi	r24, 0x65	; 101
     e66:	31 f7       	brne	.-52     	; 0xe34 <_ZL8nextNotev+0x60>
     e68:	52 c0       	rjmp	.+164    	; 0xf0e <_ZL8nextNotev+0x13a>
     e6a:	81 32       	cpi	r24, 0x21	; 33
     e6c:	09 f0       	breq	.+2      	; 0xe70 <_ZL8nextNotev+0x9c>
     e6e:	8b c0       	rjmp	.+278    	; 0xf86 <_ZL8nextNotev+0x1b2>
     e70:	80 92 0a 01 	sts	0x010A, r8
     e74:	d0 92 09 01 	sts	0x0109, r13
     e78:	c0 92 08 01 	sts	0x0108, r12
     e7c:	f0 92 07 01 	sts	0x0107, r15
     e80:	e0 92 06 01 	sts	0x0106, r14
     e84:	10 93 05 01 	sts	0x0105, r17
     e88:	00 93 04 01 	sts	0x0104, r16
     e8c:	50 92 03 01 	sts	0x0103, r5
     e90:	40 92 02 01 	sts	0x0102, r4
     e94:	10 92 c8 01 	sts	0x01C8, r1
     e98:	a4 e0       	ldi	r26, 0x04	; 4
     e9a:	9a 2e       	mov	r9, r26
     e9c:	d7 cf       	rjmp	.-82     	; 0xe4c <_ZL8nextNotev+0x78>
     e9e:	83 36       	cpi	r24, 0x63	; 99
     ea0:	a1 f1       	breq	.+104    	; 0xf0a <_ZL8nextNotev+0x136>
     ea2:	0c f4       	brge	.+2      	; 0xea6 <_ZL8nextNotev+0xd2>
     ea4:	78 c0       	rjmp	.+240    	; 0xf96 <_ZL8nextNotev+0x1c2>
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	77 c0       	rjmp	.+238    	; 0xf9a <_ZL8nextNotev+0x1c6>
     eac:	8d 36       	cpi	r24, 0x6D	; 109
     eae:	c1 f1       	breq	.+112    	; 0xf20 <_ZL8nextNotev+0x14c>
     eb0:	94 f4       	brge	.+36     	; 0xed6 <_ZL8nextNotev+0x102>
     eb2:	87 36       	cpi	r24, 0x67	; 103
     eb4:	91 f1       	breq	.+100    	; 0xf1a <_ZL8nextNotev+0x146>
     eb6:	74 f1       	brlt	.+92     	; 0xf14 <_ZL8nextNotev+0x140>
     eb8:	8c 36       	cpi	r24, 0x6C	; 108
     eba:	09 f0       	breq	.+2      	; 0xebe <_ZL8nextNotev+0xea>
     ebc:	64 c0       	rjmp	.+200    	; 0xf86 <_ZL8nextNotev+0x1b2>
     ebe:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZL9getNumberv>
     ec2:	bc 01       	movw	r22, r24
     ec4:	90 93 07 01 	sts	0x0107, r25
     ec8:	80 93 06 01 	sts	0x0106, r24
     ecc:	80 91 08 01 	lds	r24, 0x0108
     ed0:	90 91 09 01 	lds	r25, 0x0109
     ed4:	51 c0       	rjmp	.+162    	; 0xf78 <_ZL8nextNotev+0x1a4>
     ed6:	82 37       	cpi	r24, 0x72	; 114
     ed8:	c9 f1       	breq	.+114    	; 0xf4c <_ZL8nextNotev+0x178>
     eda:	4c f4       	brge	.+18     	; 0xeee <_ZL8nextNotev+0x11a>
     edc:	8f 36       	cpi	r24, 0x6F	; 111
     ede:	09 f0       	breq	.+2      	; 0xee2 <_ZL8nextNotev+0x10e>
     ee0:	52 c0       	rjmp	.+164    	; 0xf86 <_ZL8nextNotev+0x1b2>
     ee2:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZL9getNumberv>
     ee6:	98 2e       	mov	r9, r24
     ee8:	80 93 0a 01 	sts	0x010A, r24
     eec:	af cf       	rjmp	.-162    	; 0xe4c <_ZL8nextNotev+0x78>
     eee:	84 37       	cpi	r24, 0x74	; 116
     ef0:	81 f1       	breq	.+96     	; 0xf52 <_ZL8nextNotev+0x17e>
     ef2:	86 37       	cpi	r24, 0x76	; 118
     ef4:	09 f0       	breq	.+2      	; 0xef8 <_ZL8nextNotev+0x124>
     ef6:	47 c0       	rjmp	.+142    	; 0xf86 <_ZL8nextNotev+0x1b2>
     ef8:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZL9getNumberv>
     efc:	90 93 03 01 	sts	0x0103, r25
     f00:	80 93 02 01 	sts	0x0102, r24
     f04:	a3 cf       	rjmp	.-186    	; 0xe4c <_ZL8nextNotev+0x78>
     f06:	9a 94       	dec	r9
     f08:	a1 cf       	rjmp	.-190    	; 0xe4c <_ZL8nextNotev+0x78>
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	20 c0       	rjmp	.+64     	; 0xf4e <_ZL8nextNotev+0x17a>
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <_ZL8nextNotev+0x1c6>
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	85 e0       	ldi	r24, 0x05	; 5
     f18:	40 c0       	rjmp	.+128    	; 0xf9a <_ZL8nextNotev+0x1c6>
     f1a:	10 e0       	ldi	r17, 0x00	; 0
     f1c:	87 e0       	ldi	r24, 0x07	; 7
     f1e:	3d c0       	rjmp	.+122    	; 0xf9a <_ZL8nextNotev+0x1c6>
     f20:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL16currentCharacterv>
     f24:	8c 36       	cpi	r24, 0x6C	; 108
     f26:	19 f4       	brne	.+6      	; 0xf2e <_ZL8nextNotev+0x15a>
     f28:	10 92 c8 01 	sts	0x01C8, r1
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <_ZL8nextNotev+0x162>
     f2e:	70 92 c8 01 	sts	0x01C8, r7
     f32:	10 92 c7 01 	sts	0x01C7, r1
     f36:	20 91 c4 01 	lds	r18, 0x01C4
     f3a:	30 91 c5 01 	lds	r19, 0x01C5
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	30 93 c5 01 	sts	0x01C5, r19
     f46:	20 93 c4 01 	sts	0x01C4, r18
     f4a:	80 cf       	rjmp	.-256    	; 0xe4c <_ZL8nextNotev+0x78>
     f4c:	11 e0       	ldi	r17, 0x01	; 1
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	24 c0       	rjmp	.+72     	; 0xf9a <_ZL8nextNotev+0x1c6>
     f52:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZL9getNumberv>
     f56:	bc 01       	movw	r22, r24
     f58:	c5 01       	movw	r24, r10
     f5a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
     f5e:	66 9e       	mul	r6, r22
     f60:	c0 01       	movw	r24, r0
     f62:	67 9e       	mul	r6, r23
     f64:	90 0d       	add	r25, r0
     f66:	11 24       	eor	r1, r1
     f68:	90 93 09 01 	sts	0x0109, r25
     f6c:	80 93 08 01 	sts	0x0108, r24
     f70:	60 91 06 01 	lds	r22, 0x0106
     f74:	70 91 07 01 	lds	r23, 0x0107
     f78:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
     f7c:	70 93 05 01 	sts	0x0105, r23
     f80:	60 93 04 01 	sts	0x0104, r22
     f84:	63 cf       	rjmp	.-314    	; 0xe4c <_ZL8nextNotev+0x78>
     f86:	10 92 c5 01 	sts	0x01C5, r1
     f8a:	10 92 c4 01 	sts	0x01C4, r1
     f8e:	69 c0       	rjmp	.+210    	; 0x1062 <_ZL8nextNotev+0x28e>
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	89 e0       	ldi	r24, 0x09	; 9
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <_ZL8nextNotev+0x1c6>
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	8b e0       	ldi	r24, 0x0B	; 11
     f9a:	08 2f       	mov	r16, r24
     f9c:	9c e0       	ldi	r25, 0x0C	; 12
     f9e:	99 9e       	mul	r9, r25
     fa0:	00 0d       	add	r16, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL16currentCharacterv>
     fa8:	98 2f       	mov	r25, r24
     faa:	97 7f       	andi	r25, 0xF7	; 247
     fac:	93 32       	cpi	r25, 0x23	; 35
     fae:	61 f4       	brne	.+24     	; 0xfc8 <_ZL8nextNotev+0x1f4>
     fb0:	20 91 c4 01 	lds	r18, 0x01C4
     fb4:	30 91 c5 01 	lds	r19, 0x01C5
     fb8:	2f 5f       	subi	r18, 0xFF	; 255
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	30 93 c5 01 	sts	0x01C5, r19
     fc0:	20 93 c4 01 	sts	0x01C4, r18
     fc4:	0f 5f       	subi	r16, 0xFF	; 255
     fc6:	ee cf       	rjmp	.-36     	; 0xfa4 <_ZL8nextNotev+0x1d0>
     fc8:	8d 32       	cpi	r24, 0x2D	; 45
     fca:	71 f4       	brne	.+28     	; 0xfe8 <_ZL8nextNotev+0x214>
     fcc:	20 91 c4 01 	lds	r18, 0x01C4
     fd0:	30 91 c5 01 	lds	r19, 0x01C5
     fd4:	2f 5f       	subi	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	30 93 c5 01 	sts	0x01C5, r19
     fdc:	20 93 c4 01 	sts	0x01C4, r18
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL16currentCharacterv>
     fe6:	f0 cf       	rjmp	.-32     	; 0xfc8 <_ZL8nextNotev+0x1f4>
     fe8:	60 91 04 01 	lds	r22, 0x0104
     fec:	70 91 05 01 	lds	r23, 0x0105
     ff0:	81 53       	subi	r24, 0x31	; 49
     ff2:	88 30       	cpi	r24, 0x08	; 8
     ff4:	50 f4       	brcc	.+20     	; 0x100a <_ZL8nextNotev+0x236>
     ff6:	e0 90 08 01 	lds	r14, 0x0108
     ffa:	f0 90 09 01 	lds	r15, 0x0109
     ffe:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZL9getNumberv>
    1002:	bc 01       	movw	r22, r24
    1004:	c7 01       	movw	r24, r14
    1006:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
    100a:	7b 01       	movw	r14, r22
    100c:	f6 94       	lsr	r15
    100e:	e7 94       	ror	r14
    1010:	69 83       	std	Y+1, r22	; 0x01
    1012:	7a 83       	std	Y+2, r23	; 0x02
    1014:	0e 94 7e 05 	call	0xafc	; 0xafc <_ZL16currentCharacterv>
    1018:	69 81       	ldd	r22, Y+1	; 0x01
    101a:	7a 81       	ldd	r23, Y+2	; 0x02
    101c:	8e 32       	cpi	r24, 0x2E	; 46
    101e:	69 f4       	brne	.+26     	; 0x103a <_ZL8nextNotev+0x266>
    1020:	20 91 c4 01 	lds	r18, 0x01C4
    1024:	30 91 c5 01 	lds	r19, 0x01C5
    1028:	2f 5f       	subi	r18, 0xFF	; 255
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	30 93 c5 01 	sts	0x01C5, r19
    1030:	20 93 c4 01 	sts	0x01C4, r18
    1034:	6e 0d       	add	r22, r14
    1036:	7f 1d       	adc	r23, r15
    1038:	e9 cf       	rjmp	.-46     	; 0x100c <_ZL8nextNotev+0x238>
    103a:	80 91 c8 01 	lds	r24, 0x01C8
    103e:	88 23       	and	r24, r24
    1040:	39 f0       	breq	.+14     	; 0x1050 <_ZL8nextNotev+0x27c>
    1042:	9b 01       	movw	r18, r22
    1044:	36 95       	lsr	r19
    1046:	27 95       	ror	r18
    1048:	20 93 c7 01 	sts	0x01C7, r18
    104c:	62 1b       	sub	r22, r18
    104e:	71 09       	sbc	r23, r1
    1050:	40 91 02 01 	lds	r20, 0x0102
    1054:	11 23       	and	r17, r17
    1056:	11 f0       	breq	.+4      	; 0x105c <_ZL8nextNotev+0x288>
    1058:	8f ef       	ldi	r24, 0xFF	; 255
    105a:	01 c0       	rjmp	.+2      	; 0x105e <_ZL8nextNotev+0x28a>
    105c:	80 2f       	mov	r24, r16
    105e:	0e 94 96 06 	call	0xd2c	; 0xd2c <_ZN15OrangutanBuzzer8playNoteEhjh>
    1062:	22 96       	adiw	r28, 0x02	; 2
    1064:	e0 e1       	ldi	r30, 0x10	; 16
    1066:	0c 94 02 12 	jmp	0x2404	; 0x2404 <__epilogue_restores__+0x4>

0000106a <__vector_13>:
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	80 91 cb 01 	lds	r24, 0x01CB
    1090:	90 91 cc 01 	lds	r25, 0x01CC
    1094:	9c 01       	movw	r18, r24
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	31 09       	sbc	r19, r1
    109a:	30 93 cc 01 	sts	0x01CC, r19
    109e:	20 93 cb 01 	sts	0x01CB, r18
    10a2:	89 2b       	or	r24, r25
    10a4:	11 f5       	brne	.+68     	; 0x10ea <__vector_13+0x80>
    10a6:	10 92 6f 00 	sts	0x006F, r1
    10aa:	78 94       	sei
    10ac:	80 91 81 00 	lds	r24, 0x0081
    10b0:	88 7f       	andi	r24, 0xF8	; 248
    10b2:	81 60       	ori	r24, 0x01	; 1
    10b4:	80 93 81 00 	sts	0x0081, r24
    10b8:	80 e1       	ldi	r24, 0x10	; 16
    10ba:	97 e2       	ldi	r25, 0x27	; 39
    10bc:	90 93 89 00 	sts	0x0089, r25
    10c0:	80 93 88 00 	sts	0x0088, r24
    10c4:	10 92 8b 00 	sts	0x008B, r1
    10c8:	10 92 8a 00 	sts	0x008A, r1
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	80 93 0b 01 	sts	0x010B, r24
    10d2:	80 91 c4 01 	lds	r24, 0x01C4
    10d6:	90 91 c5 01 	lds	r25, 0x01C5
    10da:	89 2b       	or	r24, r25
    10dc:	31 f0       	breq	.+12     	; 0x10ea <__vector_13+0x80>
    10de:	80 91 ca 01 	lds	r24, 0x01CA
    10e2:	81 11       	cpse	r24, r1
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <__vector_13+0x80>
    10e6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZL8nextNotev>
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <_ZN15OrangutanBuzzer9isPlayingEv>:
    110c:	80 91 0b 01 	lds	r24, 0x010B
    1110:	88 23       	and	r24, r24
    1112:	49 f0       	breq	.+18     	; 0x1126 <_ZN15OrangutanBuzzer9isPlayingEv+0x1a>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	20 91 c4 01 	lds	r18, 0x01C4
    111a:	30 91 c5 01 	lds	r19, 0x01C5
    111e:	23 2b       	or	r18, r19
    1120:	19 f4       	brne	.+6      	; 0x1128 <_ZN15OrangutanBuzzer9isPlayingEv+0x1c>
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 95       	ret
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	08 95       	ret

0000112a <is_playing>:
    112a:	0e 94 86 08 	call	0x110c	; 0x110c <_ZN15OrangutanBuzzer9isPlayingEv>
    112e:	08 95       	ret

00001130 <_ZN15OrangutanBuzzer4playEPKc>:
    1130:	10 92 6f 00 	sts	0x006F, r1
    1134:	90 93 c5 01 	sts	0x01C5, r25
    1138:	80 93 c4 01 	sts	0x01C4, r24
    113c:	10 92 c9 01 	sts	0x01C9, r1
    1140:	10 92 c7 01 	sts	0x01C7, r1
    1144:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZL8nextNotev>
    1148:	08 95       	ret

0000114a <play>:
    114a:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN15OrangutanBuzzer4playEPKc>
    114e:	08 95       	ret

00001150 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    1150:	10 92 6f 00 	sts	0x006F, r1
    1154:	90 93 c5 01 	sts	0x01C5, r25
    1158:	80 93 c4 01 	sts	0x01C4, r24
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 c9 01 	sts	0x01C9, r24
    1162:	10 92 c7 01 	sts	0x01C7, r1
    1166:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <_ZL8nextNotev>
    116a:	08 95       	ret

0000116c <play_from_program_space>:
    116c:	0e 94 a8 08 	call	0x1150	; 0x1150 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    1170:	08 95       	ret

00001172 <delay_us.constprop.0>:
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	6f 93       	push	r22
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	6a 95       	dec	r22
    117c:	f1 f7       	brne	.-4      	; 0x117a <delay_us.constprop.0+0x8>
    117e:	6f 91       	pop	r22
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	c9 f7       	brne	.-14     	; 0x1176 <delay_us.constprop.0+0x4>
    1184:	08 95       	ret

00001186 <_ZN12OrangutanLCD8busyWaitEv>:
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	1a b1       	in	r17, 0x0a	; 10
    1190:	57 98       	cbi	0x0a, 7	; 10
    1192:	5a 98       	cbi	0x0b, 2	; 11
    1194:	28 9a       	sbi	0x05, 0	; 5
    1196:	c0 e0       	ldi	r28, 0x00	; 0
    1198:	d0 e0       	ldi	r29, 0x00	; 0
    119a:	0e 94 b9 08 	call	0x1172	; 0x1172 <delay_us.constprop.0>
    119e:	5c 9a       	sbi	0x0b, 4	; 11
    11a0:	0e 94 b9 08 	call	0x1172	; 0x1172 <delay_us.constprop.0>
    11a4:	09 b1       	in	r16, 0x09	; 9
    11a6:	5c 98       	cbi	0x0b, 4	; 11
    11a8:	0e 94 b9 08 	call	0x1172	; 0x1172 <delay_us.constprop.0>
    11ac:	5c 9a       	sbi	0x0b, 4	; 11
    11ae:	0e 94 b9 08 	call	0x1172	; 0x1172 <delay_us.constprop.0>
    11b2:	5c 98       	cbi	0x0b, 4	; 11
    11b4:	24 96       	adiw	r28, 0x04	; 4
    11b6:	07 ff       	sbrs	r16, 7
    11b8:	10 c0       	rjmp	.+32     	; 0x11da <_ZN12OrangutanLCD8busyWaitEv+0x54>
    11ba:	ae 01       	movw	r20, r28
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	80 91 cd 01 	lds	r24, 0x01CD
    11c4:	90 91 ce 01 	lds	r25, 0x01CE
    11c8:	a0 91 cf 01 	lds	r26, 0x01CF
    11cc:	b0 91 d0 01 	lds	r27, 0x01D0
    11d0:	48 17       	cp	r20, r24
    11d2:	59 07       	cpc	r21, r25
    11d4:	6a 07       	cpc	r22, r26
    11d6:	7b 07       	cpc	r23, r27
    11d8:	00 f3       	brcs	.-64     	; 0x119a <_ZN12OrangutanLCD8busyWaitEv+0x14>
    11da:	1a b9       	out	0x0a, r17	; 10
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	08 95       	ret

000011e6 <_ZN12OrangutanLCD8sendDataEh>:
    11e6:	95 b1       	in	r25, 0x05	; 5
    11e8:	28 2f       	mov	r18, r24
    11ea:	21 70       	andi	r18, 0x01	; 1
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	22 0f       	add	r18, r18
    11f0:	33 1f       	adc	r19, r19
    11f2:	48 2f       	mov	r20, r24
    11f4:	46 70       	andi	r20, 0x06	; 6
    11f6:	68 e0       	ldi	r22, 0x08	; 8
    11f8:	46 9f       	mul	r20, r22
    11fa:	a0 01       	movw	r20, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	24 2b       	or	r18, r20
    1200:	9d 7c       	andi	r25, 0xCD	; 205
    1202:	29 2b       	or	r18, r25
    1204:	25 b9       	out	0x05, r18	; 5
    1206:	9b b1       	in	r25, 0x0b	; 11
    1208:	88 70       	andi	r24, 0x08	; 8
    120a:	82 95       	swap	r24
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	9f 77       	andi	r25, 0x7F	; 127
    1210:	89 2b       	or	r24, r25
    1212:	8b b9       	out	0x0b, r24	; 11
    1214:	5c 9a       	sbi	0x0b, 4	; 11
    1216:	0e 94 b9 08 	call	0x1172	; 0x1172 <delay_us.constprop.0>
    121a:	5c 98       	cbi	0x0b, 4	; 11
    121c:	0e 94 b9 08 	call	0x1172	; 0x1172 <delay_us.constprop.0>
    1220:	08 95       	ret

00001222 <_ZN12OrangutanLCD4sendEhhh>:
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e7 e1       	ldi	r30, 0x17	; 23
    1228:	f9 e0       	ldi	r31, 0x09	; 9
    122a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x16>
    122e:	c8 2f       	mov	r28, r24
    1230:	d6 2e       	mov	r13, r22
    1232:	e4 2e       	mov	r14, r20
    1234:	80 91 fc 02 	lds	r24, 0x02FC
    1238:	81 11       	cpse	r24, r1
    123a:	05 c0       	rjmp	.+10     	; 0x1246 <_ZN12OrangutanLCD4sendEhhh+0x24>
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 fc 02 	sts	0x02FC, r24
    1242:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN12OrangutanLCD5init2Ev>
    1246:	0e 94 c3 08 	call	0x1186	; 0x1186 <_ZN12OrangutanLCD8busyWaitEv>
    124a:	14 b1       	in	r17, 0x04	; 4
    124c:	d5 b1       	in	r29, 0x05	; 5
    124e:	fa b0       	in	r15, 0x0a	; 10
    1250:	0b b1       	in	r16, 0x0b	; 11
    1252:	28 98       	cbi	0x05, 0	; 5
    1254:	dd 20       	and	r13, r13
    1256:	11 f0       	breq	.+4      	; 0x125c <_ZN12OrangutanLCD4sendEhhh+0x3a>
    1258:	5a 9a       	sbi	0x0b, 2	; 11
    125a:	01 c0       	rjmp	.+2      	; 0x125e <_ZN12OrangutanLCD4sendEhhh+0x3c>
    125c:	5a 98       	cbi	0x0b, 2	; 11
    125e:	94 b1       	in	r25, 0x04	; 4
    1260:	92 63       	ori	r25, 0x32	; 50
    1262:	94 b9       	out	0x04, r25	; 4
    1264:	57 9a       	sbi	0x0a, 7	; 10
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	e8 16       	cp	r14, r24
    126a:	29 f0       	breq	.+10     	; 0x1276 <_ZN12OrangutanLCD4sendEhhh+0x54>
    126c:	8c 2f       	mov	r24, r28
    126e:	82 95       	swap	r24
    1270:	8f 70       	andi	r24, 0x0F	; 15
    1272:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN12OrangutanLCD8sendDataEh>
    1276:	8c 2f       	mov	r24, r28
    1278:	8f 70       	andi	r24, 0x0F	; 15
    127a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN12OrangutanLCD8sendDataEh>
    127e:	fa b8       	out	0x0a, r15	; 10
    1280:	0b b9       	out	0x0b, r16	; 11
    1282:	14 b9       	out	0x04, r17	; 4
    1284:	d5 b9       	out	0x05, r29	; 5
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	e7 e0       	ldi	r30, 0x07	; 7
    128c:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x16>

00001290 <_ZN12OrangutanLCD8send_cmdEh>:
    1290:	42 e0       	ldi	r20, 0x02	; 2
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	0e 94 11 09 	call	0x1222	; 0x1222 <_ZN12OrangutanLCD4sendEhhh>
    1298:	08 95       	ret

0000129a <_ZN12OrangutanLCD9send_dataEh>:
    129a:	42 e0       	ldi	r20, 0x02	; 2
    129c:	61 e0       	ldi	r22, 0x01	; 1
    129e:	0e 94 11 09 	call	0x1222	; 0x1222 <_ZN12OrangutanLCD4sendEhhh>
    12a2:	08 95       	ret

000012a4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>:
    12a4:	a1 e0       	ldi	r26, 0x01	; 1
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e8 e5       	ldi	r30, 0x58	; 88
    12aa:	f9 e0       	ldi	r31, 0x09	; 9
    12ac:	0c 94 f0 11 	jmp	0x23e0	; 0x23e0 <__prologue_saves__+0x18>
    12b0:	8c 01       	movw	r16, r24
    12b2:	66 0f       	add	r22, r22
    12b4:	66 0f       	add	r22, r22
    12b6:	66 0f       	add	r22, r22
    12b8:	e1 2c       	mov	r14, r1
    12ba:	f1 2c       	mov	r15, r1
    12bc:	8e 2d       	mov	r24, r14
    12be:	86 0f       	add	r24, r22
    12c0:	80 64       	ori	r24, 0x40	; 64
    12c2:	69 83       	std	Y+1, r22	; 0x01
    12c4:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    12c8:	f8 01       	movw	r30, r16
    12ca:	ee 0d       	add	r30, r14
    12cc:	ff 1d       	adc	r31, r15
    12ce:	84 91       	lpm	r24, Z
    12d0:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD9send_dataEh>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	e8 1a       	sub	r14, r24
    12d8:	f8 0a       	sbc	r15, r24
    12da:	69 81       	ldd	r22, Y+1	; 0x01
    12dc:	e8 e0       	ldi	r30, 0x08	; 8
    12de:	ee 16       	cp	r14, r30
    12e0:	f1 04       	cpc	r15, r1
    12e2:	61 f7       	brne	.-40     	; 0x12bc <_ZN12OrangutanLCD19loadCustomCharacterEPKch+0x18>
    12e4:	21 96       	adiw	r28, 0x01	; 1
    12e6:	e6 e0       	ldi	r30, 0x06	; 6
    12e8:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

000012ec <lcd_load_custom_character>:
    12ec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN12OrangutanLCD19loadCustomCharacterEPKch>
    12f0:	08 95       	ret

000012f2 <print_character>:
    12f2:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD9send_dataEh>
    12f6:	08 95       	ret

000012f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	0e 94 11 09 	call	0x1222	; 0x1222 <_ZN12OrangutanLCD4sendEhhh>
    1300:	08 95       	ret

00001302 <_ZN12OrangutanLCD5init2Ev>:
    1302:	80 e1       	ldi	r24, 0x10	; 16
    1304:	97 e2       	ldi	r25, 0x27	; 39
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	80 93 cd 01 	sts	0x01CD, r24
    130e:	90 93 ce 01 	sts	0x01CE, r25
    1312:	a0 93 cf 01 	sts	0x01CF, r26
    1316:	b0 93 d0 01 	sts	0x01D0, r27
    131a:	52 9a       	sbi	0x0a, 2	; 10
    131c:	20 9a       	sbi	0x04, 0	; 4
    131e:	54 9a       	sbi	0x0a, 4	; 10
    1320:	8e e1       	ldi	r24, 0x1E	; 30
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    132e:	86 e0       	ldi	r24, 0x06	; 6
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
    1360:	88 e2       	ldi	r24, 0x28	; 40
    1362:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    1366:	88 e0       	ldi	r24, 0x08	; 8
    1368:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    1372:	86 e0       	ldi	r24, 0x06	; 6
    1374:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    1378:	8c e0       	ldi	r24, 0x0C	; 12
    137a:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    137e:	08 95       	ret

00001380 <_ZN12OrangutanLCD5clearEv>:
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    1386:	80 91 d3 01 	lds	r24, 0x01D3
    138a:	90 91 d4 01 	lds	r25, 0x01D4
    138e:	89 2b       	or	r24, r25
    1390:	f9 f0       	breq	.+62     	; 0x13d0 <_ZN12OrangutanLCD5clearEv+0x50>
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	a0 e2       	ldi	r26, 0x20	; 32
    1396:	26 2f       	mov	r18, r22
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	70 91 0c 01 	lds	r23, 0x010C
    139e:	80 91 0d 01 	lds	r24, 0x010D
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	78 9f       	mul	r23, r24
    13a8:	a0 01       	movw	r20, r0
    13aa:	79 9f       	mul	r23, r25
    13ac:	50 0d       	add	r21, r0
    13ae:	11 24       	eor	r1, r1
    13b0:	24 17       	cp	r18, r20
    13b2:	35 07       	cpc	r19, r21
    13b4:	4c f4       	brge	.+18     	; 0x13c8 <_ZN12OrangutanLCD5clearEv+0x48>
    13b6:	e0 91 d3 01 	lds	r30, 0x01D3
    13ba:	f0 91 d4 01 	lds	r31, 0x01D4
    13be:	e2 0f       	add	r30, r18
    13c0:	f3 1f       	adc	r31, r19
    13c2:	a0 83       	st	Z, r26
    13c4:	6f 5f       	subi	r22, 0xFF	; 255
    13c6:	e7 cf       	rjmp	.-50     	; 0x1396 <_ZN12OrangutanLCD5clearEv+0x16>
    13c8:	10 92 d1 01 	sts	0x01D1, r1
    13cc:	10 92 d2 01 	sts	0x01D2, r1
    13d0:	08 95       	ret

000013d2 <clear>:
    13d2:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN12OrangutanLCD5clearEv>
    13d6:	08 95       	ret

000013d8 <_ZN12OrangutanLCD5printEPKc>:
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24
    13de:	89 91       	ld	r24, Y+
    13e0:	88 23       	and	r24, r24
    13e2:	19 f0       	breq	.+6      	; 0x13ea <_ZN12OrangutanLCD5printEPKc+0x12>
    13e4:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD9send_dataEh>
    13e8:	fa cf       	rjmp	.-12     	; 0x13de <_ZN12OrangutanLCD5printEPKc+0x6>
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <print>:
    13f0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN12OrangutanLCD5printEPKc>
    13f4:	08 95       	ret

000013f6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>:
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
    13fc:	fe 01       	movw	r30, r28
    13fe:	84 91       	lpm	r24, Z
    1400:	88 23       	and	r24, r24
    1402:	21 f0       	breq	.+8      	; 0x140c <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x16>
    1404:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD9send_dataEh>
    1408:	21 96       	adiw	r28, 0x01	; 1
    140a:	f8 cf       	rjmp	.-16     	; 0x13fc <_ZN12OrangutanLCD21printFromProgramSpaceEPKc+0x6>
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <print_from_program_space>:
    1412:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN12OrangutanLCD21printFromProgramSpaceEPKc>
    1416:	08 95       	ret

00001418 <_ZN12OrangutanLCD5printEm>:
    1418:	aa e0       	ldi	r26, 0x0A	; 10
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e2 e1       	ldi	r30, 0x12	; 18
    141e:	fa e0       	ldi	r31, 0x0A	; 10
    1420:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <__prologue_saves__+0x14>
    1424:	1a e0       	ldi	r17, 0x0A	; 10
    1426:	5a e0       	ldi	r21, 0x0A	; 10
    1428:	c5 2e       	mov	r12, r21
    142a:	d1 2c       	mov	r13, r1
    142c:	e1 2c       	mov	r14, r1
    142e:	f1 2c       	mov	r15, r1
    1430:	06 2f       	mov	r16, r22
    1432:	a7 01       	movw	r20, r14
    1434:	96 01       	movw	r18, r12
    1436:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmodsi4>
    143a:	ca 01       	movw	r24, r20
    143c:	b9 01       	movw	r22, r18
    143e:	11 50       	subi	r17, 0x01	; 1
    1440:	e1 e0       	ldi	r30, 0x01	; 1
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	ec 0f       	add	r30, r28
    1446:	fd 1f       	adc	r31, r29
    1448:	e1 0f       	add	r30, r17
    144a:	f1 1d       	adc	r31, r1
    144c:	00 5d       	subi	r16, 0xD0	; 208
    144e:	2a e0       	ldi	r18, 0x0A	; 10
    1450:	62 9f       	mul	r22, r18
    1452:	00 19       	sub	r16, r0
    1454:	11 24       	eor	r1, r1
    1456:	00 83       	st	Z, r16
    1458:	61 15       	cp	r22, r1
    145a:	71 05       	cpc	r23, r1
    145c:	81 05       	cpc	r24, r1
    145e:	91 05       	cpc	r25, r1
    1460:	39 f7       	brne	.-50     	; 0x1430 <_ZN12OrangutanLCD5printEm+0x18>
    1462:	1a 30       	cpi	r17, 0x0A	; 10
    1464:	58 f4       	brcc	.+22     	; 0x147c <_ZN12OrangutanLCD5printEm+0x64>
    1466:	e1 e0       	ldi	r30, 0x01	; 1
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	ec 0f       	add	r30, r28
    146c:	fd 1f       	adc	r31, r29
    146e:	e1 0f       	add	r30, r17
    1470:	f1 1d       	adc	r31, r1
    1472:	80 81       	ld	r24, Z
    1474:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD9send_dataEh>
    1478:	1f 5f       	subi	r17, 0xFF	; 255
    147a:	f3 cf       	rjmp	.-26     	; 0x1462 <_ZN12OrangutanLCD5printEm+0x4a>
    147c:	2a 96       	adiw	r28, 0x0a	; 10
    147e:	e8 e0       	ldi	r30, 0x08	; 8
    1480:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__epilogue_restores__+0x14>

00001484 <_ZN12OrangutanLCD5printEl>:
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	6b 01       	movw	r12, r22
    148e:	7c 01       	movw	r14, r24
    1490:	97 ff       	sbrs	r25, 7
    1492:	0b c0       	rjmp	.+22     	; 0x14aa <_ZN12OrangutanLCD5printEl+0x26>
    1494:	f0 94       	com	r15
    1496:	e0 94       	com	r14
    1498:	d0 94       	com	r13
    149a:	c0 94       	com	r12
    149c:	c1 1c       	adc	r12, r1
    149e:	d1 1c       	adc	r13, r1
    14a0:	e1 1c       	adc	r14, r1
    14a2:	f1 1c       	adc	r15, r1
    14a4:	8d e2       	ldi	r24, 0x2D	; 45
    14a6:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN12OrangutanLCD9send_dataEh>
    14aa:	c7 01       	movw	r24, r14
    14ac:	b6 01       	movw	r22, r12
    14ae:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_ZN12OrangutanLCD5printEm>
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	08 95       	ret

000014bc <print_long>:
    14bc:	0e 94 42 0a 	call	0x1484	; 0x1484 <_ZN12OrangutanLCD5printEl>
    14c0:	08 95       	ret

000014c2 <_ZN12OrangutanLCD6gotoXYEhh>:
    14c2:	a5 e0       	ldi	r26, 0x05	; 5
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e7 e6       	ldi	r30, 0x67	; 103
    14c8:	fa e0       	ldi	r31, 0x0A	; 10
    14ca:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x1e>
    14ce:	18 2f       	mov	r17, r24
    14d0:	80 e8       	ldi	r24, 0x80	; 128
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	80 ec       	ldi	r24, 0xC0	; 192
    14d6:	8a 83       	std	Y+2, r24	; 0x02
    14d8:	84 e9       	ldi	r24, 0x94	; 148
    14da:	8b 83       	std	Y+3, r24	; 0x03
    14dc:	84 ed       	ldi	r24, 0xD4	; 212
    14de:	8c 83       	std	Y+4, r24	; 0x04
    14e0:	fe 01       	movw	r30, r28
    14e2:	e6 0f       	add	r30, r22
    14e4:	f1 1d       	adc	r31, r1
    14e6:	81 81       	ldd	r24, Z+1	; 0x01
    14e8:	81 0f       	add	r24, r17
    14ea:	6d 83       	std	Y+5, r22	; 0x05
    14ec:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN12OrangutanLCD8send_cmdEh>
    14f0:	10 93 d1 01 	sts	0x01D1, r17
    14f4:	6d 81       	ldd	r22, Y+5	; 0x05
    14f6:	60 93 d2 01 	sts	0x01D2, r22
    14fa:	25 96       	adiw	r28, 0x05	; 5
    14fc:	e3 e0       	ldi	r30, 0x03	; 3
    14fe:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x1e>

00001502 <lcd_goto_xy>:
    1502:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <_ZN12OrangutanLCD6gotoXYEhh>
    1506:	08 95       	ret

00001508 <_ZN16OrangutanDigital9setOutputEhh>:
    1508:	88 30       	cpi	r24, 0x08	; 8
    150a:	58 f4       	brcc	.+22     	; 0x1522 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    150c:	91 e0       	ldi	r25, 0x01	; 1
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    1510:	99 0f       	add	r25, r25
    1512:	8a 95       	dec	r24
    1514:	ea f7       	brpl	.-6      	; 0x1510 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    1516:	89 2f       	mov	r24, r25
    1518:	aa e2       	ldi	r26, 0x2A	; 42
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e2       	ldi	r30, 0x2B	; 43
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	21 c0       	rjmp	.+66     	; 0x1564 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1522:	8e 30       	cpi	r24, 0x0E	; 14
    1524:	60 f4       	brcc	.+24     	; 0x153e <_ZN16OrangutanDigital9setOutputEhh+0x36>
    1526:	98 ef       	ldi	r25, 0xF8	; 248
    1528:	98 0f       	add	r25, r24
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    152e:	88 0f       	add	r24, r24
    1530:	9a 95       	dec	r25
    1532:	ea f7       	brpl	.-6      	; 0x152e <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1534:	a4 e2       	ldi	r26, 0x24	; 36
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e2       	ldi	r30, 0x25	; 37
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	13 c0       	rjmp	.+38     	; 0x1564 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    153e:	85 31       	cpi	r24, 0x15	; 21
    1540:	60 f4       	brcc	.+24     	; 0x155a <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1542:	92 ef       	ldi	r25, 0xF2	; 242
    1544:	98 0f       	add	r25, r24
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	01 c0       	rjmp	.+2      	; 0x154c <_ZN16OrangutanDigital9setOutputEhh+0x44>
    154a:	88 0f       	add	r24, r24
    154c:	9a 95       	dec	r25
    154e:	ea f7       	brpl	.-6      	; 0x154a <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1550:	a7 e2       	ldi	r26, 0x27	; 39
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e8 e2       	ldi	r30, 0x28	; 40
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e0 e0       	ldi	r30, 0x00	; 0
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	6f 3f       	cpi	r22, 0xFF	; 255
    1566:	19 f4       	brne	.+6      	; 0x156e <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1568:	90 81       	ld	r25, Z
    156a:	98 27       	eor	r25, r24
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    156e:	66 23       	and	r22, r22
    1570:	19 f0       	breq	.+6      	; 0x1578 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1572:	90 81       	ld	r25, Z
    1574:	98 2b       	or	r25, r24
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1578:	20 81       	ld	r18, Z
    157a:	98 2f       	mov	r25, r24
    157c:	90 95       	com	r25
    157e:	92 23       	and	r25, r18
    1580:	90 83       	st	Z, r25
    1582:	9c 91       	ld	r25, X
    1584:	98 2b       	or	r25, r24
    1586:	9c 93       	st	X, r25
    1588:	08 95       	ret

0000158a <_ZN15OrangutanMotors5init2Ev>:
    158a:	83 ef       	ldi	r24, 0xF3	; 243
    158c:	80 93 b0 00 	sts	0x00B0, r24
    1590:	84 bd       	out	0x24, r24	; 36
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	80 93 b1 00 	sts	0x00B1, r24
    1598:	85 bd       	out	0x25, r24	; 37
    159a:	10 92 b4 00 	sts	0x00B4, r1
    159e:	10 92 b3 00 	sts	0x00B3, r1
    15a2:	18 bc       	out	0x28, r1	; 40
    15a4:	17 bc       	out	0x27, r1	; 39
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	86 e0       	ldi	r24, 0x06	; 6
    15aa:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN16OrangutanDigital9setOutputEhh>
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN16OrangutanDigital9setOutputEhh>
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	8b e0       	ldi	r24, 0x0B	; 11
    15ba:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN16OrangutanDigital9setOutputEhh>
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN16OrangutanDigital9setOutputEhh>
    15c6:	08 95       	ret

000015c8 <_ZN15OrangutanMotors4initEv>:
    15c8:	80 91 fd 02 	lds	r24, 0x02FD
    15cc:	81 11       	cpse	r24, r1
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <_ZN15OrangutanMotors4initEv+0x12>
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 fd 02 	sts	0x02FD, r24
    15d6:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN15OrangutanMotors5init2Ev>
    15da:	08 95       	ret

000015dc <_ZN15OrangutanMotors10setM1SpeedEi>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ec 01       	movw	r28, r24
    15e2:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN15OrangutanMotors4initEv>
    15e6:	d7 ff       	sbrs	r29, 7
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    15ea:	d1 95       	neg	r29
    15ec:	c1 95       	neg	r28
    15ee:	d1 09       	sbc	r29, r1
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	cf 3f       	cpi	r28, 0xFF	; 255
    15f8:	d1 05       	cpc	r29, r1
    15fa:	19 f0       	breq	.+6      	; 0x1602 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    15fc:	14 f0       	brlt	.+4      	; 0x1602 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    15fe:	cf ef       	ldi	r28, 0xFF	; 255
    1600:	d0 e0       	ldi	r29, 0x00	; 0
    1602:	88 23       	and	r24, r24
    1604:	19 f0       	breq	.+6      	; 0x160c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1606:	18 bc       	out	0x28, r1	; 40
    1608:	c7 bd       	out	0x27, r28	; 39
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    160c:	c8 bd       	out	0x28, r28	; 40
    160e:	17 bc       	out	0x27, r1	; 39
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <_ZN15OrangutanMotors10setM2SpeedEi>:
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	ec 01       	movw	r28, r24
    161c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN15OrangutanMotors4initEv>
    1620:	d7 ff       	sbrs	r29, 7
    1622:	05 c0       	rjmp	.+10     	; 0x162e <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    1624:	d1 95       	neg	r29
    1626:	c1 95       	neg	r28
    1628:	d1 09       	sbc	r29, r1
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	cf 3f       	cpi	r28, 0xFF	; 255
    1632:	d1 05       	cpc	r29, r1
    1634:	19 f0       	breq	.+6      	; 0x163c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1636:	14 f0       	brlt	.+4      	; 0x163c <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1638:	cf ef       	ldi	r28, 0xFF	; 255
    163a:	d0 e0       	ldi	r29, 0x00	; 0
    163c:	88 23       	and	r24, r24
    163e:	29 f0       	breq	.+10     	; 0x164a <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1640:	10 92 b4 00 	sts	0x00B4, r1
    1644:	c0 93 b3 00 	sts	0x00B3, r28
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    164a:	c0 93 b4 00 	sts	0x00B4, r28
    164e:	10 92 b3 00 	sts	0x00B3, r1
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <_ZN15OrangutanMotors9setSpeedsEii>:
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	eb 01       	movw	r28, r22
    165e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <_ZN15OrangutanMotors10setM1SpeedEi>
    1662:	ce 01       	movw	r24, r28
    1664:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_ZN15OrangutanMotors10setM2SpeedEi>
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <set_motors>:
    166e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN15OrangutanMotors9setSpeedsEii>
    1672:	08 95       	ret

00001674 <_ZN20OrangutanPushbuttons5init2Ev>:
    1674:	84 b1       	in	r24, 0x04	; 4
    1676:	8d 7c       	andi	r24, 0xCD	; 205
    1678:	84 b9       	out	0x04, r24	; 4
    167a:	85 b1       	in	r24, 0x05	; 5
    167c:	82 63       	ori	r24, 0x32	; 50
    167e:	85 b9       	out	0x05, r24	; 5
    1680:	85 e0       	ldi	r24, 0x05	; 5
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	6f 93       	push	r22
    1686:	64 e0       	ldi	r22, 0x04	; 4
    1688:	6a 95       	dec	r22
    168a:	f1 f7       	brne	.-4      	; 0x1688 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    168c:	6f 91       	pop	r22
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	c9 f7       	brne	.-14     	; 0x1684 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1692:	08 95       	ret

00001694 <_ZN20OrangutanPushbuttons4initEv>:
    1694:	80 91 fe 02 	lds	r24, 0x02FE
    1698:	81 11       	cpse	r24, r1
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <_ZN20OrangutanPushbuttons4initEv+0x12>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 fe 02 	sts	0x02FE, r24
    16a2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <_ZN20OrangutanPushbuttons5init2Ev>
    16a6:	08 95       	ret

000016a8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    16a8:	cf 93       	push	r28
    16aa:	c8 2f       	mov	r28, r24
    16ac:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN20OrangutanPushbuttons4initEv>
    16b0:	83 b1       	in	r24, 0x03	; 3
    16b2:	8c 23       	and	r24, r28
    16b4:	e9 f3       	breq	.-6      	; 0x16b0 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    16b6:	8a e0       	ldi	r24, 0x0A	; 10
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 c5 0b 	call	0x178a	; 0x178a <delay_ms>
    16be:	83 b1       	in	r24, 0x03	; 3
    16c0:	8c 23       	and	r24, r28
    16c2:	b1 f3       	breq	.-20     	; 0x16b0 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    16c4:	83 b1       	in	r24, 0x03	; 3
    16c6:	8c 23       	and	r24, r28
    16c8:	cf 91       	pop	r28
    16ca:	08 95       	ret

000016cc <wait_for_button_release>:
    16cc:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    16d0:	08 95       	ret

000016d2 <_ZN20OrangutanPushbuttons9isPressedEh>:
    16d2:	a1 e0       	ldi	r26, 0x01	; 1
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e6       	ldi	r30, 0x6F	; 111
    16d8:	fb e0       	ldi	r31, 0x0B	; 11
    16da:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__prologue_saves__+0x20>
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN20OrangutanPushbuttons4initEv>
    16e4:	93 b1       	in	r25, 0x03	; 3
    16e6:	90 95       	com	r25
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	89 23       	and	r24, r25
    16ec:	21 96       	adiw	r28, 0x01	; 1
    16ee:	e2 e0       	ldi	r30, 0x02	; 2
    16f0:	0c 94 10 12 	jmp	0x2420	; 0x2420 <__epilogue_restores__+0x20>

000016f4 <button_is_pressed>:
    16f4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN20OrangutanPushbuttons9isPressedEh>
    16f8:	08 95       	ret

000016fa <__vector_9>:
    16fa:	2f 92       	push	r2
    16fc:	8f 93       	push	r24
    16fe:	9f 93       	push	r25
    1700:	2f b6       	in	r2, 0x3f	; 63
    1702:	80 91 dc 01 	lds	r24, 0x01DC
    1706:	90 91 dd 01 	lds	r25, 0x01DD
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	80 93 dc 01 	sts	0x01DC, r24
    1710:	90 93 dd 01 	sts	0x01DD, r25
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	80 91 de 01 	lds	r24, 0x01DE
    171a:	89 1f       	adc	r24, r25
    171c:	80 93 de 01 	sts	0x01DE, r24
    1720:	90 91 d6 01 	lds	r25, 0x01D6
    1724:	9c 5f       	subi	r25, 0xFC	; 252
    1726:	90 93 d6 01 	sts	0x01D6, r25
    172a:	80 91 d5 01 	lds	r24, 0x01D5
    172e:	80 51       	subi	r24, 0x10	; 16
    1730:	97 42       	sbci	r25, 0x27	; 39
    1732:	c0 f0       	brcs	.+48     	; 0x1764 <end>
    1734:	90 93 d6 01 	sts	0x01D6, r25
    1738:	80 93 d5 01 	sts	0x01D5, r24
    173c:	80 91 d7 01 	lds	r24, 0x01D7
    1740:	90 91 d8 01 	lds	r25, 0x01D8
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	80 93 d7 01 	sts	0x01D7, r24
    174a:	90 93 d8 01 	sts	0x01D8, r25
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	80 91 d9 01 	lds	r24, 0x01D9
    1754:	89 1f       	adc	r24, r25
    1756:	80 93 d9 01 	sts	0x01D9, r24
    175a:	80 91 da 01 	lds	r24, 0x01DA
    175e:	89 1f       	adc	r24, r25
    1760:	80 93 da 01 	sts	0x01DA, r24

00001764 <end>:
    1764:	2f be       	out	0x3f, r2	; 63
    1766:	9f 91       	pop	r25
    1768:	8f 91       	pop	r24
    176a:	2f 90       	pop	r2
    176c:	18 95       	reti

0000176e <_ZN13OrangutanTime17delayMillisecondsEj>:
    176e:	28 ee       	ldi	r18, 0xE8	; 232
    1770:	33 e0       	ldi	r19, 0x03	; 3
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	48 f0       	brcs	.+18     	; 0x1788 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1776:	f9 01       	movw	r30, r18
    1778:	6f 93       	push	r22
    177a:	64 e0       	ldi	r22, 0x04	; 4
    177c:	6a 95       	dec	r22
    177e:	f1 f7       	brne	.-4      	; 0x177c <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    1780:	6f 91       	pop	r22
    1782:	31 97       	sbiw	r30, 0x01	; 1
    1784:	c9 f7       	brne	.-14     	; 0x1778 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    1786:	f5 cf       	rjmp	.-22     	; 0x1772 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1788:	08 95       	ret

0000178a <delay_ms>:
    178a:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN13OrangutanTime17delayMillisecondsEj>
    178e:	08 95       	ret

00001790 <_ZN13OrangutanTime5init2Ev>:
    1790:	e0 e7       	ldi	r30, 0x70	; 112
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	8e 7f       	andi	r24, 0xFE	; 254
    1798:	80 83       	st	Z, r24
    179a:	a0 eb       	ldi	r26, 0xB0	; 176
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	8c 91       	ld	r24, X
    17a0:	83 60       	ori	r24, 0x03	; 3
    17a2:	8c 93       	st	X, r24
    17a4:	a1 eb       	ldi	r26, 0xB1	; 177
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	8c 91       	ld	r24, X
    17aa:	80 7f       	andi	r24, 0xF0	; 240
    17ac:	8c 93       	st	X, r24
    17ae:	8c 91       	ld	r24, X
    17b0:	82 60       	ori	r24, 0x02	; 2
    17b2:	8c 93       	st	X, r24
    17b4:	b8 9a       	sbi	0x17, 0	; 23
    17b6:	80 81       	ld	r24, Z
    17b8:	81 60       	ori	r24, 0x01	; 1
    17ba:	80 83       	st	Z, r24
    17bc:	78 94       	sei
    17be:	08 95       	ret

000017c0 <_ZN13OrangutanTime4initEv>:
    17c0:	80 91 ff 02 	lds	r24, 0x02FF
    17c4:	81 11       	cpse	r24, r1
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <_ZN13OrangutanTime4initEv+0x12>
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	80 93 ff 02 	sts	0x02FF, r24
    17ce:	0e 94 c8 0b 	call	0x1790	; 0x1790 <_ZN13OrangutanTime5init2Ev>
    17d2:	08 95       	ret

000017d4 <_ZN13OrangutanTime5resetEv>:
    17d4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_ZN13OrangutanTime4initEv>
    17d8:	e0 e7       	ldi	r30, 0x70	; 112
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8e 7f       	andi	r24, 0xFE	; 254
    17e0:	80 83       	st	Z, r24
    17e2:	10 92 d7 01 	sts	0x01D7, r1
    17e6:	10 92 d8 01 	sts	0x01D8, r1
    17ea:	10 92 d9 01 	sts	0x01D9, r1
    17ee:	10 92 da 01 	sts	0x01DA, r1
    17f2:	10 92 d6 01 	sts	0x01D6, r1
    17f6:	10 92 d5 01 	sts	0x01D5, r1
    17fa:	80 81       	ld	r24, Z
    17fc:	81 60       	ori	r24, 0x01	; 1
    17fe:	80 83       	st	Z, r24
    1800:	08 95       	ret

00001802 <calibrate_line_sensors>:
    1802:	68 2f       	mov	r22, r24
    1804:	8f ed       	ldi	r24, 0xDF	; 223
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <_ZN16PololuQTRSensors9calibrateEh>
    180c:	08 95       	ret

0000180e <read_line_white>:
    180e:	46 2f       	mov	r20, r22
    1810:	21 e0       	ldi	r18, 0x01	; 1
    1812:	bc 01       	movw	r22, r24
    1814:	8f ed       	ldi	r24, 0xDF	; 223
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN16PololuQTRSensors8readLineEPjhh>
    181c:	08 95       	ret

0000181e <_ZN9Pololu3pi4initEjh>:
    181e:	0f 93       	push	r16
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	00 d0       	rcall	.+0      	; 0x1826 <_ZN9Pololu3pi4initEjh+0x8>
    1826:	00 d0       	rcall	.+0      	; 0x1828 <_ZN9Pololu3pi4initEjh+0xa>
    1828:	1f 92       	push	r1
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	9c 01       	movw	r18, r24
    1830:	85 e0       	ldi	r24, 0x05	; 5
    1832:	e8 e3       	ldi	r30, 0x38	; 56
    1834:	f1 e0       	ldi	r31, 0x01	; 1
    1836:	de 01       	movw	r26, r28
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	01 90       	ld	r0, Z+
    183c:	0d 92       	st	X+, r0
    183e:	8a 95       	dec	r24
    1840:	e1 f7       	brne	.-8      	; 0x183a <_ZN9Pololu3pi4initEjh+0x1c>
    1842:	66 23       	and	r22, r22
    1844:	11 f0       	breq	.+4      	; 0x184a <_ZN9Pololu3pi4initEjh+0x2c>
    1846:	0f ef       	ldi	r16, 0xFF	; 255
    1848:	01 c0       	rjmp	.+2      	; 0x184c <_ZN9Pololu3pi4initEjh+0x2e>
    184a:	03 e1       	ldi	r16, 0x13	; 19
    184c:	45 e0       	ldi	r20, 0x05	; 5
    184e:	be 01       	movw	r22, r28
    1850:	6f 5f       	subi	r22, 0xFF	; 255
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	8f ed       	ldi	r24, 0xDF	; 223
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    185c:	8f ed       	ldi	r24, 0xDF	; 223
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN16PololuQTRSensors11emittersOffEv>
    1864:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN13OrangutanTime5resetEv>
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	0f 91       	pop	r16
    1878:	08 95       	ret

0000187a <pololu_3pi_init>:
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 0f 0c 	call	0x181e	; 0x181e <_ZN9Pololu3pi4initEjh>
    1880:	08 95       	ret

00001882 <_GLOBAL__sub_D_pololu_3pi_init>:
    1882:	8f ed       	ldi	r24, 0xDF	; 223
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	0e 94 2f 11 	call	0x225e	; 0x225e <_ZN16PololuQTRSensorsD1Ev>
    188a:	08 95       	ret

0000188c <delay_us>:
    188c:	6f 93       	push	r22
    188e:	64 e0       	ldi	r22, 0x04	; 4
    1890:	6a 95       	dec	r22
    1892:	f1 f7       	brne	.-4      	; 0x1890 <delay_us+0x4>
    1894:	6f 91       	pop	r22
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	c9 f7       	brne	.-14     	; 0x188c <delay_us>
    189a:	08 95       	ret

0000189c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    189c:	fc 01       	movw	r30, r24
    189e:	11 82       	std	Z+1, r1	; 0x01
    18a0:	10 82       	st	Z, r1
    18a2:	13 82       	std	Z+3, r1	; 0x03
    18a4:	12 82       	std	Z+2, r1	; 0x02
    18a6:	15 82       	std	Z+5, r1	; 0x05
    18a8:	14 82       	std	Z+4, r1	; 0x04
    18aa:	16 82       	std	Z+6, r1	; 0x06
    18ac:	68 30       	cpi	r22, 0x08	; 8
    18ae:	68 f4       	brcc	.+26     	; 0x18ca <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    18b0:	89 e2       	ldi	r24, 0x29	; 41
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	8b e2       	ldi	r24, 0x2B	; 43
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	93 83       	std	Z+3, r25	; 0x03
    18be:	82 83       	std	Z+2, r24	; 0x02
    18c0:	8a e2       	ldi	r24, 0x2A	; 42
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	95 83       	std	Z+5, r25	; 0x05
    18c6:	84 83       	std	Z+4, r24	; 0x04
    18c8:	1f c0       	rjmp	.+62     	; 0x1908 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18ca:	6e 30       	cpi	r22, 0x0E	; 14
    18cc:	70 f4       	brcc	.+28     	; 0x18ea <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    18ce:	83 e2       	ldi	r24, 0x23	; 35
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	85 e2       	ldi	r24, 0x25	; 37
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	93 83       	std	Z+3, r25	; 0x03
    18dc:	82 83       	std	Z+2, r24	; 0x02
    18de:	84 e2       	ldi	r24, 0x24	; 36
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	95 83       	std	Z+5, r25	; 0x05
    18e4:	84 83       	std	Z+4, r24	; 0x04
    18e6:	68 50       	subi	r22, 0x08	; 8
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    18ea:	65 31       	cpi	r22, 0x15	; 21
    18ec:	98 f4       	brcc	.+38     	; 0x1914 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    18ee:	86 e2       	ldi	r24, 0x26	; 38
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
    18f6:	88 e2       	ldi	r24, 0x28	; 40
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	93 83       	std	Z+3, r25	; 0x03
    18fc:	82 83       	std	Z+2, r24	; 0x02
    18fe:	87 e2       	ldi	r24, 0x27	; 39
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	95 83       	std	Z+5, r25	; 0x05
    1904:	84 83       	std	Z+4, r24	; 0x04
    1906:	6e 50       	subi	r22, 0x0E	; 14
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	01 c0       	rjmp	.+2      	; 0x190e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    190c:	88 0f       	add	r24, r24
    190e:	6a 95       	dec	r22
    1910:	ea f7       	brpl	.-6      	; 0x190c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    1912:	86 83       	std	Z+6, r24	; 0x06
    1914:	08 95       	ret

00001916 <_ZN16PololuQTRSensors4initEhhh>:
    1916:	a7 e0       	ldi	r26, 0x07	; 7
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e1 e9       	ldi	r30, 0x91	; 145
    191c:	fc e0       	ldi	r31, 0x0C	; 12
    191e:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <__prologue_saves__+0x1c>
    1922:	8c 01       	movw	r16, r24
    1924:	fc 01       	movw	r30, r24
    1926:	11 82       	std	Z+1, r1	; 0x01
    1928:	10 82       	st	Z, r1
    192a:	13 82       	std	Z+3, r1	; 0x03
    192c:	12 82       	std	Z+2, r1	; 0x02
    192e:	15 82       	std	Z+5, r1	; 0x05
    1930:	14 82       	std	Z+4, r1	; 0x04
    1932:	17 82       	std	Z+7, r1	; 0x07
    1934:	16 82       	std	Z+6, r1	; 0x06
    1936:	61 31       	cpi	r22, 0x11	; 17
    1938:	18 f0       	brcs	.+6      	; 0x1940 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    193a:	80 e1       	ldi	r24, 0x10	; 16
    193c:	80 87       	std	Z+8, r24	; 0x08
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1940:	fc 01       	movw	r30, r24
    1942:	60 87       	std	Z+8, r22	; 0x08
    1944:	f8 01       	movw	r30, r16
    1946:	20 8b       	std	Z+16, r18	; 0x10
    1948:	64 2f       	mov	r22, r20
    194a:	ce 01       	movw	r24, r28
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1952:	8f 81       	ldd	r24, Y+7	; 0x07
    1954:	f8 01       	movw	r30, r16
    1956:	81 87       	std	Z+9, r24	; 0x09
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	93 87       	std	Z+11, r25	; 0x0b
    195e:	82 87       	std	Z+10, r24	; 0x0a
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	95 87       	std	Z+13, r25	; 0x0d
    1966:	84 87       	std	Z+12, r24	; 0x0c
    1968:	27 96       	adiw	r28, 0x07	; 7
    196a:	e4 e0       	ldi	r30, 0x04	; 4
    196c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__epilogue_restores__+0x1c>

00001970 <_ZN16PololuQTRSensors11emittersOffEv>:
    1970:	fc 01       	movw	r30, r24
    1972:	a4 85       	ldd	r26, Z+12	; 0x0c
    1974:	b5 85       	ldd	r27, Z+13	; 0x0d
    1976:	10 97       	sbiw	r26, 0x00	; 0
    1978:	79 f0       	breq	.+30     	; 0x1998 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    197a:	8c 91       	ld	r24, X
    197c:	91 85       	ldd	r25, Z+9	; 0x09
    197e:	89 2b       	or	r24, r25
    1980:	8c 93       	st	X, r24
    1982:	a2 85       	ldd	r26, Z+10	; 0x0a
    1984:	b3 85       	ldd	r27, Z+11	; 0x0b
    1986:	9c 91       	ld	r25, X
    1988:	81 85       	ldd	r24, Z+9	; 0x09
    198a:	80 95       	com	r24
    198c:	89 23       	and	r24, r25
    198e:	8c 93       	st	X, r24
    1990:	88 ec       	ldi	r24, 0xC8	; 200
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 46 0c 	call	0x188c	; 0x188c <delay_us>
    1998:	08 95       	ret

0000199a <_ZN16PololuQTRSensors10emittersOnEv>:
    199a:	fc 01       	movw	r30, r24
    199c:	a4 85       	ldd	r26, Z+12	; 0x0c
    199e:	b5 85       	ldd	r27, Z+13	; 0x0d
    19a0:	10 97       	sbiw	r26, 0x00	; 0
    19a2:	71 f0       	breq	.+28     	; 0x19c0 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    19a4:	8c 91       	ld	r24, X
    19a6:	91 85       	ldd	r25, Z+9	; 0x09
    19a8:	89 2b       	or	r24, r25
    19aa:	8c 93       	st	X, r24
    19ac:	a2 85       	ldd	r26, Z+10	; 0x0a
    19ae:	b3 85       	ldd	r27, Z+11	; 0x0b
    19b0:	8c 91       	ld	r24, X
    19b2:	91 85       	ldd	r25, Z+9	; 0x09
    19b4:	89 2b       	or	r24, r25
    19b6:	8c 93       	st	X, r24
    19b8:	88 ec       	ldi	r24, 0xC8	; 200
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 46 0c 	call	0x188c	; 0x188c <delay_us>
    19c0:	08 95       	ret

000019c2 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    19c2:	a7 e0       	ldi	r26, 0x07	; 7
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e7 ee       	ldi	r30, 0xE7	; 231
    19c8:	fc e0       	ldi	r31, 0x0C	; 12
    19ca:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__+0x6>
    19ce:	7c 01       	movw	r14, r24
    19d0:	4b 01       	movw	r8, r22
    19d2:	64 2f       	mov	r22, r20
    19d4:	39 01       	movw	r6, r18
    19d6:	40 2f       	mov	r20, r16
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN16PololuQTRSensors4initEhhh>
    19de:	87 01       	movw	r16, r14
    19e0:	0f 5b       	subi	r16, 0xBF	; 191
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	f8 01       	movw	r30, r16
    19e6:	10 82       	st	Z, r1
    19e8:	67 01       	movw	r12, r14
    19ea:	f2 e4       	ldi	r31, 0x42	; 66
    19ec:	cf 0e       	add	r12, r31
    19ee:	d1 1c       	adc	r13, r1
    19f0:	f6 01       	movw	r30, r12
    19f2:	10 82       	st	Z, r1
    19f4:	57 01       	movw	r10, r14
    19f6:	f3 e4       	ldi	r31, 0x43	; 67
    19f8:	af 0e       	add	r10, r31
    19fa:	b1 1c       	adc	r11, r1
    19fc:	f5 01       	movw	r30, r10
    19fe:	10 82       	st	Z, r1
    1a00:	f7 01       	movw	r30, r14
    1a02:	77 86       	std	Z+15, r7	; 0x0f
    1a04:	66 86       	std	Z+14, r6	; 0x0e
    1a06:	51 2c       	mov	r5, r1
    1a08:	f7 01       	movw	r30, r14
    1a0a:	80 85       	ldd	r24, Z+8	; 0x08
    1a0c:	58 16       	cp	r5, r24
    1a0e:	50 f5       	brcc	.+84     	; 0x1a64 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    1a10:	65 2c       	mov	r6, r5
    1a12:	71 2c       	mov	r7, r1
    1a14:	f4 01       	movw	r30, r8
    1a16:	e6 0d       	add	r30, r6
    1a18:	f7 1d       	adc	r31, r7
    1a1a:	60 81       	ld	r22, Z
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	0e 94 4e 0c 	call	0x189c	; 0x189c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1a24:	2f 81       	ldd	r18, Y+7	; 0x07
    1a26:	f7 01       	movw	r30, r14
    1a28:	e6 0d       	add	r30, r6
    1a2a:	f7 1d       	adc	r31, r7
    1a2c:	21 8b       	std	Z+17, r18	; 0x11
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	f3 01       	movw	r30, r6
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	ee 0d       	add	r30, r14
    1a3a:	ff 1d       	adc	r31, r15
    1a3c:	92 a3       	std	Z+34, r25	; 0x22
    1a3e:	81 a3       	std	Z+33, r24	; 0x21
    1a40:	83 32       	cpi	r24, 0x23	; 35
    1a42:	91 05       	cpc	r25, r1
    1a44:	11 f4       	brne	.+4      	; 0x1a4a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1a46:	f8 01       	movw	r30, r16
    1a48:	08 c0       	rjmp	.+16     	; 0x1a5a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a4a:	86 32       	cpi	r24, 0x26	; 38
    1a4c:	91 05       	cpc	r25, r1
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1a50:	f6 01       	movw	r30, r12
    1a52:	03 c0       	rjmp	.+6      	; 0x1a5a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1a54:	89 97       	sbiw	r24, 0x29	; 41
    1a56:	21 f4       	brne	.+8      	; 0x1a60 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1a58:	f5 01       	movw	r30, r10
    1a5a:	80 81       	ld	r24, Z
    1a5c:	82 2b       	or	r24, r18
    1a5e:	80 83       	st	Z, r24
    1a60:	53 94       	inc	r5
    1a62:	d2 cf       	rjmp	.-92     	; 0x1a08 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1a64:	27 96       	adiw	r28, 0x07	; 7
    1a66:	ef e0       	ldi	r30, 0x0F	; 15
    1a68:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__+0x6>

00001a6c <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1a6c:	a0 e0       	ldi	r26, 0x00	; 0
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ec e3       	ldi	r30, 0x3C	; 60
    1a72:	fd e0       	ldi	r31, 0x0D	; 13
    1a74:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__prologue_saves__+0xa>
    1a78:	ec 01       	movw	r28, r24
    1a7a:	5b 01       	movw	r10, r22
    1a7c:	6c 01       	movw	r12, r24
    1a7e:	81 e4       	ldi	r24, 0x41	; 65
    1a80:	c8 0e       	add	r12, r24
    1a82:	d1 1c       	adc	r13, r1
    1a84:	f6 01       	movw	r30, r12
    1a86:	80 80       	ld	r8, Z
    1a88:	7e 01       	movw	r14, r28
    1a8a:	f2 e4       	ldi	r31, 0x42	; 66
    1a8c:	ef 0e       	add	r14, r31
    1a8e:	f1 1c       	adc	r15, r1
    1a90:	f7 01       	movw	r30, r14
    1a92:	70 80       	ld	r7, Z
    1a94:	8e 01       	movw	r16, r28
    1a96:	0d 5b       	subi	r16, 0xBD	; 189
    1a98:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	90 80       	ld	r9, Z
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	98 85       	ldd	r25, Y+8	; 0x08
    1aa2:	89 17       	cp	r24, r25
    1aa4:	48 f4       	brcc	.+18     	; 0x1ab8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    1aa6:	f5 01       	movw	r30, r10
    1aa8:	e8 0f       	add	r30, r24
    1aaa:	f1 1d       	adc	r31, r1
    1aac:	e8 0f       	add	r30, r24
    1aae:	f1 1d       	adc	r31, r1
    1ab0:	11 82       	std	Z+1, r1	; 0x01
    1ab2:	10 82       	st	Z, r1
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	f4 cf       	rjmp	.-24     	; 0x1aa0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1ab8:	84 b1       	in	r24, 0x04	; 4
    1aba:	f6 01       	movw	r30, r12
    1abc:	90 81       	ld	r25, Z
    1abe:	89 2b       	or	r24, r25
    1ac0:	84 b9       	out	0x04, r24	; 4
    1ac2:	87 b1       	in	r24, 0x07	; 7
    1ac4:	f7 01       	movw	r30, r14
    1ac6:	90 81       	ld	r25, Z
    1ac8:	89 2b       	or	r24, r25
    1aca:	87 b9       	out	0x07, r24	; 7
    1acc:	8a b1       	in	r24, 0x0a	; 10
    1ace:	f8 01       	movw	r30, r16
    1ad0:	90 81       	ld	r25, Z
    1ad2:	89 2b       	or	r24, r25
    1ad4:	8a b9       	out	0x0a, r24	; 10
    1ad6:	85 b1       	in	r24, 0x05	; 5
    1ad8:	f6 01       	movw	r30, r12
    1ada:	90 81       	ld	r25, Z
    1adc:	89 2b       	or	r24, r25
    1ade:	85 b9       	out	0x05, r24	; 5
    1ae0:	88 b1       	in	r24, 0x08	; 8
    1ae2:	f7 01       	movw	r30, r14
    1ae4:	90 81       	ld	r25, Z
    1ae6:	89 2b       	or	r24, r25
    1ae8:	88 b9       	out	0x08, r24	; 8
    1aea:	8b b1       	in	r24, 0x0b	; 11
    1aec:	f8 01       	movw	r30, r16
    1aee:	90 81       	ld	r25, Z
    1af0:	89 2b       	or	r24, r25
    1af2:	8b b9       	out	0x0b, r24	; 11
    1af4:	8a e0       	ldi	r24, 0x0A	; 10
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 46 0c 	call	0x188c	; 0x188c <delay_us>
    1afc:	94 b1       	in	r25, 0x04	; 4
    1afe:	f6 01       	movw	r30, r12
    1b00:	80 81       	ld	r24, Z
    1b02:	80 95       	com	r24
    1b04:	89 23       	and	r24, r25
    1b06:	84 b9       	out	0x04, r24	; 4
    1b08:	97 b1       	in	r25, 0x07	; 7
    1b0a:	f7 01       	movw	r30, r14
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 95       	com	r24
    1b10:	89 23       	and	r24, r25
    1b12:	87 b9       	out	0x07, r24	; 7
    1b14:	9a b1       	in	r25, 0x0a	; 10
    1b16:	f8 01       	movw	r30, r16
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 95       	com	r24
    1b1c:	89 23       	and	r24, r25
    1b1e:	8a b9       	out	0x0a, r24	; 10
    1b20:	95 b1       	in	r25, 0x05	; 5
    1b22:	f6 01       	movw	r30, r12
    1b24:	80 81       	ld	r24, Z
    1b26:	80 95       	com	r24
    1b28:	89 23       	and	r24, r25
    1b2a:	85 b9       	out	0x05, r24	; 5
    1b2c:	98 b1       	in	r25, 0x08	; 8
    1b2e:	f7 01       	movw	r30, r14
    1b30:	80 81       	ld	r24, Z
    1b32:	80 95       	com	r24
    1b34:	89 23       	and	r24, r25
    1b36:	88 b9       	out	0x08, r24	; 8
    1b38:	9b b1       	in	r25, 0x0b	; 11
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	80 81       	ld	r24, Z
    1b3e:	80 95       	com	r24
    1b40:	89 23       	and	r24, r25
    1b42:	8b b9       	out	0x0b, r24	; 11
    1b44:	e0 90 b0 00 	lds	r14, 0x00B0
    1b48:	d0 90 b1 00 	lds	r13, 0x00B1
    1b4c:	80 91 b0 00 	lds	r24, 0x00B0
    1b50:	83 60       	ori	r24, 0x03	; 3
    1b52:	80 93 b0 00 	sts	0x00B0, r24
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	80 93 b1 00 	sts	0x00B1, r24
    1b5c:	40 91 b2 00 	lds	r20, 0x00B2
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b66:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b68:	82 17       	cp	r24, r18
    1b6a:	93 07       	cpc	r25, r19
    1b6c:	20 f5       	brcc	.+72     	; 0x1bb6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1b6e:	c0 90 b2 00 	lds	r12, 0x00B2
    1b72:	2c 2d       	mov	r18, r12
    1b74:	24 1b       	sub	r18, r20
    1b76:	82 0f       	add	r24, r18
    1b78:	91 1d       	adc	r25, r1
    1b7a:	03 b1       	in	r16, 0x03	; 3
    1b7c:	08 11       	cpse	r16, r8
    1b7e:	32 c0       	rjmp	.+100    	; 0x1be4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b80:	f6 b0       	in	r15, 0x06	; 6
    1b82:	f7 10       	cpse	r15, r7
    1b84:	2f c0       	rjmp	.+94     	; 0x1be4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b86:	29 b1       	in	r18, 0x09	; 9
    1b88:	29 11       	cpse	r18, r9
    1b8a:	2c c0       	rjmp	.+88     	; 0x1be4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1b8c:	10 c0       	rjmp	.+32     	; 0x1bae <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1b8e:	21 2f       	mov	r18, r17
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	a9 01       	movw	r20, r18
    1b94:	44 0f       	add	r20, r20
    1b96:	55 1f       	adc	r21, r21
    1b98:	f5 01       	movw	r30, r10
    1b9a:	e4 0f       	add	r30, r20
    1b9c:	f5 1f       	adc	r31, r21
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	67 2b       	or	r22, r23
    1ba4:	21 f1       	breq	.+72     	; 0x1bee <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1ba6:	1f 5f       	subi	r17, 0xFF	; 255
    1ba8:	28 85       	ldd	r18, Y+8	; 0x08
    1baa:	12 17       	cp	r17, r18
    1bac:	80 f3       	brcs	.-32     	; 0x1b8e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1bae:	7f 2c       	mov	r7, r15
    1bb0:	80 2e       	mov	r8, r16
    1bb2:	4c 2d       	mov	r20, r12
    1bb4:	d7 cf       	rjmp	.-82     	; 0x1b64 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1bb6:	e0 92 b0 00 	sts	0x00B0, r14
    1bba:	d0 92 b1 00 	sts	0x00B1, r13
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	88 85       	ldd	r24, Y+8	; 0x08
    1bc2:	28 17       	cp	r18, r24
    1bc4:	30 f5       	brcc	.+76     	; 0x1c12 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1bc6:	f5 01       	movw	r30, r10
    1bc8:	e2 0f       	add	r30, r18
    1bca:	f1 1d       	adc	r31, r1
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f1 1d       	adc	r31, r1
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	89 2b       	or	r24, r25
    1bd6:	21 f4       	brne	.+8      	; 0x1be0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1bd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
    1be0:	2f 5f       	subi	r18, 0xFF	; 255
    1be2:	ee cf       	rjmp	.-36     	; 0x1bc0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1be4:	03 b1       	in	r16, 0x03	; 3
    1be6:	f6 b0       	in	r15, 0x06	; 6
    1be8:	99 b0       	in	r9, 0x09	; 9
    1bea:	10 e0       	ldi	r17, 0x00	; 0
    1bec:	dd cf       	rjmp	.-70     	; 0x1ba8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1bee:	de 01       	movw	r26, r28
    1bf0:	a4 0f       	add	r26, r20
    1bf2:	b5 1f       	adc	r27, r21
    1bf4:	91 96       	adiw	r26, 0x21	; 33
    1bf6:	0d 90       	ld	r0, X+
    1bf8:	bc 91       	ld	r27, X
    1bfa:	a0 2d       	mov	r26, r0
    1bfc:	4c 91       	ld	r20, X
    1bfe:	de 01       	movw	r26, r28
    1c00:	a2 0f       	add	r26, r18
    1c02:	b3 1f       	adc	r27, r19
    1c04:	51 96       	adiw	r26, 0x11	; 17
    1c06:	2c 91       	ld	r18, X
    1c08:	42 23       	and	r20, r18
    1c0a:	69 f6       	brne	.-102    	; 0x1ba6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	ca cf       	rjmp	.-108    	; 0x1ba6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	ed e0       	ldi	r30, 0x0D	; 13
    1c18:	0c 94 05 12 	jmp	0x240a	; 0x240a <__epilogue_restores__+0xa>

00001c1c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	fc 01       	movw	r30, r24
    1c2a:	9b 01       	movw	r18, r22
    1c2c:	f0 90 7c 00 	lds	r15, 0x007C
    1c30:	00 91 7a 00 	lds	r16, 0x007A
    1c34:	47 b1       	in	r20, 0x07	; 7
    1c36:	18 b1       	in	r17, 0x08	; 8
    1c38:	80 91 7a 00 	lds	r24, 0x007A
    1c3c:	86 fd       	sbrc	r24, 6
    1c3e:	fc cf       	rjmp	.-8      	; 0x1c38 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 85       	ldd	r25, Z+8	; 0x08
    1c44:	89 17       	cp	r24, r25
    1c46:	48 f4       	brcc	.+18     	; 0x1c5a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1c48:	d9 01       	movw	r26, r18
    1c4a:	a8 0f       	add	r26, r24
    1c4c:	b1 1d       	adc	r27, r1
    1c4e:	a8 0f       	add	r26, r24
    1c50:	b1 1d       	adc	r27, r1
    1c52:	1d 92       	st	X+, r1
    1c54:	1c 92       	st	X, r1
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	f4 cf       	rjmp	.-24     	; 0x1c42 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1c5a:	97 b1       	in	r25, 0x07	; 7
    1c5c:	82 a1       	ldd	r24, Z+34	; 0x22
    1c5e:	80 95       	com	r24
    1c60:	89 23       	and	r24, r25
    1c62:	87 b9       	out	0x07, r24	; 7
    1c64:	98 b1       	in	r25, 0x08	; 8
    1c66:	82 a1       	ldd	r24, Z+34	; 0x22
    1c68:	80 95       	com	r24
    1c6a:	89 23       	and	r24, r25
    1c6c:	88 b9       	out	0x08, r24	; 8
    1c6e:	87 e8       	ldi	r24, 0x87	; 135
    1c70:	80 93 7a 00 	sts	0x007A, r24
    1c74:	e1 2c       	mov	r14, r1
    1c76:	81 a1       	ldd	r24, Z+33	; 0x21
    1c78:	e8 16       	cp	r14, r24
    1c7a:	10 f0       	brcs	.+4      	; 0x1c80 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1c7c:	e1 2c       	mov	r14, r1
    1c7e:	29 c0       	rjmp	.+82     	; 0x1cd2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1c80:	50 e0       	ldi	r21, 0x00	; 0
    1c82:	80 85       	ldd	r24, Z+8	; 0x08
    1c84:	58 17       	cp	r21, r24
    1c86:	18 f5       	brcc	.+70     	; 0x1cce <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1c88:	a5 2f       	mov	r26, r21
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	ef 01       	movw	r28, r30
    1c8e:	ca 0f       	add	r28, r26
    1c90:	db 1f       	adc	r29, r27
    1c92:	89 89       	ldd	r24, Y+17	; 0x11
    1c94:	80 64       	ori	r24, 0x40	; 64
    1c96:	80 93 7c 00 	sts	0x007C, r24
    1c9a:	80 91 7a 00 	lds	r24, 0x007A
    1c9e:	80 64       	ori	r24, 0x40	; 64
    1ca0:	80 93 7a 00 	sts	0x007A, r24
    1ca4:	80 91 7a 00 	lds	r24, 0x007A
    1ca8:	86 fd       	sbrc	r24, 6
    1caa:	fc cf       	rjmp	.-8      	; 0x1ca4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1cac:	60 91 78 00 	lds	r22, 0x0078
    1cb0:	70 91 79 00 	lds	r23, 0x0079
    1cb4:	aa 0f       	add	r26, r26
    1cb6:	bb 1f       	adc	r27, r27
    1cb8:	a2 0f       	add	r26, r18
    1cba:	b3 1f       	adc	r27, r19
    1cbc:	8d 91       	ld	r24, X+
    1cbe:	9c 91       	ld	r25, X
    1cc0:	11 97       	sbiw	r26, 0x01	; 1
    1cc2:	86 0f       	add	r24, r22
    1cc4:	97 1f       	adc	r25, r23
    1cc6:	8d 93       	st	X+, r24
    1cc8:	9c 93       	st	X, r25
    1cca:	5f 5f       	subi	r21, 0xFF	; 255
    1ccc:	da cf       	rjmp	.-76     	; 0x1c82 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1cce:	e3 94       	inc	r14
    1cd0:	d2 cf       	rjmp	.-92     	; 0x1c76 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1cd2:	80 85       	ldd	r24, Z+8	; 0x08
    1cd4:	e8 16       	cp	r14, r24
    1cd6:	a0 f4       	brcc	.+40     	; 0x1d00 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1cd8:	e9 01       	movw	r28, r18
    1cda:	ce 0d       	add	r28, r14
    1cdc:	d1 1d       	adc	r29, r1
    1cde:	ce 0d       	add	r28, r14
    1ce0:	d1 1d       	adc	r29, r1
    1ce2:	61 a1       	ldd	r22, Z+33	; 0x21
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	95 95       	asr	r25
    1cea:	87 95       	ror	r24
    1cec:	a8 81       	ld	r26, Y
    1cee:	b9 81       	ldd	r27, Y+1	; 0x01
    1cf0:	8a 0f       	add	r24, r26
    1cf2:	9b 1f       	adc	r25, r27
    1cf4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
    1cf8:	79 83       	std	Y+1, r23	; 0x01
    1cfa:	68 83       	st	Y, r22
    1cfc:	e3 94       	inc	r14
    1cfe:	e9 cf       	rjmp	.-46     	; 0x1cd2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1d00:	f0 92 7c 00 	sts	0x007C, r15
    1d04:	00 93 7a 00 	sts	0x007A, r16
    1d08:	18 b9       	out	0x08, r17	; 8
    1d0a:	47 b9       	out	0x07, r20	; 7
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	e6 e0       	ldi	r30, 0x06	; 6
    1d12:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__epilogue_restores__+0x18>

00001d16 <_ZN16PololuQTRSensors4readEPjh>:
    1d16:	a0 e2       	ldi	r26, 0x20	; 32
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e1 e9       	ldi	r30, 0x91	; 145
    1d1c:	fe e0       	ldi	r31, 0x0E	; 14
    1d1e:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x16>
    1d22:	8c 01       	movw	r16, r24
    1d24:	7b 01       	movw	r14, r22
    1d26:	d4 2e       	mov	r13, r20
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	84 0f       	add	r24, r20
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	18 f4       	brcc	.+6      	; 0x1d36 <_ZN16PololuQTRSensors4readEPjh+0x20>
    1d30:	c8 01       	movw	r24, r16
    1d32:	0e 94 cd 0c 	call	0x199a	; 0x199a <_ZN16PololuQTRSensors10emittersOnEv>
    1d36:	d8 01       	movw	r26, r16
    1d38:	50 96       	adiw	r26, 0x10	; 16
    1d3a:	8c 91       	ld	r24, X
    1d3c:	b7 01       	movw	r22, r14
    1d3e:	81 11       	cpse	r24, r1
    1d40:	10 c0       	rjmp	.+32     	; 0x1d62 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1d42:	c8 01       	movw	r24, r16
    1d44:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d48:	c8 01       	movw	r24, r16
    1d4a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN16PololuQTRSensors11emittersOffEv>
    1d4e:	b2 e0       	ldi	r27, 0x02	; 2
    1d50:	db 12       	cpse	r13, r27
    1d52:	3a c0       	rjmp	.+116    	; 0x1dc8 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d54:	be 01       	movw	r22, r28
    1d56:	6f 5f       	subi	r22, 0xFF	; 255
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1d62:	c8 01       	movw	r24, r16
    1d64:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d68:	c8 01       	movw	r24, r16
    1d6a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN16PololuQTRSensors11emittersOffEv>
    1d6e:	e2 e0       	ldi	r30, 0x02	; 2
    1d70:	de 12       	cpse	r13, r30
    1d72:	2a c0       	rjmp	.+84     	; 0x1dc8 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d74:	be 01       	movw	r22, r28
    1d76:	6f 5f       	subi	r22, 0xFF	; 255
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	f8 01       	movw	r30, r16
    1d84:	80 85       	ldd	r24, Z+8	; 0x08
    1d86:	48 17       	cp	r20, r24
    1d88:	f8 f4       	brcc	.+62     	; 0x1dc8 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1d8a:	84 2f       	mov	r24, r20
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	f7 01       	movw	r30, r14
    1d94:	e8 0f       	add	r30, r24
    1d96:	f9 1f       	adc	r31, r25
    1d98:	21 e0       	ldi	r18, 0x01	; 1
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	2c 0f       	add	r18, r28
    1d9e:	3d 1f       	adc	r19, r29
    1da0:	82 0f       	add	r24, r18
    1da2:	93 1f       	adc	r25, r19
    1da4:	d8 01       	movw	r26, r16
    1da6:	1e 96       	adiw	r26, 0x0e	; 14
    1da8:	2d 91       	ld	r18, X+
    1daa:	3c 91       	ld	r19, X
    1dac:	1f 97       	sbiw	r26, 0x0f	; 15
    1dae:	dc 01       	movw	r26, r24
    1db0:	8d 91       	ld	r24, X+
    1db2:	9c 91       	ld	r25, X
    1db4:	28 1b       	sub	r18, r24
    1db6:	39 0b       	sbc	r19, r25
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
    1dc4:	4f 5f       	subi	r20, 0xFF	; 255
    1dc6:	dd cf       	rjmp	.-70     	; 0x1d82 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1dc8:	a0 96       	adiw	r28, 0x20	; 32
    1dca:	e7 e0       	ldi	r30, 0x07	; 7
    1dcc:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x16>

00001dd0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1dd0:	2f 92       	push	r2
    1dd2:	3f 92       	push	r3
    1dd4:	5f 92       	push	r5
    1dd6:	6f 92       	push	r6
    1dd8:	7f 92       	push	r7
    1dda:	8f 92       	push	r8
    1ddc:	9f 92       	push	r9
    1dde:	af 92       	push	r10
    1de0:	bf 92       	push	r11
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	c0 56       	subi	r28, 0x60	; 96
    1df8:	d1 09       	sbc	r29, r1
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	8c 01       	movw	r16, r24
    1e06:	4b 01       	movw	r8, r22
    1e08:	5a 01       	movw	r10, r20
    1e0a:	52 2e       	mov	r5, r18
    1e0c:	da 01       	movw	r26, r20
    1e0e:	8d 91       	ld	r24, X+
    1e10:	9c 91       	ld	r25, X
    1e12:	89 2b       	or	r24, r25
    1e14:	31 f0       	breq	.+12     	; 0x1e22 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1e16:	f4 01       	movw	r30, r8
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	89 2b       	or	r24, r25
    1e1e:	f1 f4       	brne	.+60     	; 0x1e5c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1e20:	24 c0       	rjmp	.+72     	; 0x1e6a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1e22:	d8 01       	movw	r26, r16
    1e24:	18 96       	adiw	r26, 0x08	; 8
    1e26:	8c 91       	ld	r24, X
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	0e 94 21 12 	call	0x2442	; 0x2442 <malloc>
    1e32:	f5 01       	movw	r30, r10
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1e3c:	b1 c0       	rjmp	.+354    	; 0x1fa0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e3e:	fc 01       	movw	r30, r24
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	d8 01       	movw	r26, r16
    1e46:	18 96       	adiw	r26, 0x08	; 8
    1e48:	8c 91       	ld	r24, X
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	28 17       	cp	r18, r24
    1e4e:	39 07       	cpc	r19, r25
    1e50:	14 f7       	brge	.-60     	; 0x1e16 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1e52:	11 92       	st	Z+, r1
    1e54:	11 92       	st	Z+, r1
    1e56:	2f 5f       	subi	r18, 0xFF	; 255
    1e58:	3f 4f       	sbci	r19, 0xFF	; 255
    1e5a:	f4 cf       	rjmp	.-24     	; 0x1e44 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1e5c:	e1 2c       	mov	r14, r1
    1e5e:	f1 2c       	mov	r15, r1
    1e60:	6e 01       	movw	r12, r28
    1e62:	b1 e2       	ldi	r27, 0x21	; 33
    1e64:	cb 0e       	add	r12, r27
    1e66:	d1 1c       	adc	r13, r1
    1e68:	21 c0       	rjmp	.+66     	; 0x1eac <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	80 85       	ldd	r24, Z+8	; 0x08
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0e 94 21 12 	call	0x2442	; 0x2442 <malloc>
    1e78:	d4 01       	movw	r26, r8
    1e7a:	8d 93       	st	X+, r24
    1e7c:	9c 93       	st	X, r25
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1e82:	8e c0       	rjmp	.+284    	; 0x1fa0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	d8 01       	movw	r26, r16
    1e8c:	18 96       	adiw	r26, 0x08	; 8
    1e8e:	8c 91       	ld	r24, X
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	28 17       	cp	r18, r24
    1e94:	39 07       	cpc	r19, r25
    1e96:	14 f7       	brge	.-60     	; 0x1e5c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1e98:	d8 01       	movw	r26, r16
    1e9a:	1e 96       	adiw	r26, 0x0e	; 14
    1e9c:	8d 91       	ld	r24, X+
    1e9e:	9c 91       	ld	r25, X
    1ea0:	1f 97       	sbiw	r26, 0x0f	; 15
    1ea2:	81 93       	st	Z+, r24
    1ea4:	91 93       	st	Z+, r25
    1ea6:	2f 5f       	subi	r18, 0xFF	; 255
    1ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eaa:	ef cf       	rjmp	.-34     	; 0x1e8a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1eac:	45 2d       	mov	r20, r5
    1eae:	be 01       	movw	r22, r28
    1eb0:	6f 5b       	subi	r22, 0xBF	; 191
    1eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_ZN16PololuQTRSensors4readEPjh>
    1eba:	f8 01       	movw	r30, r16
    1ebc:	60 84       	ldd	r6, Z+8	; 0x08
    1ebe:	71 2c       	mov	r7, r1
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ef 5b       	subi	r30, 0xBF	; 191
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	c6 01       	movw	r24, r12
    1ec8:	9e 01       	movw	r18, r28
    1eca:	2f 5f       	subi	r18, 0xFF	; 255
    1ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ece:	19 01       	movw	r2, r18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	26 15       	cp	r18, r6
    1ed6:	37 05       	cpc	r19, r7
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1eda:	e1 14       	cp	r14, r1
    1edc:	f1 04       	cpc	r15, r1
    1ede:	89 f0       	breq	.+34     	; 0x1f02 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	6d 91       	ld	r22, X+
    1ee4:	7c 91       	ld	r23, X
    1ee6:	40 81       	ld	r20, Z
    1ee8:	51 81       	ldd	r21, Z+1	; 0x01
    1eea:	64 17       	cp	r22, r20
    1eec:	75 07       	cpc	r23, r21
    1eee:	48 f0       	brcs	.+18     	; 0x1f02 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1ef0:	d1 01       	movw	r26, r2
    1ef2:	6d 91       	ld	r22, X+
    1ef4:	7c 91       	ld	r23, X
    1ef6:	40 81       	ld	r20, Z
    1ef8:	51 81       	ldd	r21, Z+1	; 0x01
    1efa:	46 17       	cp	r20, r22
    1efc:	57 07       	cpc	r21, r23
    1efe:	48 f0       	brcs	.+18     	; 0x1f12 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1f00:	0d c0       	rjmp	.+26     	; 0x1f1c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1f02:	40 81       	ld	r20, Z
    1f04:	51 81       	ldd	r21, Z+1	; 0x01
    1f06:	dc 01       	movw	r26, r24
    1f08:	4d 93       	st	X+, r20
    1f0a:	5c 93       	st	X, r21
    1f0c:	e1 14       	cp	r14, r1
    1f0e:	f1 04       	cpc	r15, r1
    1f10:	79 f7       	brne	.-34     	; 0x1ef0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1f12:	40 81       	ld	r20, Z
    1f14:	51 81       	ldd	r21, Z+1	; 0x01
    1f16:	d1 01       	movw	r26, r2
    1f18:	4d 93       	st	X+, r20
    1f1a:	5c 93       	st	X, r21
    1f1c:	2f 5f       	subi	r18, 0xFF	; 255
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	b2 e0       	ldi	r27, 0x02	; 2
    1f22:	2b 0e       	add	r2, r27
    1f24:	31 1c       	adc	r3, r1
    1f26:	32 96       	adiw	r30, 0x02	; 2
    1f28:	02 96       	adiw	r24, 0x02	; 2
    1f2a:	d4 cf       	rjmp	.-88     	; 0x1ed4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1f2c:	ef ef       	ldi	r30, 0xFF	; 255
    1f2e:	ee 1a       	sub	r14, r30
    1f30:	fe 0a       	sbc	r15, r30
    1f32:	fa e0       	ldi	r31, 0x0A	; 10
    1f34:	ef 16       	cp	r14, r31
    1f36:	f1 04       	cpc	r15, r1
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1f3a:	b8 cf       	rjmp	.-144    	; 0x1eac <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1f3c:	9e 01       	movw	r18, r28
    1f3e:	2f 5f       	subi	r18, 0xFF	; 255
    1f40:	3f 4f       	sbci	r19, 0xFF	; 255
    1f42:	79 01       	movw	r14, r18
    1f44:	36 01       	movw	r6, r12
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	20 85       	ldd	r18, Z+8	; 0x08
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	82 17       	cp	r24, r18
    1f52:	93 07       	cpc	r25, r19
    1f54:	2c f5       	brge	.+74     	; 0x1fa0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1f56:	d7 01       	movw	r26, r14
    1f58:	2d 91       	ld	r18, X+
    1f5a:	3d 91       	ld	r19, X+
    1f5c:	7d 01       	movw	r14, r26
    1f5e:	b3 01       	movw	r22, r6
    1f60:	6c 19       	sub	r22, r12
    1f62:	7d 09       	sbc	r23, r13
    1f64:	d5 01       	movw	r26, r10
    1f66:	ed 91       	ld	r30, X+
    1f68:	fc 91       	ld	r31, X
    1f6a:	e6 0f       	add	r30, r22
    1f6c:	f7 1f       	adc	r31, r23
    1f6e:	40 81       	ld	r20, Z
    1f70:	51 81       	ldd	r21, Z+1	; 0x01
    1f72:	42 17       	cp	r20, r18
    1f74:	53 07       	cpc	r21, r19
    1f76:	10 f4       	brcc	.+4      	; 0x1f7c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1f78:	31 83       	std	Z+1, r19	; 0x01
    1f7a:	20 83       	st	Z, r18
    1f7c:	f3 01       	movw	r30, r6
    1f7e:	21 91       	ld	r18, Z+
    1f80:	31 91       	ld	r19, Z+
    1f82:	3f 01       	movw	r6, r30
    1f84:	d4 01       	movw	r26, r8
    1f86:	ed 91       	ld	r30, X+
    1f88:	fc 91       	ld	r31, X
    1f8a:	e6 0f       	add	r30, r22
    1f8c:	f7 1f       	adc	r31, r23
    1f8e:	40 81       	ld	r20, Z
    1f90:	51 81       	ldd	r21, Z+1	; 0x01
    1f92:	24 17       	cp	r18, r20
    1f94:	35 07       	cpc	r19, r21
    1f96:	10 f4       	brcc	.+4      	; 0x1f9c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1f98:	31 83       	std	Z+1, r19	; 0x01
    1f9a:	20 83       	st	Z, r18
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	d5 cf       	rjmp	.-86     	; 0x1f4a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1fa0:	c0 5a       	subi	r28, 0xA0	; 160
    1fa2:	df 4f       	sbci	r29, 0xFF	; 255
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	ef 90       	pop	r14
    1fba:	df 90       	pop	r13
    1fbc:	cf 90       	pop	r12
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	7f 90       	pop	r7
    1fc8:	6f 90       	pop	r6
    1fca:	5f 90       	pop	r5
    1fcc:	3f 90       	pop	r3
    1fce:	2f 90       	pop	r2
    1fd0:	08 95       	ret

00001fd2 <_ZN16PololuQTRSensors9calibrateEh>:
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	ec 01       	movw	r28, r24
    1fda:	16 2f       	mov	r17, r22
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	86 0f       	add	r24, r22
    1fe0:	82 30       	cpi	r24, 0x02	; 2
    1fe2:	18 f0       	brcs	.+6      	; 0x1fea <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1fe4:	66 23       	and	r22, r22
    1fe6:	59 f0       	breq	.+22     	; 0x1ffe <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1fe8:	14 c0       	rjmp	.+40     	; 0x2012 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1fea:	21 e0       	ldi	r18, 0x01	; 1
    1fec:	ae 01       	movw	r20, r28
    1fee:	4e 5f       	subi	r20, 0xFE	; 254
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	be 01       	movw	r22, r28
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1ffa:	12 30       	cpi	r17, 0x02	; 2
    1ffc:	51 f4       	brne	.+20     	; 0x2012 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1ffe:	ae 01       	movw	r20, r28
    2000:	4a 5f       	subi	r20, 0xFA	; 250
    2002:	5f 4f       	sbci	r21, 0xFF	; 255
    2004:	be 01       	movw	r22, r28
    2006:	6c 5f       	subi	r22, 0xFC	; 252
    2008:	7f 4f       	sbci	r23, 0xFF	; 255
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	ce 01       	movw	r24, r28
    200e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	08 95       	ret

0000201a <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    201a:	a0 e0       	ldi	r26, 0x00	; 0
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e3 e1       	ldi	r30, 0x13	; 19
    2020:	f0 e1       	ldi	r31, 0x10	; 16
    2022:	0c 94 ed 11 	jmp	0x23da	; 0x23da <__prologue_saves__+0x12>
    2026:	ec 01       	movw	r28, r24
    2028:	8b 01       	movw	r16, r22
    202a:	b4 2e       	mov	r11, r20
    202c:	84 2f       	mov	r24, r20
    202e:	8d 7f       	andi	r24, 0xFD	; 253
    2030:	51 f4       	brne	.+20     	; 0x2046 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
    2034:	9d 81       	ldd	r25, Y+5	; 0x05
    2036:	89 2b       	or	r24, r25
    2038:	09 f4       	brne	.+2      	; 0x203c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    203a:	97 c0       	rjmp	.+302    	; 0x216a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    203c:	8e 81       	ldd	r24, Y+6	; 0x06
    203e:	9f 81       	ldd	r25, Y+7	; 0x07
    2040:	89 2b       	or	r24, r25
    2042:	09 f4       	brne	.+2      	; 0x2046 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    2044:	92 c0       	rjmp	.+292    	; 0x216a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	8b 0d       	add	r24, r11
    204a:	82 30       	cpi	r24, 0x02	; 2
    204c:	50 f4       	brcc	.+20     	; 0x2062 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    204e:	88 81       	ld	r24, Y
    2050:	99 81       	ldd	r25, Y+1	; 0x01
    2052:	89 2b       	or	r24, r25
    2054:	09 f4       	brne	.+2      	; 0x2058 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    2056:	89 c0       	rjmp	.+274    	; 0x216a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	89 2b       	or	r24, r25
    205e:	09 f4       	brne	.+2      	; 0x2062 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    2060:	84 c0       	rjmp	.+264    	; 0x216a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2062:	4b 2d       	mov	r20, r11
    2064:	b8 01       	movw	r22, r16
    2066:	ce 01       	movw	r24, r28
    2068:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_ZN16PololuQTRSensors4readEPjh>
    206c:	78 01       	movw	r14, r16
    206e:	00 e0       	ldi	r16, 0x00	; 0
    2070:	10 e0       	ldi	r17, 0x00	; 0
    2072:	c1 2c       	mov	r12, r1
    2074:	d1 2c       	mov	r13, r1
    2076:	88 85       	ldd	r24, Y+8	; 0x08
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	c8 16       	cp	r12, r24
    207c:	d9 06       	cpc	r13, r25
    207e:	0c f0       	brlt	.+2      	; 0x2082 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    2080:	74 c0       	rjmp	.+232    	; 0x216a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	b8 12       	cpse	r11, r24
    2086:	0a c0       	rjmp	.+20     	; 0x209c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    2088:	ea 81       	ldd	r30, Y+2	; 0x02
    208a:	fb 81       	ldd	r31, Y+3	; 0x03
    208c:	e0 0f       	add	r30, r16
    208e:	f1 1f       	adc	r31, r17
    2090:	01 90       	ld	r0, Z+
    2092:	f0 81       	ld	r31, Z
    2094:	e0 2d       	mov	r30, r0
    2096:	a8 81       	ld	r26, Y
    2098:	b9 81       	ldd	r27, Y+1	; 0x01
    209a:	0d c0       	rjmp	.+26     	; 0x20b6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	2e 81       	ldd	r18, Y+6	; 0x06
    20a2:	3f 81       	ldd	r19, Y+7	; 0x07
    20a4:	b1 10       	cpse	r11, r1
    20a6:	0c c0       	rjmp	.+24     	; 0x20c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    20a8:	f9 01       	movw	r30, r18
    20aa:	e0 0f       	add	r30, r16
    20ac:	f1 1f       	adc	r31, r17
    20ae:	01 90       	ld	r0, Z+
    20b0:	f0 81       	ld	r31, Z
    20b2:	e0 2d       	mov	r30, r0
    20b4:	dc 01       	movw	r26, r24
    20b6:	a0 0f       	add	r26, r16
    20b8:	b1 1f       	adc	r27, r17
    20ba:	8d 91       	ld	r24, X+
    20bc:	9c 91       	ld	r25, X
    20be:	28 c0       	rjmp	.+80     	; 0x2110 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    20c0:	fc 01       	movw	r30, r24
    20c2:	e0 0f       	add	r30, r16
    20c4:	f1 1f       	adc	r31, r17
    20c6:	40 81       	ld	r20, Z
    20c8:	51 81       	ldd	r21, Z+1	; 0x01
    20ca:	e8 81       	ld	r30, Y
    20cc:	f9 81       	ldd	r31, Y+1	; 0x01
    20ce:	e0 0f       	add	r30, r16
    20d0:	f1 1f       	adc	r31, r17
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    20d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    20da:	48 17       	cp	r20, r24
    20dc:	59 07       	cpc	r21, r25
    20de:	10 f4       	brcc	.+4      	; 0x20e4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    20e0:	cf 01       	movw	r24, r30
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    20e4:	8e 0f       	add	r24, r30
    20e6:	9f 1f       	adc	r25, r31
    20e8:	84 1b       	sub	r24, r20
    20ea:	95 0b       	sbc	r25, r21
    20ec:	d9 01       	movw	r26, r18
    20ee:	a0 0f       	add	r26, r16
    20f0:	b1 1f       	adc	r27, r17
    20f2:	2d 91       	ld	r18, X+
    20f4:	3c 91       	ld	r19, X
    20f6:	aa 81       	ldd	r26, Y+2	; 0x02
    20f8:	bb 81       	ldd	r27, Y+3	; 0x03
    20fa:	a0 0f       	add	r26, r16
    20fc:	b1 1f       	adc	r27, r17
    20fe:	4d 91       	ld	r20, X+
    2100:	5c 91       	ld	r21, X
    2102:	24 17       	cp	r18, r20
    2104:	35 07       	cpc	r19, r21
    2106:	20 f0       	brcs	.+8      	; 0x2110 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    2108:	e4 0f       	add	r30, r20
    210a:	f5 1f       	adc	r31, r21
    210c:	e2 1b       	sub	r30, r18
    210e:	f3 0b       	sbc	r31, r19
    2110:	e8 1b       	sub	r30, r24
    2112:	f9 0b       	sbc	r31, r25
    2114:	a9 f0       	breq	.+42     	; 0x2140 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    2116:	d7 01       	movw	r26, r14
    2118:	2d 91       	ld	r18, X+
    211a:	3c 91       	ld	r19, X
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	28 1b       	sub	r18, r24
    2122:	39 0b       	sbc	r19, r25
    2124:	41 09       	sbc	r20, r1
    2126:	51 09       	sbc	r21, r1
    2128:	a8 ee       	ldi	r26, 0xE8	; 232
    212a:	b3 e0       	ldi	r27, 0x03	; 3
    212c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__muluhisi3>
    2130:	9f 01       	movw	r18, r30
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	50 e0       	ldi	r21, 0x00	; 0
    2136:	0e 94 a3 11 	call	0x2346	; 0x2346 <__divmodsi4>
    213a:	37 fd       	sbrc	r19, 7
    213c:	0a c0       	rjmp	.+20     	; 0x2152 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	29 3e       	cpi	r18, 0xE9	; 233
    2146:	b3 e0       	ldi	r27, 0x03	; 3
    2148:	3b 07       	cpc	r19, r27
    214a:	2c f0       	brlt	.+10     	; 0x2156 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    214c:	28 ee       	ldi	r18, 0xE8	; 232
    214e:	33 e0       	ldi	r19, 0x03	; 3
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	f7 01       	movw	r30, r14
    2158:	21 93       	st	Z+, r18
    215a:	31 93       	st	Z+, r19
    215c:	7f 01       	movw	r14, r30
    215e:	ff ef       	ldi	r31, 0xFF	; 255
    2160:	cf 1a       	sub	r12, r31
    2162:	df 0a       	sbc	r13, r31
    2164:	0e 5f       	subi	r16, 0xFE	; 254
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	86 cf       	rjmp	.-244    	; 0x2076 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	e9 e0       	ldi	r30, 0x09	; 9
    2170:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__epilogue_restores__+0x12>

00002174 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2174:	a0 e0       	ldi	r26, 0x00	; 0
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e0 ec       	ldi	r30, 0xC0	; 192
    217a:	f0 e1       	ldi	r31, 0x10	; 16
    217c:	0c 94 e4 11 	jmp	0x23c8	; 0x23c8 <__prologue_saves__>
    2180:	ec 01       	movw	r28, r24
    2182:	8b 01       	movw	r16, r22
    2184:	82 2e       	mov	r8, r18
    2186:	0e 94 0d 10 	call	0x201a	; 0x201a <_ZN16PololuQTRSensors14readCalibratedEPjh>
    218a:	28 84       	ldd	r2, Y+8	; 0x08
    218c:	e8 01       	movw	r28, r16
    218e:	41 2c       	mov	r4, r1
    2190:	51 2c       	mov	r5, r1
    2192:	32 01       	movw	r6, r4
    2194:	00 e0       	ldi	r16, 0x00	; 0
    2196:	10 e0       	ldi	r17, 0x00	; 0
    2198:	c1 2c       	mov	r12, r1
    219a:	d1 2c       	mov	r13, r1
    219c:	76 01       	movw	r14, r12
    219e:	31 2c       	mov	r3, r1
    21a0:	91 2c       	mov	r9, r1
    21a2:	58 ee       	ldi	r21, 0xE8	; 232
    21a4:	a5 2e       	mov	r10, r21
    21a6:	53 e0       	ldi	r21, 0x03	; 3
    21a8:	b5 2e       	mov	r11, r21
    21aa:	92 14       	cp	r9, r2
    21ac:	21 f1       	breq	.+72     	; 0x21f6 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    21ae:	e9 91       	ld	r30, Y+
    21b0:	f9 91       	ld	r31, Y+
    21b2:	88 20       	and	r8, r8
    21b4:	21 f0       	breq	.+8      	; 0x21be <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    21b6:	c5 01       	movw	r24, r10
    21b8:	8e 1b       	sub	r24, r30
    21ba:	9f 0b       	sbc	r25, r31
    21bc:	fc 01       	movw	r30, r24
    21be:	e9 3c       	cpi	r30, 0xC9	; 201
    21c0:	f1 05       	cpc	r31, r1
    21c2:	24 f4       	brge	.+8      	; 0x21cc <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    21c4:	e3 33       	cpi	r30, 0x33	; 51
    21c6:	f1 05       	cpc	r31, r1
    21c8:	74 f0       	brlt	.+28     	; 0x21e6 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    21cc:	33 24       	eor	r3, r3
    21ce:	33 94       	inc	r3
    21d0:	df 01       	movw	r26, r30
    21d2:	a3 01       	movw	r20, r6
    21d4:	92 01       	movw	r18, r4
    21d6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__mulshisi3>
    21da:	c6 0e       	add	r12, r22
    21dc:	d7 1e       	adc	r13, r23
    21de:	e8 1e       	adc	r14, r24
    21e0:	f9 1e       	adc	r15, r25
    21e2:	0e 0f       	add	r16, r30
    21e4:	1f 1f       	adc	r17, r31
    21e6:	93 94       	inc	r9
    21e8:	98 ee       	ldi	r25, 0xE8	; 232
    21ea:	49 0e       	add	r4, r25
    21ec:	93 e0       	ldi	r25, 0x03	; 3
    21ee:	59 1e       	adc	r5, r25
    21f0:	61 1c       	adc	r6, r1
    21f2:	71 1c       	adc	r7, r1
    21f4:	da cf       	rjmp	.-76     	; 0x21aa <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    21f6:	31 10       	cpse	r3, r1
    21f8:	1e c0       	rjmp	.+60     	; 0x2236 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    21fa:	49 2d       	mov	r20, r9
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	41 50       	subi	r20, 0x01	; 1
    2200:	51 09       	sbc	r21, r1
    2202:	24 ef       	ldi	r18, 0xF4	; 244
    2204:	31 e0       	ldi	r19, 0x01	; 1
    2206:	42 9f       	mul	r20, r18
    2208:	c0 01       	movw	r24, r0
    220a:	43 9f       	mul	r20, r19
    220c:	90 0d       	add	r25, r0
    220e:	52 9f       	mul	r21, r18
    2210:	90 0d       	add	r25, r0
    2212:	11 24       	eor	r1, r1
    2214:	20 91 23 02 	lds	r18, 0x0223
    2218:	30 91 24 02 	lds	r19, 0x0224
    221c:	28 17       	cp	r18, r24
    221e:	39 07       	cpc	r19, r25
    2220:	b4 f0       	brlt	.+44     	; 0x224e <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    2222:	88 ee       	ldi	r24, 0xE8	; 232
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	48 9f       	mul	r20, r24
    2228:	90 01       	movw	r18, r0
    222a:	49 9f       	mul	r20, r25
    222c:	30 0d       	add	r19, r0
    222e:	58 9f       	mul	r21, r24
    2230:	30 0d       	add	r19, r0
    2232:	11 24       	eor	r1, r1
    2234:	0e c0       	rjmp	.+28     	; 0x2252 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2236:	98 01       	movw	r18, r16
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	c7 01       	movw	r24, r14
    223e:	b6 01       	movw	r22, r12
    2240:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmodsi4>
    2244:	30 93 24 02 	sts	0x0224, r19
    2248:	20 93 23 02 	sts	0x0223, r18
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	c9 01       	movw	r24, r18
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	e2 e1       	ldi	r30, 0x12	; 18
    225a:	0c 94 00 12 	jmp	0x2400	; 0x2400 <__epilogue_restores__>

0000225e <_ZN16PololuQTRSensorsD1Ev>:
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	ec 01       	movw	r28, r24
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	11 f0       	breq	.+4      	; 0x2270 <_ZN16PololuQTRSensorsD1Ev+0x12>
    226c:	0e 94 b6 12 	call	0x256c	; 0x256c <free>
    2270:	8e 81       	ldd	r24, Y+6	; 0x06
    2272:	9f 81       	ldd	r25, Y+7	; 0x07
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	11 f0       	breq	.+4      	; 0x227c <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2278:	0e 94 b6 12 	call	0x256c	; 0x256c <free>
    227c:	88 81       	ld	r24, Y
    227e:	99 81       	ldd	r25, Y+1	; 0x01
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	11 f0       	breq	.+4      	; 0x2288 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2284:	0e 94 b6 12 	call	0x256c	; 0x256c <free>
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	11 f0       	breq	.+4      	; 0x2294 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2290:	0e 94 b6 12 	call	0x256c	; 0x256c <free>
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	08 95       	ret

0000229a <__udivmodqi4>:
    229a:	99 1b       	sub	r25, r25
    229c:	79 e0       	ldi	r23, 0x09	; 9
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <__udivmodqi4_ep>

000022a0 <__udivmodqi4_loop>:
    22a0:	99 1f       	adc	r25, r25
    22a2:	96 17       	cp	r25, r22
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <__udivmodqi4_ep>
    22a6:	96 1b       	sub	r25, r22

000022a8 <__udivmodqi4_ep>:
    22a8:	88 1f       	adc	r24, r24
    22aa:	7a 95       	dec	r23
    22ac:	c9 f7       	brne	.-14     	; 0x22a0 <__udivmodqi4_loop>
    22ae:	80 95       	com	r24
    22b0:	08 95       	ret

000022b2 <__udivmodhi4>:
    22b2:	aa 1b       	sub	r26, r26
    22b4:	bb 1b       	sub	r27, r27
    22b6:	51 e1       	ldi	r21, 0x11	; 17
    22b8:	07 c0       	rjmp	.+14     	; 0x22c8 <__udivmodhi4_ep>

000022ba <__udivmodhi4_loop>:
    22ba:	aa 1f       	adc	r26, r26
    22bc:	bb 1f       	adc	r27, r27
    22be:	a6 17       	cp	r26, r22
    22c0:	b7 07       	cpc	r27, r23
    22c2:	10 f0       	brcs	.+4      	; 0x22c8 <__udivmodhi4_ep>
    22c4:	a6 1b       	sub	r26, r22
    22c6:	b7 0b       	sbc	r27, r23

000022c8 <__udivmodhi4_ep>:
    22c8:	88 1f       	adc	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	5a 95       	dec	r21
    22ce:	a9 f7       	brne	.-22     	; 0x22ba <__udivmodhi4_loop>
    22d0:	80 95       	com	r24
    22d2:	90 95       	com	r25
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	08 95       	ret

000022da <__divmodhi4>:
    22da:	97 fb       	bst	r25, 7
    22dc:	07 2e       	mov	r0, r23
    22de:	16 f4       	brtc	.+4      	; 0x22e4 <__divmodhi4+0xa>
    22e0:	00 94       	com	r0
    22e2:	07 d0       	rcall	.+14     	; 0x22f2 <__divmodhi4_neg1>
    22e4:	77 fd       	sbrc	r23, 7
    22e6:	09 d0       	rcall	.+18     	; 0x22fa <__divmodhi4_neg2>
    22e8:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__udivmodhi4>
    22ec:	07 fc       	sbrc	r0, 7
    22ee:	05 d0       	rcall	.+10     	; 0x22fa <__divmodhi4_neg2>
    22f0:	3e f4       	brtc	.+14     	; 0x2300 <__divmodhi4_exit>

000022f2 <__divmodhi4_neg1>:
    22f2:	90 95       	com	r25
    22f4:	81 95       	neg	r24
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	08 95       	ret

000022fa <__divmodhi4_neg2>:
    22fa:	70 95       	com	r23
    22fc:	61 95       	neg	r22
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255

00002300 <__divmodhi4_exit>:
    2300:	08 95       	ret

00002302 <__udivmodsi4>:
    2302:	a1 e2       	ldi	r26, 0x21	; 33
    2304:	1a 2e       	mov	r1, r26
    2306:	aa 1b       	sub	r26, r26
    2308:	bb 1b       	sub	r27, r27
    230a:	fd 01       	movw	r30, r26
    230c:	0d c0       	rjmp	.+26     	; 0x2328 <__udivmodsi4_ep>

0000230e <__udivmodsi4_loop>:
    230e:	aa 1f       	adc	r26, r26
    2310:	bb 1f       	adc	r27, r27
    2312:	ee 1f       	adc	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	a2 17       	cp	r26, r18
    2318:	b3 07       	cpc	r27, r19
    231a:	e4 07       	cpc	r30, r20
    231c:	f5 07       	cpc	r31, r21
    231e:	20 f0       	brcs	.+8      	; 0x2328 <__udivmodsi4_ep>
    2320:	a2 1b       	sub	r26, r18
    2322:	b3 0b       	sbc	r27, r19
    2324:	e4 0b       	sbc	r30, r20
    2326:	f5 0b       	sbc	r31, r21

00002328 <__udivmodsi4_ep>:
    2328:	66 1f       	adc	r22, r22
    232a:	77 1f       	adc	r23, r23
    232c:	88 1f       	adc	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	1a 94       	dec	r1
    2332:	69 f7       	brne	.-38     	; 0x230e <__udivmodsi4_loop>
    2334:	60 95       	com	r22
    2336:	70 95       	com	r23
    2338:	80 95       	com	r24
    233a:	90 95       	com	r25
    233c:	9b 01       	movw	r18, r22
    233e:	ac 01       	movw	r20, r24
    2340:	bd 01       	movw	r22, r26
    2342:	cf 01       	movw	r24, r30
    2344:	08 95       	ret

00002346 <__divmodsi4>:
    2346:	05 2e       	mov	r0, r21
    2348:	97 fb       	bst	r25, 7
    234a:	1e f4       	brtc	.+6      	; 0x2352 <__divmodsi4+0xc>
    234c:	00 94       	com	r0
    234e:	0e 94 ba 11 	call	0x2374	; 0x2374 <__negsi2>
    2352:	57 fd       	sbrc	r21, 7
    2354:	07 d0       	rcall	.+14     	; 0x2364 <__divmodsi4_neg2>
    2356:	0e 94 81 11 	call	0x2302	; 0x2302 <__udivmodsi4>
    235a:	07 fc       	sbrc	r0, 7
    235c:	03 d0       	rcall	.+6      	; 0x2364 <__divmodsi4_neg2>
    235e:	4e f4       	brtc	.+18     	; 0x2372 <__divmodsi4_exit>
    2360:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__negsi2>

00002364 <__divmodsi4_neg2>:
    2364:	50 95       	com	r21
    2366:	40 95       	com	r20
    2368:	30 95       	com	r19
    236a:	21 95       	neg	r18
    236c:	3f 4f       	sbci	r19, 0xFF	; 255
    236e:	4f 4f       	sbci	r20, 0xFF	; 255
    2370:	5f 4f       	sbci	r21, 0xFF	; 255

00002372 <__divmodsi4_exit>:
    2372:	08 95       	ret

00002374 <__negsi2>:
    2374:	90 95       	com	r25
    2376:	80 95       	com	r24
    2378:	70 95       	com	r23
    237a:	61 95       	neg	r22
    237c:	7f 4f       	sbci	r23, 0xFF	; 255
    237e:	8f 4f       	sbci	r24, 0xFF	; 255
    2380:	9f 4f       	sbci	r25, 0xFF	; 255
    2382:	08 95       	ret

00002384 <__umulhisi3>:
    2384:	a2 9f       	mul	r26, r18
    2386:	b0 01       	movw	r22, r0
    2388:	b3 9f       	mul	r27, r19
    238a:	c0 01       	movw	r24, r0
    238c:	a3 9f       	mul	r26, r19
    238e:	70 0d       	add	r23, r0
    2390:	81 1d       	adc	r24, r1
    2392:	11 24       	eor	r1, r1
    2394:	91 1d       	adc	r25, r1
    2396:	b2 9f       	mul	r27, r18
    2398:	70 0d       	add	r23, r0
    239a:	81 1d       	adc	r24, r1
    239c:	11 24       	eor	r1, r1
    239e:	91 1d       	adc	r25, r1
    23a0:	08 95       	ret

000023a2 <__muluhisi3>:
    23a2:	0e 94 c2 11 	call	0x2384	; 0x2384 <__umulhisi3>
    23a6:	a5 9f       	mul	r26, r21
    23a8:	90 0d       	add	r25, r0
    23aa:	b4 9f       	mul	r27, r20
    23ac:	90 0d       	add	r25, r0
    23ae:	a4 9f       	mul	r26, r20
    23b0:	80 0d       	add	r24, r0
    23b2:	91 1d       	adc	r25, r1
    23b4:	11 24       	eor	r1, r1
    23b6:	08 95       	ret

000023b8 <__mulshisi3>:
    23b8:	b7 ff       	sbrs	r27, 7
    23ba:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__muluhisi3>

000023be <__mulohisi3>:
    23be:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__muluhisi3>
    23c2:	82 1b       	sub	r24, r18
    23c4:	93 0b       	sbc	r25, r19
    23c6:	08 95       	ret

000023c8 <__prologue_saves__>:
    23c8:	2f 92       	push	r2
    23ca:	3f 92       	push	r3
    23cc:	4f 92       	push	r4
    23ce:	5f 92       	push	r5
    23d0:	6f 92       	push	r6
    23d2:	7f 92       	push	r7
    23d4:	8f 92       	push	r8
    23d6:	9f 92       	push	r9
    23d8:	af 92       	push	r10
    23da:	bf 92       	push	r11
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	ca 1b       	sub	r28, r26
    23f2:	db 0b       	sbc	r29, r27
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	09 94       	ijmp

00002400 <__epilogue_restores__>:
    2400:	2a 88       	ldd	r2, Y+18	; 0x12
    2402:	39 88       	ldd	r3, Y+17	; 0x11
    2404:	48 88       	ldd	r4, Y+16	; 0x10
    2406:	5f 84       	ldd	r5, Y+15	; 0x0f
    2408:	6e 84       	ldd	r6, Y+14	; 0x0e
    240a:	7d 84       	ldd	r7, Y+13	; 0x0d
    240c:	8c 84       	ldd	r8, Y+12	; 0x0c
    240e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2410:	aa 84       	ldd	r10, Y+10	; 0x0a
    2412:	b9 84       	ldd	r11, Y+9	; 0x09
    2414:	c8 84       	ldd	r12, Y+8	; 0x08
    2416:	df 80       	ldd	r13, Y+7	; 0x07
    2418:	ee 80       	ldd	r14, Y+6	; 0x06
    241a:	fd 80       	ldd	r15, Y+5	; 0x05
    241c:	0c 81       	ldd	r16, Y+4	; 0x04
    241e:	1b 81       	ldd	r17, Y+3	; 0x03
    2420:	aa 81       	ldd	r26, Y+2	; 0x02
    2422:	b9 81       	ldd	r27, Y+1	; 0x01
    2424:	ce 0f       	add	r28, r30
    2426:	d1 1d       	adc	r29, r1
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	ed 01       	movw	r28, r26
    2434:	08 95       	ret

00002436 <__tablejump2__>:
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	05 90       	lpm	r0, Z+
    243c:	f4 91       	lpm	r31, Z
    243e:	e0 2d       	mov	r30, r0
    2440:	09 94       	ijmp

00002442 <malloc>:
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	82 30       	cpi	r24, 0x02	; 2
    2448:	91 05       	cpc	r25, r1
    244a:	10 f4       	brcc	.+4      	; 0x2450 <malloc+0xe>
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	e0 91 de 03 	lds	r30, 0x03DE
    2454:	f0 91 df 03 	lds	r31, 0x03DF
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	c0 e0       	ldi	r28, 0x00	; 0
    245e:	d0 e0       	ldi	r29, 0x00	; 0
    2460:	30 97       	sbiw	r30, 0x00	; 0
    2462:	11 f1       	breq	.+68     	; 0x24a8 <malloc+0x66>
    2464:	40 81       	ld	r20, Z
    2466:	51 81       	ldd	r21, Z+1	; 0x01
    2468:	48 17       	cp	r20, r24
    246a:	59 07       	cpc	r21, r25
    246c:	c0 f0       	brcs	.+48     	; 0x249e <malloc+0x5c>
    246e:	48 17       	cp	r20, r24
    2470:	59 07       	cpc	r21, r25
    2472:	61 f4       	brne	.+24     	; 0x248c <malloc+0x4a>
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 97       	sbiw	r28, 0x00	; 0
    247a:	19 f0       	breq	.+6      	; 0x2482 <malloc+0x40>
    247c:	9b 83       	std	Y+3, r25	; 0x03
    247e:	8a 83       	std	Y+2, r24	; 0x02
    2480:	2b c0       	rjmp	.+86     	; 0x24d8 <malloc+0x96>
    2482:	90 93 df 03 	sts	0x03DF, r25
    2486:	80 93 de 03 	sts	0x03DE, r24
    248a:	26 c0       	rjmp	.+76     	; 0x24d8 <malloc+0x96>
    248c:	21 15       	cp	r18, r1
    248e:	31 05       	cpc	r19, r1
    2490:	19 f0       	breq	.+6      	; 0x2498 <malloc+0x56>
    2492:	42 17       	cp	r20, r18
    2494:	53 07       	cpc	r21, r19
    2496:	18 f4       	brcc	.+6      	; 0x249e <malloc+0x5c>
    2498:	9a 01       	movw	r18, r20
    249a:	be 01       	movw	r22, r28
    249c:	df 01       	movw	r26, r30
    249e:	ef 01       	movw	r28, r30
    24a0:	02 80       	ldd	r0, Z+2	; 0x02
    24a2:	f3 81       	ldd	r31, Z+3	; 0x03
    24a4:	e0 2d       	mov	r30, r0
    24a6:	dc cf       	rjmp	.-72     	; 0x2460 <malloc+0x1e>
    24a8:	21 15       	cp	r18, r1
    24aa:	31 05       	cpc	r19, r1
    24ac:	09 f1       	breq	.+66     	; 0x24f0 <malloc+0xae>
    24ae:	28 1b       	sub	r18, r24
    24b0:	39 0b       	sbc	r19, r25
    24b2:	24 30       	cpi	r18, 0x04	; 4
    24b4:	31 05       	cpc	r19, r1
    24b6:	90 f4       	brcc	.+36     	; 0x24dc <malloc+0x9a>
    24b8:	12 96       	adiw	r26, 0x02	; 2
    24ba:	8d 91       	ld	r24, X+
    24bc:	9c 91       	ld	r25, X
    24be:	13 97       	sbiw	r26, 0x03	; 3
    24c0:	61 15       	cp	r22, r1
    24c2:	71 05       	cpc	r23, r1
    24c4:	21 f0       	breq	.+8      	; 0x24ce <malloc+0x8c>
    24c6:	fb 01       	movw	r30, r22
    24c8:	93 83       	std	Z+3, r25	; 0x03
    24ca:	82 83       	std	Z+2, r24	; 0x02
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <malloc+0x94>
    24ce:	90 93 df 03 	sts	0x03DF, r25
    24d2:	80 93 de 03 	sts	0x03DE, r24
    24d6:	fd 01       	movw	r30, r26
    24d8:	32 96       	adiw	r30, 0x02	; 2
    24da:	44 c0       	rjmp	.+136    	; 0x2564 <malloc+0x122>
    24dc:	fd 01       	movw	r30, r26
    24de:	e2 0f       	add	r30, r18
    24e0:	f3 1f       	adc	r31, r19
    24e2:	81 93       	st	Z+, r24
    24e4:	91 93       	st	Z+, r25
    24e6:	22 50       	subi	r18, 0x02	; 2
    24e8:	31 09       	sbc	r19, r1
    24ea:	2d 93       	st	X+, r18
    24ec:	3c 93       	st	X, r19
    24ee:	3a c0       	rjmp	.+116    	; 0x2564 <malloc+0x122>
    24f0:	20 91 dc 03 	lds	r18, 0x03DC
    24f4:	30 91 dd 03 	lds	r19, 0x03DD
    24f8:	23 2b       	or	r18, r19
    24fa:	41 f4       	brne	.+16     	; 0x250c <malloc+0xca>
    24fc:	20 91 10 01 	lds	r18, 0x0110
    2500:	30 91 11 01 	lds	r19, 0x0111
    2504:	30 93 dd 03 	sts	0x03DD, r19
    2508:	20 93 dc 03 	sts	0x03DC, r18
    250c:	20 91 0e 01 	lds	r18, 0x010E
    2510:	30 91 0f 01 	lds	r19, 0x010F
    2514:	21 15       	cp	r18, r1
    2516:	31 05       	cpc	r19, r1
    2518:	41 f4       	brne	.+16     	; 0x252a <malloc+0xe8>
    251a:	2d b7       	in	r18, 0x3d	; 61
    251c:	3e b7       	in	r19, 0x3e	; 62
    251e:	40 91 12 01 	lds	r20, 0x0112
    2522:	50 91 13 01 	lds	r21, 0x0113
    2526:	24 1b       	sub	r18, r20
    2528:	35 0b       	sbc	r19, r21
    252a:	e0 91 dc 03 	lds	r30, 0x03DC
    252e:	f0 91 dd 03 	lds	r31, 0x03DD
    2532:	e2 17       	cp	r30, r18
    2534:	f3 07       	cpc	r31, r19
    2536:	a0 f4       	brcc	.+40     	; 0x2560 <malloc+0x11e>
    2538:	2e 1b       	sub	r18, r30
    253a:	3f 0b       	sbc	r19, r31
    253c:	28 17       	cp	r18, r24
    253e:	39 07       	cpc	r19, r25
    2540:	78 f0       	brcs	.+30     	; 0x2560 <malloc+0x11e>
    2542:	ac 01       	movw	r20, r24
    2544:	4e 5f       	subi	r20, 0xFE	; 254
    2546:	5f 4f       	sbci	r21, 0xFF	; 255
    2548:	24 17       	cp	r18, r20
    254a:	35 07       	cpc	r19, r21
    254c:	48 f0       	brcs	.+18     	; 0x2560 <malloc+0x11e>
    254e:	4e 0f       	add	r20, r30
    2550:	5f 1f       	adc	r21, r31
    2552:	50 93 dd 03 	sts	0x03DD, r21
    2556:	40 93 dc 03 	sts	0x03DC, r20
    255a:	81 93       	st	Z+, r24
    255c:	91 93       	st	Z+, r25
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <malloc+0x122>
    2560:	e0 e0       	ldi	r30, 0x00	; 0
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	cf 01       	movw	r24, r30
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	08 95       	ret

0000256c <free>:
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	09 f4       	brne	.+2      	; 0x257a <free+0xe>
    2578:	8c c0       	rjmp	.+280    	; 0x2692 <free+0x126>
    257a:	fc 01       	movw	r30, r24
    257c:	32 97       	sbiw	r30, 0x02	; 2
    257e:	13 82       	std	Z+3, r1	; 0x03
    2580:	12 82       	std	Z+2, r1	; 0x02
    2582:	00 91 de 03 	lds	r16, 0x03DE
    2586:	10 91 df 03 	lds	r17, 0x03DF
    258a:	01 15       	cp	r16, r1
    258c:	11 05       	cpc	r17, r1
    258e:	81 f4       	brne	.+32     	; 0x25b0 <free+0x44>
    2590:	20 81       	ld	r18, Z
    2592:	31 81       	ldd	r19, Z+1	; 0x01
    2594:	82 0f       	add	r24, r18
    2596:	93 1f       	adc	r25, r19
    2598:	20 91 dc 03 	lds	r18, 0x03DC
    259c:	30 91 dd 03 	lds	r19, 0x03DD
    25a0:	28 17       	cp	r18, r24
    25a2:	39 07       	cpc	r19, r25
    25a4:	79 f5       	brne	.+94     	; 0x2604 <free+0x98>
    25a6:	f0 93 dd 03 	sts	0x03DD, r31
    25aa:	e0 93 dc 03 	sts	0x03DC, r30
    25ae:	71 c0       	rjmp	.+226    	; 0x2692 <free+0x126>
    25b0:	d8 01       	movw	r26, r16
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	ae 17       	cp	r26, r30
    25b8:	bf 07       	cpc	r27, r31
    25ba:	50 f4       	brcc	.+20     	; 0x25d0 <free+0x64>
    25bc:	12 96       	adiw	r26, 0x02	; 2
    25be:	2d 91       	ld	r18, X+
    25c0:	3c 91       	ld	r19, X
    25c2:	13 97       	sbiw	r26, 0x03	; 3
    25c4:	ad 01       	movw	r20, r26
    25c6:	21 15       	cp	r18, r1
    25c8:	31 05       	cpc	r19, r1
    25ca:	09 f1       	breq	.+66     	; 0x260e <free+0xa2>
    25cc:	d9 01       	movw	r26, r18
    25ce:	f3 cf       	rjmp	.-26     	; 0x25b6 <free+0x4a>
    25d0:	9d 01       	movw	r18, r26
    25d2:	da 01       	movw	r26, r20
    25d4:	33 83       	std	Z+3, r19	; 0x03
    25d6:	22 83       	std	Z+2, r18	; 0x02
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	86 0f       	add	r24, r22
    25de:	97 1f       	adc	r25, r23
    25e0:	82 17       	cp	r24, r18
    25e2:	93 07       	cpc	r25, r19
    25e4:	69 f4       	brne	.+26     	; 0x2600 <free+0x94>
    25e6:	ec 01       	movw	r28, r24
    25e8:	28 81       	ld	r18, Y
    25ea:	39 81       	ldd	r19, Y+1	; 0x01
    25ec:	26 0f       	add	r18, r22
    25ee:	37 1f       	adc	r19, r23
    25f0:	2e 5f       	subi	r18, 0xFE	; 254
    25f2:	3f 4f       	sbci	r19, 0xFF	; 255
    25f4:	31 83       	std	Z+1, r19	; 0x01
    25f6:	20 83       	st	Z, r18
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	9b 81       	ldd	r25, Y+3	; 0x03
    25fc:	93 83       	std	Z+3, r25	; 0x03
    25fe:	82 83       	std	Z+2, r24	; 0x02
    2600:	45 2b       	or	r20, r21
    2602:	29 f4       	brne	.+10     	; 0x260e <free+0xa2>
    2604:	f0 93 df 03 	sts	0x03DF, r31
    2608:	e0 93 de 03 	sts	0x03DE, r30
    260c:	42 c0       	rjmp	.+132    	; 0x2692 <free+0x126>
    260e:	13 96       	adiw	r26, 0x03	; 3
    2610:	fc 93       	st	X, r31
    2612:	ee 93       	st	-X, r30
    2614:	12 97       	sbiw	r26, 0x02	; 2
    2616:	ed 01       	movw	r28, r26
    2618:	49 91       	ld	r20, Y+
    261a:	59 91       	ld	r21, Y+
    261c:	9e 01       	movw	r18, r28
    261e:	24 0f       	add	r18, r20
    2620:	35 1f       	adc	r19, r21
    2622:	e2 17       	cp	r30, r18
    2624:	f3 07       	cpc	r31, r19
    2626:	71 f4       	brne	.+28     	; 0x2644 <free+0xd8>
    2628:	80 81       	ld	r24, Z
    262a:	91 81       	ldd	r25, Z+1	; 0x01
    262c:	84 0f       	add	r24, r20
    262e:	95 1f       	adc	r25, r21
    2630:	02 96       	adiw	r24, 0x02	; 2
    2632:	11 96       	adiw	r26, 0x01	; 1
    2634:	9c 93       	st	X, r25
    2636:	8e 93       	st	-X, r24
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	13 96       	adiw	r26, 0x03	; 3
    263e:	9c 93       	st	X, r25
    2640:	8e 93       	st	-X, r24
    2642:	12 97       	sbiw	r26, 0x02	; 2
    2644:	e0 e0       	ldi	r30, 0x00	; 0
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	d8 01       	movw	r26, r16
    264a:	12 96       	adiw	r26, 0x02	; 2
    264c:	8d 91       	ld	r24, X+
    264e:	9c 91       	ld	r25, X
    2650:	13 97       	sbiw	r26, 0x03	; 3
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	19 f0       	breq	.+6      	; 0x265c <free+0xf0>
    2656:	f8 01       	movw	r30, r16
    2658:	8c 01       	movw	r16, r24
    265a:	f6 cf       	rjmp	.-20     	; 0x2648 <free+0xdc>
    265c:	8d 91       	ld	r24, X+
    265e:	9c 91       	ld	r25, X
    2660:	98 01       	movw	r18, r16
    2662:	2e 5f       	subi	r18, 0xFE	; 254
    2664:	3f 4f       	sbci	r19, 0xFF	; 255
    2666:	82 0f       	add	r24, r18
    2668:	93 1f       	adc	r25, r19
    266a:	20 91 dc 03 	lds	r18, 0x03DC
    266e:	30 91 dd 03 	lds	r19, 0x03DD
    2672:	28 17       	cp	r18, r24
    2674:	39 07       	cpc	r19, r25
    2676:	69 f4       	brne	.+26     	; 0x2692 <free+0x126>
    2678:	30 97       	sbiw	r30, 0x00	; 0
    267a:	29 f4       	brne	.+10     	; 0x2686 <free+0x11a>
    267c:	10 92 df 03 	sts	0x03DF, r1
    2680:	10 92 de 03 	sts	0x03DE, r1
    2684:	02 c0       	rjmp	.+4      	; 0x268a <free+0x11e>
    2686:	13 82       	std	Z+3, r1	; 0x03
    2688:	12 82       	std	Z+2, r1	; 0x02
    268a:	10 93 dd 03 	sts	0x03DD, r17
    268e:	00 93 dc 03 	sts	0x03DC, r16
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	08 95       	ret

0000269c <__do_global_dtors>:
    269c:	10 e0       	ldi	r17, 0x00	; 0
    269e:	cf e4       	ldi	r28, 0x4F	; 79
    26a0:	d0 e0       	ldi	r29, 0x00	; 0
    26a2:	04 c0       	rjmp	.+8      	; 0x26ac <__do_global_dtors+0x10>
    26a4:	fe 01       	movw	r30, r28
    26a6:	0e 94 1b 12 	call	0x2436	; 0x2436 <__tablejump2__>
    26aa:	21 96       	adiw	r28, 0x01	; 1
    26ac:	c0 35       	cpi	r28, 0x50	; 80
    26ae:	d1 07       	cpc	r29, r17
    26b0:	c9 f7       	brne	.-14     	; 0x26a4 <__do_global_dtors+0x8>
    26b2:	f8 94       	cli

000026b4 <__stop_program>:
    26b4:	ff cf       	rjmp	.-2      	; 0x26b4 <__stop_program>
